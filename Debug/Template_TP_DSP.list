
Template_TP_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005118  0800bf88  0800bf88  0000cf88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110a0  080110a0  0001305c  2**0
                  CONTENTS
  4 .ARM          00000008  080110a0  080110a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110a8  080110a8  0001305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110a8  080110a8  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110ac  080110ac  000120ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080110b0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001019c  2000005c  0801110c  0001305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200101f8  0801110c  000131f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1df  00000000  00000000  0001308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004256  00000000  00000000  0003126b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b88  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000153c  00000000  00000000  00037050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029067  00000000  00000000  0003858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022943  00000000  00000000  000615f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f72c7  00000000  00000000  00083f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b1fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007738  00000000  00000000  0017b240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00182978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800bf70 	.word	0x0800bf70

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800bf70 	.word	0x0800bf70

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	81fb      	strh	r3, [r7, #14]
 8000e00:	460b      	mov	r3, r1
 8000e02:	81bb      	strh	r3, [r7, #12]
 8000e04:	4613      	mov	r3, r2
 8000e06:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000e0c:	89bb      	ldrh	r3, [r7, #12]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000e12:	89bb      	ldrh	r3, [r7, #12]
 8000e14:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000e18:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000e1e:	f001 fc71 	bl	8002704 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2203      	movs	r2, #3
 8000e28:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fafb 	bl	8002428 <CODEC_IO_Write>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	4413      	add	r3, r2
 8000e3a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000e3c:	89fb      	ldrh	r3, [r7, #14]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	f640 0117 	movw	r1, #2071	@ 0x817
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 faee 	bl	8002428 <CODEC_IO_Write>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	4413      	add	r3, r2
 8000e54:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fae1 	bl	8002428 <CODEC_IO_Write>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000e70:	89fb      	ldrh	r3, [r7, #14]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	226c      	movs	r2, #108	@ 0x6c
 8000e76:	2139      	movs	r1, #57	@ 0x39
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fad5 	bl	8002428 <CODEC_IO_Write>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	4413      	add	r3, r2
 8000e86:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8000e88:	8afb      	ldrh	r3, [r7, #22]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00c      	beq.n	8000ea8 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2213      	movs	r2, #19
 8000e94:	2101      	movs	r1, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fac6 	bl	8002428 <CODEC_IO_Write>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e00b      	b.n	8000ec0 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2203      	movs	r2, #3
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fab9 	bl	8002428 <CODEC_IO_Write>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8000ec0:	2032      	movs	r0, #50	@ 0x32
 8000ec2:	f001 fc87 	bl	80027d4 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8000ec6:	8b3b      	ldrh	r3, [r7, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 815f 	beq.w	800118c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8000ece:	4bae      	ldr	r3, [pc, #696]	@ (8001188 <wm8994_Init+0x394>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8000ed4:	8b3b      	ldrh	r3, [r7, #24]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	f000 808c 	beq.w	8000ff4 <wm8994_Init+0x200>
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	f300 8111 	bgt.w	8001104 <wm8994_Init+0x310>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d002      	beq.n	8000eec <wm8994_Init+0xf8>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d042      	beq.n	8000f70 <wm8994_Init+0x17c>
 8000eea:	e10b      	b.n	8001104 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000eec:	89fb      	ldrh	r3, [r7, #14]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fa96 	bl	8002428 <CODEC_IO_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	4413      	add	r3, r2
 8000f04:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f240 6101 	movw	r1, #1537	@ 0x601
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fa89 	bl	8002428 <CODEC_IO_Write>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000f20:	89fb      	ldrh	r3, [r7, #14]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	f240 6102 	movw	r1, #1538	@ 0x602
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fa7c 	bl	8002428 <CODEC_IO_Write>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	4413      	add	r3, r2
 8000f38:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f240 6104 	movw	r1, #1540	@ 0x604
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fa6f 	bl	8002428 <CODEC_IO_Write>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	4413      	add	r3, r2
 8000f52:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2202      	movs	r2, #2
 8000f5a:	f240 6105 	movw	r1, #1541	@ 0x605
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fa62 	bl	8002428 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	61fb      	str	r3, [r7, #28]
      break;
 8000f6e:	e110      	b.n	8001192 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f240 3203 	movw	r2, #771	@ 0x303
 8000f78:	2105      	movs	r1, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fa54 	bl	8002428 <CODEC_IO_Write>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	4413      	add	r3, r2
 8000f88:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f240 6101 	movw	r1, #1537	@ 0x601
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fa47 	bl	8002428 <CODEC_IO_Write>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f240 6102 	movw	r1, #1538	@ 0x602
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fa3a 	bl	8002428 <CODEC_IO_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	4413      	add	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f240 6104 	movw	r1, #1540	@ 0x604
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fa2d 	bl	8002428 <CODEC_IO_Write>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f240 6105 	movw	r1, #1541	@ 0x605
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 fa20 	bl	8002428 <CODEC_IO_Write>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	4413      	add	r3, r2
 8000ff0:	61fb      	str	r3, [r7, #28]
      break;
 8000ff2:	e0ce      	b.n	8001192 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ffa:	d141      	bne.n	8001080 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001004:	2105      	movs	r1, #5
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fa0e 	bl	8002428 <CODEC_IO_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	4413      	add	r3, r2
 8001014:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2203      	movs	r2, #3
 800101c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fa01 	bl	8002428 <CODEC_IO_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	4413      	add	r3, r2
 800102e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2203      	movs	r2, #3
 8001036:	f240 6102 	movw	r1, #1538	@ 0x602
 800103a:	4618      	mov	r0, r3
 800103c:	f001 f9f4 	bl	8002428 <CODEC_IO_Write>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	4413      	add	r3, r2
 8001048:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2203      	movs	r2, #3
 8001050:	f240 6104 	movw	r1, #1540	@ 0x604
 8001054:	4618      	mov	r0, r3
 8001056:	f001 f9e7 	bl	8002428 <CODEC_IO_Write>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	4413      	add	r3, r2
 8001062:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8001064:	89fb      	ldrh	r3, [r7, #14]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2203      	movs	r2, #3
 800106a:	f240 6105 	movw	r1, #1541	@ 0x605
 800106e:	4618      	mov	r0, r3
 8001070:	f001 f9da 	bl	8002428 <CODEC_IO_Write>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	4413      	add	r3, r2
 800107c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800107e:	e088      	b.n	8001192 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001088:	2105      	movs	r1, #5
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f9cc 	bl	8002428 <CODEC_IO_Write>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	4413      	add	r3, r2
 8001098:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2201      	movs	r2, #1
 80010a0:	f240 6101 	movw	r1, #1537	@ 0x601
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 f9bf 	bl	8002428 <CODEC_IO_Write>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	4413      	add	r3, r2
 80010b2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80010b4:	89fb      	ldrh	r3, [r7, #14]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2201      	movs	r2, #1
 80010ba:	f240 6102 	movw	r1, #1538	@ 0x602
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f9b2 	bl	8002428 <CODEC_IO_Write>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	4413      	add	r3, r2
 80010cc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2202      	movs	r2, #2
 80010d4:	f240 6104 	movw	r1, #1540	@ 0x604
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f9a5 	bl	8002428 <CODEC_IO_Write>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	4413      	add	r3, r2
 80010e6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2202      	movs	r2, #2
 80010ee:	f240 6105 	movw	r1, #1541	@ 0x605
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f998 	bl	8002428 <CODEC_IO_Write>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	4413      	add	r3, r2
 8001100:	61fb      	str	r3, [r7, #28]
      break;
 8001102:	e046      	b.n	8001192 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001104:	89fb      	ldrh	r3, [r7, #14]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f240 3203 	movw	r2, #771	@ 0x303
 800110c:	2105      	movs	r1, #5
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f98a 	bl	8002428 <CODEC_IO_Write>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	4413      	add	r3, r2
 800111c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2201      	movs	r2, #1
 8001124:	f240 6101 	movw	r1, #1537	@ 0x601
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f97d 	bl	8002428 <CODEC_IO_Write>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	4413      	add	r3, r2
 8001136:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2201      	movs	r2, #1
 800113e:	f240 6102 	movw	r1, #1538	@ 0x602
 8001142:	4618      	mov	r0, r3
 8001144:	f001 f970 	bl	8002428 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	4413      	add	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2200      	movs	r2, #0
 8001158:	f240 6104 	movw	r1, #1540	@ 0x604
 800115c:	4618      	mov	r0, r3
 800115e:	f001 f963 	bl	8002428 <CODEC_IO_Write>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	4413      	add	r3, r2
 800116a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800116c:	89fb      	ldrh	r3, [r7, #14]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2200      	movs	r2, #0
 8001172:	f240 6105 	movw	r1, #1541	@ 0x605
 8001176:	4618      	mov	r0, r3
 8001178:	f001 f956 	bl	8002428 <CODEC_IO_Write>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	61fb      	str	r3, [r7, #28]
      break;
 8001186:	e004      	b.n	8001192 <wm8994_Init+0x39e>
 8001188:	20000078 	.word	0x20000078
    }
  }
  else
  {
    outputEnabled = 0;
 800118c:	4b99      	ldr	r3, [pc, #612]	@ (80013f4 <wm8994_Init+0x600>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001192:	8afb      	ldrh	r3, [r7, #22]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 81ab 	beq.w	80014f0 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800119a:	4b97      	ldr	r3, [pc, #604]	@ (80013f8 <wm8994_Init+0x604>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80011a0:	8afb      	ldrh	r3, [r7, #22]
 80011a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011a6:	f000 8129 	beq.w	80013fc <wm8994_Init+0x608>
 80011aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011ae:	f300 819b 	bgt.w	80014e8 <wm8994_Init+0x6f4>
 80011b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80011b6:	d05a      	beq.n	800126e <wm8994_Init+0x47a>
 80011b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80011bc:	f300 8194 	bgt.w	80014e8 <wm8994_Init+0x6f4>
 80011c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011c4:	f000 80c6 	beq.w	8001354 <wm8994_Init+0x560>
 80011c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011cc:	f040 818c 	bne.w	80014e8 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80011d8:	2104      	movs	r1, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f924 	bl	8002428 <CODEC_IO_Write>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	4413      	add	r3, r2
 80011e8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	22db      	movs	r2, #219	@ 0xdb
 80011f0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 f917 	bl	8002428 <CODEC_IO_Write>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	4413      	add	r3, r2
 8001202:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800120c:	2102      	movs	r1, #2
 800120e:	4618      	mov	r0, r3
 8001210:	f001 f90a 	bl	8002428 <CODEC_IO_Write>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	4413      	add	r3, r2
 800121c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2202      	movs	r2, #2
 8001224:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001228:	4618      	mov	r0, r3
 800122a:	f001 f8fd 	bl	8002428 <CODEC_IO_Write>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	4413      	add	r3, r2
 8001236:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2202      	movs	r2, #2
 800123e:	f240 6109 	movw	r1, #1545	@ 0x609
 8001242:	4618      	mov	r0, r3
 8001244:	f001 f8f0 	bl	8002428 <CODEC_IO_Write>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	220e      	movs	r2, #14
 8001258:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f8e3 	bl	8002428 <CODEC_IO_Write>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	4413      	add	r3, r2
 800126a:	61fb      	str	r3, [r7, #28]
      break;
 800126c:	e143      	b.n	80014f6 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2211      	movs	r2, #17
 8001274:	2128      	movs	r1, #40	@ 0x28
 8001276:	4618      	mov	r0, r3
 8001278:	f001 f8d6 	bl	8002428 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	4413      	add	r3, r2
 8001284:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2235      	movs	r2, #53	@ 0x35
 800128c:	2129      	movs	r1, #41	@ 0x29
 800128e:	4618      	mov	r0, r3
 8001290:	f001 f8ca 	bl	8002428 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2235      	movs	r2, #53	@ 0x35
 80012a4:	212a      	movs	r1, #42	@ 0x2a
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 f8be 	bl	8002428 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	4413      	add	r3, r2
 80012b4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f240 3203 	movw	r2, #771	@ 0x303
 80012be:	2104      	movs	r1, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 f8b1 	bl	8002428 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80012d0:	89fb      	ldrh	r3, [r7, #14]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	22db      	movs	r2, #219	@ 0xdb
 80012d6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 f8a4 	bl	8002428 <CODEC_IO_Write>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f246 3250 	movw	r2, #25424	@ 0x6350
 80012f2:	2102      	movs	r1, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 f897 	bl	8002428 <CODEC_IO_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2202      	movs	r2, #2
 800130a:	f240 6106 	movw	r1, #1542	@ 0x606
 800130e:	4618      	mov	r0, r3
 8001310:	f001 f88a 	bl	8002428 <CODEC_IO_Write>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	4413      	add	r3, r2
 800131c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2202      	movs	r2, #2
 8001324:	f240 6107 	movw	r1, #1543	@ 0x607
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f87d 	bl	8002428 <CODEC_IO_Write>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	220d      	movs	r2, #13
 800133e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f870 	bl	8002428 <CODEC_IO_Write>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	61fb      	str	r3, [r7, #28]
      break;
 8001352:	e0d0      	b.n	80014f6 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 800135c:	2104      	movs	r1, #4
 800135e:	4618      	mov	r0, r3
 8001360:	f001 f862 	bl	8002428 <CODEC_IO_Write>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	4413      	add	r3, r2
 800136c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	22db      	movs	r2, #219	@ 0xdb
 8001374:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f855 	bl	8002428 <CODEC_IO_Write>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f001 f848 	bl	8002428 <CODEC_IO_Write>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2202      	movs	r2, #2
 80013a8:	f240 6106 	movw	r1, #1542	@ 0x606
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f83b 	bl	8002428 <CODEC_IO_Write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2202      	movs	r2, #2
 80013c2:	f240 6107 	movw	r1, #1543	@ 0x607
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 f82e 	bl	8002428 <CODEC_IO_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	220d      	movs	r2, #13
 80013dc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 f821 	bl	8002428 <CODEC_IO_Write>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	61fb      	str	r3, [r7, #28]
      break; 
 80013f0:	e081      	b.n	80014f6 <wm8994_Init+0x702>
 80013f2:	bf00      	nop
 80013f4:	20000078 	.word	0x20000078
 80013f8:	2000007c 	.word	0x2000007c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8001404:	2104      	movs	r1, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f80e 	bl	8002428 <CODEC_IO_Write>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	22db      	movs	r2, #219	@ 0xdb
 800141c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001420:	4618      	mov	r0, r3
 8001422:	f001 f801 	bl	8002428 <CODEC_IO_Write>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4413      	add	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	22db      	movs	r2, #219	@ 0xdb
 8001436:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fff4 	bl	8002428 <CODEC_IO_Write>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4413      	add	r3, r2
 8001448:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8001452:	2102      	movs	r1, #2
 8001454:	4618      	mov	r0, r3
 8001456:	f000 ffe7 	bl	8002428 <CODEC_IO_Write>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2202      	movs	r2, #2
 800146a:	f240 6106 	movw	r1, #1542	@ 0x606
 800146e:	4618      	mov	r0, r3
 8001470:	f000 ffda 	bl	8002428 <CODEC_IO_Write>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2202      	movs	r2, #2
 8001484:	f240 6107 	movw	r1, #1543	@ 0x607
 8001488:	4618      	mov	r0, r3
 800148a:	f000 ffcd 	bl	8002428 <CODEC_IO_Write>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2202      	movs	r2, #2
 800149e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 ffc0 	bl	8002428 <CODEC_IO_Write>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80014b2:	89fb      	ldrh	r3, [r7, #14]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2202      	movs	r2, #2
 80014b8:	f240 6109 	movw	r1, #1545	@ 0x609
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 ffb3 	bl	8002428 <CODEC_IO_Write>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	220d      	movs	r2, #13
 80014d2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 ffa6 	bl	8002428 <CODEC_IO_Write>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	4413      	add	r3, r2
 80014e4:	61fb      	str	r3, [r7, #28]
      break;    
 80014e6:	e006      	b.n	80014f6 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	3301      	adds	r3, #1
 80014ec:	61fb      	str	r3, [r7, #28]
      break;
 80014ee:	e002      	b.n	80014f6 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80014f0:	4ba4      	ldr	r3, [pc, #656]	@ (8001784 <wm8994_Init+0x990>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4aa3      	ldr	r2, [pc, #652]	@ (8001788 <wm8994_Init+0x994>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d079      	beq.n	80015f2 <wm8994_Init+0x7fe>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4aa1      	ldr	r2, [pc, #644]	@ (8001788 <wm8994_Init+0x994>)
 8001502:	4293      	cmp	r3, r2
 8001504:	f200 80ad 	bhi.w	8001662 <wm8994_Init+0x86e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800150e:	4293      	cmp	r3, r2
 8001510:	d061      	beq.n	80015d6 <wm8994_Init+0x7e2>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001518:	4293      	cmp	r3, r2
 800151a:	f200 80a2 	bhi.w	8001662 <wm8994_Init+0x86e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001524:	4293      	cmp	r3, r2
 8001526:	f000 808e 	beq.w	8001646 <wm8994_Init+0x852>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001530:	4293      	cmp	r3, r2
 8001532:	f200 8096 	bhi.w	8001662 <wm8994_Init+0x86e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800153c:	d03d      	beq.n	80015ba <wm8994_Init+0x7c6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001544:	f200 808d 	bhi.w	8001662 <wm8994_Init+0x86e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800154e:	4293      	cmp	r3, r2
 8001550:	d06b      	beq.n	800162a <wm8994_Init+0x836>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001558:	4293      	cmp	r3, r2
 800155a:	f200 8082 	bhi.w	8001662 <wm8994_Init+0x86e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001564:	d01b      	beq.n	800159e <wm8994_Init+0x7aa>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800156c:	d879      	bhi.n	8001662 <wm8994_Init+0x86e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001574:	d005      	beq.n	8001582 <wm8994_Init+0x78e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800157c:	4293      	cmp	r3, r2
 800157e:	d046      	beq.n	800160e <wm8994_Init+0x81a>
 8001580:	e06f      	b.n	8001662 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2203      	movs	r2, #3
 8001588:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800158c:	4618      	mov	r0, r3
 800158e:	f000 ff4b 	bl	8002428 <CODEC_IO_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	61fb      	str	r3, [r7, #28]
    break;
 800159c:	e06f      	b.n	800167e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2233      	movs	r2, #51	@ 0x33
 80015a4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 ff3d 	bl	8002428 <CODEC_IO_Write>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	61fb      	str	r3, [r7, #28]
    break;
 80015b8:	e061      	b.n	800167e <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2263      	movs	r2, #99	@ 0x63
 80015c0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 ff2f 	bl	8002428 <CODEC_IO_Write>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4413      	add	r3, r2
 80015d2:	61fb      	str	r3, [r7, #28]
    break;
 80015d4:	e053      	b.n	800167e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2283      	movs	r2, #131	@ 0x83
 80015dc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 ff21 	bl	8002428 <CODEC_IO_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]
    break;
 80015f0:	e045      	b.n	800167e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	22a3      	movs	r2, #163	@ 0xa3
 80015f8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 ff13 	bl	8002428 <CODEC_IO_Write>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
    break;
 800160c:	e037      	b.n	800167e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2213      	movs	r2, #19
 8001614:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001618:	4618      	mov	r0, r3
 800161a:	f000 ff05 	bl	8002428 <CODEC_IO_Write>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	61fb      	str	r3, [r7, #28]
    break;
 8001628:	e029      	b.n	800167e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2243      	movs	r2, #67	@ 0x43
 8001630:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fef7 	bl	8002428 <CODEC_IO_Write>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
    break;
 8001644:	e01b      	b.n	800167e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2273      	movs	r2, #115	@ 0x73
 800164c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fee9 	bl	8002428 <CODEC_IO_Write>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	61fb      	str	r3, [r7, #28]
    break; 
 8001660:	e00d      	b.n	800167e <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2283      	movs	r2, #131	@ 0x83
 8001668:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fedb 	bl	8002428 <CODEC_IO_Write>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4413      	add	r3, r2
 800167a:	61fb      	str	r3, [r7, #28]
    break; 
 800167c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800167e:	8afb      	ldrh	r3, [r7, #22]
 8001680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001684:	d10e      	bne.n	80016a4 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f244 0218 	movw	r2, #16408	@ 0x4018
 800168e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fec8 	bl	8002428 <CODEC_IO_Write>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	4413      	add	r3, r2
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e00d      	b.n	80016c0 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f244 0210 	movw	r2, #16400	@ 0x4010
 80016ac:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 feb9 	bl	8002428 <CODEC_IO_Write>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	f240 3102 	movw	r1, #770	@ 0x302
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 feac 	bl	8002428 <CODEC_IO_Write>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	220a      	movs	r2, #10
 80016e0:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fe9f 	bl	8002428 <CODEC_IO_Write>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fe92 	bl	8002428 <CODEC_IO_Write>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800170e:	8b3b      	ldrh	r3, [r7, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 817b 	beq.w	8001a0c <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8001716:	8b3b      	ldrh	r3, [r7, #24]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d157      	bne.n	80017cc <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001724:	212d      	movs	r1, #45	@ 0x2d
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fe7e 	bl	8002428 <CODEC_IO_Write>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8001736:	89fb      	ldrh	r3, [r7, #14]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800173e:	212e      	movs	r1, #46	@ 0x2e
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fe71 	bl	8002428 <CODEC_IO_Write>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <wm8994_Init+0x998>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01b      	beq.n	8001790 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8001760:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fe5f 	bl	8002428 <CODEC_IO_Write>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <wm8994_Init+0x998>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800177a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800177e:	f001 f829 	bl	80027d4 <AUDIO_IO_Delay>
 8001782:	e016      	b.n	80017b2 <wm8994_Init+0x9be>
 8001784:	2000007c 	.word	0x2000007c
 8001788:	00017700 	.word	0x00017700
 800178c:	20000030 	.word	0x20000030
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f248 1208 	movw	r2, #33032	@ 0x8108
 8001798:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fe43 	bl	8002428 <CODEC_IO_Write>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80017ac:	2032      	movs	r0, #50	@ 0x32
 80017ae:	f001 f811 	bl	80027d4 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fe33 	bl	8002428 <CODEC_IO_Write>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017d4:	2103      	movs	r1, #3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fe26 	bl	8002428 <CODEC_IO_Write>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2200      	movs	r2, #0
 80017ec:	2122      	movs	r1, #34	@ 0x22
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fe1a 	bl	8002428 <CODEC_IO_Write>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80017fe:	89fb      	ldrh	r3, [r7, #14]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2200      	movs	r2, #0
 8001804:	2123      	movs	r1, #35	@ 0x23
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fe0e 	bl	8002428 <CODEC_IO_Write>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800181e:	2136      	movs	r1, #54	@ 0x36
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fe01 	bl	8002428 <CODEC_IO_Write>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f243 0203 	movw	r2, #12291	@ 0x3003
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fdf4 	bl	8002428 <CODEC_IO_Write>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800184a:	8afb      	ldrh	r3, [r7, #22]
 800184c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001850:	d10d      	bne.n	800186e <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f240 2205 	movw	r2, #517	@ 0x205
 800185a:	2151      	movs	r1, #81	@ 0x51
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fde3 	bl	8002428 <CODEC_IO_Write>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	e00b      	b.n	8001886 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2205      	movs	r2, #5
 8001874:	2151      	movs	r1, #81	@ 0x51
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fdd6 	bl	8002428 <CODEC_IO_Write>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	4413      	add	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001886:	8b7b      	ldrh	r3, [r7, #26]
 8001888:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 800188c:	f043 0303 	orr.w	r3, r3, #3
 8001890:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	8b7a      	ldrh	r2, [r7, #26]
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fdc4 	bl	8002428 <CODEC_IO_Write>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2222      	movs	r2, #34	@ 0x22
 80018b0:	2160      	movs	r1, #96	@ 0x60
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fdb8 	bl	8002428 <CODEC_IO_Write>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80018ca:	214c      	movs	r1, #76	@ 0x4c
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fdab 	bl	8002428 <CODEC_IO_Write>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80018dc:	200f      	movs	r0, #15
 80018de:	f000 ff79 	bl	80027d4 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80018e2:	89fb      	ldrh	r3, [r7, #14]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2201      	movs	r2, #1
 80018e8:	212d      	movs	r1, #45	@ 0x2d
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fd9c 	bl	8002428 <CODEC_IO_Write>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2201      	movs	r2, #1
 8001900:	212e      	movs	r1, #46	@ 0x2e
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fd90 	bl	8002428 <CODEC_IO_Write>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8001912:	89fb      	ldrh	r3, [r7, #14]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800191a:	2103      	movs	r1, #3
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fd83 	bl	8002428 <CODEC_IO_Write>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2233      	movs	r2, #51	@ 0x33
 8001932:	2154      	movs	r1, #84	@ 0x54
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fd77 	bl	8002428 <CODEC_IO_Write>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8001944:	f240 1001 	movw	r0, #257	@ 0x101
 8001948:	f000 ff44 	bl	80027d4 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	22ee      	movs	r2, #238	@ 0xee
 8001952:	2160      	movs	r1, #96	@ 0x60
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fd67 	bl	8002428 <CODEC_IO_Write>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	22c0      	movs	r2, #192	@ 0xc0
 800196a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fd5a 	bl	8002428 <CODEC_IO_Write>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	22c0      	movs	r2, #192	@ 0xc0
 8001984:	f240 6111 	movw	r1, #1553	@ 0x611
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd4d 	bl	8002428 <CODEC_IO_Write>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2210      	movs	r2, #16
 800199e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd40 	bl	8002428 <CODEC_IO_Write>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	22c0      	movs	r2, #192	@ 0xc0
 80019b8:	f240 6112 	movw	r1, #1554	@ 0x612
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fd33 	bl	8002428 <CODEC_IO_Write>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80019cc:	89fb      	ldrh	r3, [r7, #14]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	22c0      	movs	r2, #192	@ 0xc0
 80019d2:	f240 6113 	movw	r1, #1555	@ 0x613
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd26 	bl	8002428 <CODEC_IO_Write>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2210      	movs	r2, #16
 80019ec:	f240 4122 	movw	r1, #1058	@ 0x422
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fd19 	bl	8002428 <CODEC_IO_Write>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001a00:	7afa      	ldrb	r2, [r7, #11]
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f984 	bl	8001d14 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80a6 	beq.w	8001b60 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001a14:	8afb      	ldrh	r3, [r7, #22]
 8001a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a1a:	d003      	beq.n	8001a24 <wm8994_Init+0xc30>
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a22:	d12b      	bne.n	8001a7c <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001a24:	8b7b      	ldrh	r3, [r7, #26]
 8001a26:	f043 0313 	orr.w	r3, r3, #19
 8001a2a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	8b7a      	ldrh	r2, [r7, #26]
 8001a32:	2101      	movs	r1, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fcf7 	bl	8002428 <CODEC_IO_Write>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	4413      	add	r3, r2
 8001a42:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fcea 	bl	8002428 <CODEC_IO_Write>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001a66:	f240 4111 	movw	r1, #1041	@ 0x411
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fcdc 	bl	8002428 <CODEC_IO_Write>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e06b      	b.n	8001b54 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001a7c:	8afb      	ldrh	r3, [r7, #22]
 8001a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a82:	d139      	bne.n	8001af8 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001a84:	8b7b      	ldrh	r3, [r7, #26]
 8001a86:	f043 0313 	orr.w	r3, r3, #19
 8001a8a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	8b7a      	ldrh	r2, [r7, #26]
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fcc7 	bl	8002428 <CODEC_IO_Write>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001aa4:	89fb      	ldrh	r3, [r7, #14]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fcba 	bl	8002428 <CODEC_IO_Write>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001ac6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fcac 	bl	8002428 <CODEC_IO_Write>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001ada:	89fb      	ldrh	r3, [r7, #14]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001ae2:	f240 4111 	movw	r1, #1041	@ 0x411
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fc9e 	bl	8002428 <CODEC_IO_Write>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	e02d      	b.n	8001b54 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001af8:	8afb      	ldrh	r3, [r7, #22]
 8001afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001afe:	d003      	beq.n	8001b08 <wm8994_Init+0xd14>
 8001b00:	8afb      	ldrh	r3, [r7, #22]
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b06:	d125      	bne.n	8001b54 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	220b      	movs	r2, #11
 8001b0e:	2118      	movs	r1, #24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fc89 	bl	8002428 <CODEC_IO_Write>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	220b      	movs	r2, #11
 8001b26:	211a      	movs	r1, #26
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fc7d 	bl	8002428 <CODEC_IO_Write>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001b38:	89fb      	ldrh	r3, [r7, #14]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001b40:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fc6f 	bl	8002428 <CODEC_IO_Write>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001b54:	7afa      	ldrb	r2, [r7, #11]
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f8da 	bl	8001d14 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8001b60:	69fb      	ldr	r3, [r7, #28]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop

08001b6c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001b70:	f000 fdd2 	bl	8002718 <AUDIO_IO_DeInit>
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001b82:	f000 fdbf 	bl	8002704 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fdf5 	bl	800277c <AUDIO_IO_Read>
 8001b92:	4603      	mov	r3, r0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	80fb      	strh	r3, [r7, #6]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f9d1 	bl	8001f5c <wm8994_SetMute>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f9bc 	bl	8001f5c <wm8994_SetMute>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fc17 	bl	8002428 <CODEC_IO_Write>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001c04:	68fb      	ldr	r3, [r7, #12]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f99b 	bl	8001f5c <wm8994_SetMute>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8001c48:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <wm8994_Stop+0xd8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05a      	beq.n	8001d06 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2101      	movs	r1, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f981 	bl	8001f5c <wm8994_SetMute>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d04e      	beq.n	8001d06 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c70:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fbd7 	bl	8002428 <CODEC_IO_Write>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c8c:	f240 4122 	movw	r1, #1058	@ 0x422
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fbc9 	bl	8002428 <CODEC_IO_Write>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	212d      	movs	r1, #45	@ 0x2d
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fbbd 	bl	8002428 <CODEC_IO_Write>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	212e      	movs	r1, #46	@ 0x2e
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fbb1 	bl	8002428 <CODEC_IO_Write>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2105      	movs	r1, #5
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fba5 	bl	8002428 <CODEC_IO_Write>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fb99 	bl	8002428 <CODEC_IO_Write>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <wm8994_Stop+0xd8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000078 	.word	0x20000078

08001d14 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	80fb      	strh	r3, [r7, #6]
 8001d20:	4613      	mov	r3, r2
 8001d22:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001d28:	797b      	ldrb	r3, [r7, #5]
 8001d2a:	2b64      	cmp	r3, #100	@ 0x64
 8001d2c:	d80b      	bhi.n	8001d46 <wm8994_SetVolume+0x32>
 8001d2e:	797a      	ldrb	r2, [r7, #5]
 8001d30:	4613      	mov	r3, r2
 8001d32:	019b      	lsls	r3, r3, #6
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	4a86      	ldr	r2, [pc, #536]	@ (8001f50 <wm8994_SetVolume+0x23c>)
 8001d38:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3c:	1152      	asrs	r2, r2, #5
 8001d3e:	17db      	asrs	r3, r3, #31
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e000      	b.n	8001d48 <wm8994_SetVolume+0x34>
 8001d46:	2364      	movs	r3, #100	@ 0x64
 8001d48:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001d4a:	4b82      	ldr	r3, [pc, #520]	@ (8001f54 <wm8994_SetVolume+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 809b 	beq.w	8001e8a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d58:	d93d      	bls.n	8001dd6 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f8fc 	bl	8001f5c <wm8994_SetMute>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f240 127f 	movw	r2, #383	@ 0x17f
 8001d74:	211c      	movs	r1, #28
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fb56 	bl	8002428 <CODEC_IO_Write>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f240 127f 	movw	r2, #383	@ 0x17f
 8001d8e:	211d      	movs	r1, #29
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fb49 	bl	8002428 <CODEC_IO_Write>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f240 127f 	movw	r2, #383	@ 0x17f
 8001da8:	2126      	movs	r1, #38	@ 0x26
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fb3c 	bl	8002428 <CODEC_IO_Write>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f240 127f 	movw	r2, #383	@ 0x17f
 8001dc2:	2127      	movs	r1, #39	@ 0x27
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fb2f 	bl	8002428 <CODEC_IO_Write>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e059      	b.n	8001e8a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001dd6:	797b      	ldrb	r3, [r7, #5]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	2101      	movs	r1, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f8bb 	bl	8001f5c <wm8994_SetMute>
 8001de6:	4602      	mov	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e04c      	b.n	8001e8a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8b1 	bl	8001f5c <wm8994_SetMute>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	b2d8      	uxtb	r0, r3
 8001e06:	7afb      	ldrb	r3, [r7, #11]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	211c      	movs	r1, #28
 8001e16:	f000 fb07 	bl	8002428 <CODEC_IO_Write>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	b2d8      	uxtb	r0, r3
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	211d      	movs	r1, #29
 8001e38:	f000 faf6 	bl	8002428 <CODEC_IO_Write>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	b2d8      	uxtb	r0, r3
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	2126      	movs	r1, #38	@ 0x26
 8001e5a:	f000 fae5 	bl	8002428 <CODEC_IO_Write>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	b2d8      	uxtb	r0, r3
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2127      	movs	r1, #39	@ 0x27
 8001e7c:	f000 fad4 	bl	8002428 <CODEC_IO_Write>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001e8a:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <wm8994_SetVolume+0x244>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d059      	beq.n	8001f46 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001e92:	797b      	ldrb	r3, [r7, #5]
 8001e94:	2b63      	cmp	r3, #99	@ 0x63
 8001e96:	d80c      	bhi.n	8001eb2 <wm8994_SetVolume+0x19e>
 8001e98:	797a      	ldrb	r2, [r7, #5]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <wm8994_SetVolume+0x23c>)
 8001ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea8:	1152      	asrs	r2, r2, #5
 8001eaa:	17db      	asrs	r3, r3, #31
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	e000      	b.n	8001eb4 <wm8994_SetVolume+0x1a0>
 8001eb2:	23ef      	movs	r3, #239	@ 0xef
 8001eb4:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	b2d8      	uxtb	r0, r3
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ecc:	f000 faac 	bl	8002428 <CODEC_IO_Write>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	b2d8      	uxtb	r0, r3
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	f240 4101 	movw	r1, #1025	@ 0x401
 8001ef0:	f000 fa9a 	bl	8002428 <CODEC_IO_Write>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	b2d8      	uxtb	r0, r3
 8001f02:	7afb      	ldrb	r3, [r7, #11]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f240 4104 	movw	r1, #1028	@ 0x404
 8001f14:	f000 fa88 	bl	8002428 <CODEC_IO_Write>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2d8      	uxtb	r0, r3
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	f240 4105 	movw	r1, #1029	@ 0x405
 8001f38:	f000 fa76 	bl	8002428 <CODEC_IO_Write>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	51eb851f 	.word	0x51eb851f
 8001f54:	20000078 	.word	0x20000078
 8001f58:	2000007c 	.word	0x2000007c

08001f5c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001f6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <wm8994_SetMute+0x98>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d039      	beq.n	8001fe8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d11c      	bne.n	8001fb4 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f82:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fa4e 	bl	8002428 <CODEC_IO_Write>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9e:	f240 4122 	movw	r1, #1058	@ 0x422
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fa40 	bl	8002428 <CODEC_IO_Write>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e019      	b.n	8001fe8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2210      	movs	r2, #16
 8001fba:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fa32 	bl	8002428 <CODEC_IO_Write>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	f240 4122 	movw	r1, #1058	@ 0x422
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fa25 	bl	8002428 <CODEC_IO_Write>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000078 	.word	0x20000078

08001ff8 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	460a      	mov	r2, r1
 8002002:	80fb      	strh	r3, [r7, #6]
 8002004:	4613      	mov	r3, r2
 8002006:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800200c:	797b      	ldrb	r3, [r7, #5]
 800200e:	2b03      	cmp	r3, #3
 8002010:	f000 808c 	beq.w	800212c <wm8994_SetOutputMode+0x134>
 8002014:	2b03      	cmp	r3, #3
 8002016:	f300 80cb 	bgt.w	80021b0 <wm8994_SetOutputMode+0x1b8>
 800201a:	2b01      	cmp	r3, #1
 800201c:	d002      	beq.n	8002024 <wm8994_SetOutputMode+0x2c>
 800201e:	2b02      	cmp	r3, #2
 8002020:	d042      	beq.n	80020a8 <wm8994_SetOutputMode+0xb0>
 8002022:	e0c5      	b.n	80021b0 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800202c:	2105      	movs	r1, #5
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f9fa 	bl	8002428 <CODEC_IO_Write>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2200      	movs	r2, #0
 8002044:	f240 6101 	movw	r1, #1537	@ 0x601
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f9ed 	bl	8002428 <CODEC_IO_Write>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2200      	movs	r2, #0
 800205e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f9e0 	bl	8002428 <CODEC_IO_Write>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2202      	movs	r2, #2
 8002078:	f240 6104 	movw	r1, #1540	@ 0x604
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f9d3 	bl	8002428 <CODEC_IO_Write>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2202      	movs	r2, #2
 8002092:	f240 6105 	movw	r1, #1541	@ 0x605
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f9c6 	bl	8002428 <CODEC_IO_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    break;
 80020a6:	e0c5      	b.n	8002234 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f240 3203 	movw	r2, #771	@ 0x303
 80020b0:	2105      	movs	r1, #5
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f9b8 	bl	8002428 <CODEC_IO_Write>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2201      	movs	r2, #1
 80020c8:	f240 6101 	movw	r1, #1537	@ 0x601
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f9ab 	bl	8002428 <CODEC_IO_Write>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2201      	movs	r2, #1
 80020e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f99e 	bl	8002428 <CODEC_IO_Write>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2200      	movs	r2, #0
 80020fc:	f240 6104 	movw	r1, #1540	@ 0x604
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f991 	bl	8002428 <CODEC_IO_Write>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2200      	movs	r2, #0
 8002116:	f240 6105 	movw	r1, #1541	@ 0x605
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f984 	bl	8002428 <CODEC_IO_Write>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
    break;
 800212a:	e083      	b.n	8002234 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002134:	2105      	movs	r1, #5
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f976 	bl	8002428 <CODEC_IO_Write>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2201      	movs	r2, #1
 800214c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f969 	bl	8002428 <CODEC_IO_Write>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2201      	movs	r2, #1
 8002166:	f240 6102 	movw	r1, #1538	@ 0x602
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f95c 	bl	8002428 <CODEC_IO_Write>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2202      	movs	r2, #2
 8002180:	f240 6104 	movw	r1, #1540	@ 0x604
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f94f 	bl	8002428 <CODEC_IO_Write>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2202      	movs	r2, #2
 800219a:	f240 6105 	movw	r1, #1541	@ 0x605
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f942 	bl	8002428 <CODEC_IO_Write>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
    break;
 80021ae:	e041      	b.n	8002234 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f240 3203 	movw	r2, #771	@ 0x303
 80021b8:	2105      	movs	r1, #5
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f934 	bl	8002428 <CODEC_IO_Write>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2201      	movs	r2, #1
 80021d0:	f240 6101 	movw	r1, #1537	@ 0x601
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f927 	bl	8002428 <CODEC_IO_Write>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2201      	movs	r2, #1
 80021ea:	f240 6102 	movw	r1, #1538	@ 0x602
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f91a 	bl	8002428 <CODEC_IO_Write>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2200      	movs	r2, #0
 8002204:	f240 6104 	movw	r1, #1540	@ 0x604
 8002208:	4618      	mov	r0, r3
 800220a:	f000 f90d 	bl	8002428 <CODEC_IO_Write>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2200      	movs	r2, #0
 800221e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f900 	bl	8002428 <CODEC_IO_Write>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
    break;    
 8002232:	bf00      	nop
  }  
  return counter;
 8002234:	68fb      	ldr	r3, [r7, #12]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4a64      	ldr	r2, [pc, #400]	@ (80023e4 <wm8994_SetFrequency+0x1a4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d079      	beq.n	800234c <wm8994_SetFrequency+0x10c>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4a62      	ldr	r2, [pc, #392]	@ (80023e4 <wm8994_SetFrequency+0x1a4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	f200 80ad 	bhi.w	80023bc <wm8994_SetFrequency+0x17c>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002268:	4293      	cmp	r3, r2
 800226a:	d061      	beq.n	8002330 <wm8994_SetFrequency+0xf0>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002272:	4293      	cmp	r3, r2
 8002274:	f200 80a2 	bhi.w	80023bc <wm8994_SetFrequency+0x17c>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800227e:	4293      	cmp	r3, r2
 8002280:	f000 808e 	beq.w	80023a0 <wm8994_SetFrequency+0x160>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800228a:	4293      	cmp	r3, r2
 800228c:	f200 8096 	bhi.w	80023bc <wm8994_SetFrequency+0x17c>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002296:	d03d      	beq.n	8002314 <wm8994_SetFrequency+0xd4>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800229e:	f200 808d 	bhi.w	80023bc <wm8994_SetFrequency+0x17c>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d06b      	beq.n	8002384 <wm8994_SetFrequency+0x144>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f245 6222 	movw	r2, #22050	@ 0x5622
 80022b2:	4293      	cmp	r3, r2
 80022b4:	f200 8082 	bhi.w	80023bc <wm8994_SetFrequency+0x17c>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80022be:	d01b      	beq.n	80022f8 <wm8994_SetFrequency+0xb8>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80022c6:	d879      	bhi.n	80023bc <wm8994_SetFrequency+0x17c>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80022ce:	d005      	beq.n	80022dc <wm8994_SetFrequency+0x9c>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d046      	beq.n	8002368 <wm8994_SetFrequency+0x128>
 80022da:	e06f      	b.n	80023bc <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2203      	movs	r2, #3
 80022e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f89e 	bl	8002428 <CODEC_IO_Write>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
    break;
 80022f6:	e06f      	b.n	80023d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2233      	movs	r2, #51	@ 0x33
 80022fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f890 	bl	8002428 <CODEC_IO_Write>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
    break;
 8002312:	e061      	b.n	80023d8 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2263      	movs	r2, #99	@ 0x63
 800231a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f882 	bl	8002428 <CODEC_IO_Write>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
    break;
 800232e:	e053      	b.n	80023d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2283      	movs	r2, #131	@ 0x83
 8002336:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f874 	bl	8002428 <CODEC_IO_Write>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
    break;
 800234a:	e045      	b.n	80023d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	22a3      	movs	r2, #163	@ 0xa3
 8002352:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f866 	bl	8002428 <CODEC_IO_Write>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
    break;
 8002366:	e037      	b.n	80023d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2213      	movs	r2, #19
 800236e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f858 	bl	8002428 <CODEC_IO_Write>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
    break;
 8002382:	e029      	b.n	80023d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2243      	movs	r2, #67	@ 0x43
 800238a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f84a 	bl	8002428 <CODEC_IO_Write>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    break;
 800239e:	e01b      	b.n	80023d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2273      	movs	r2, #115	@ 0x73
 80023a6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f83c 	bl	8002428 <CODEC_IO_Write>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
    break; 
 80023ba:	e00d      	b.n	80023d8 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2283      	movs	r2, #131	@ 0x83
 80023c2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f82e 	bl	8002428 <CODEC_IO_Write>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
    break; 
 80023d6:	bf00      	nop
  }
  return counter;
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	00017700 	.word	0x00017700

080023e8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f812 	bl	8002428 <CODEC_IO_Write>
 8002404:	4603      	mov	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <wm8994_Reset+0x38>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <wm8994_Reset+0x3c>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

  return counter;
 8002414:	68fb      	ldr	r3, [r7, #12]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000078 	.word	0x20000078
 8002424:	2000007c 	.word	0x2000007c

08002428 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	460b      	mov	r3, r1
 8002434:	80bb      	strh	r3, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	88b9      	ldrh	r1, [r7, #4]
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f96f 	bl	8002728 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	b2db      	uxtb	r3, r3
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	@ 0x30
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a51      	ldr	r2, [pc, #324]	@ (80025a8 <I2Cx_MspInit+0x150>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d14d      	bne.n	8002504 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002468:	4b50      	ldr	r3, [pc, #320]	@ (80025ac <I2Cx_MspInit+0x154>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	4a4f      	ldr	r2, [pc, #316]	@ (80025ac <I2Cx_MspInit+0x154>)
 800246e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002472:	6313      	str	r3, [r2, #48]	@ 0x30
 8002474:	4b4d      	ldr	r3, [pc, #308]	@ (80025ac <I2Cx_MspInit+0x154>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002484:	2312      	movs	r3, #18
 8002486:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800248c:	2302      	movs	r3, #2
 800248e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002490:	2304      	movs	r3, #4
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4845      	ldr	r0, [pc, #276]	@ (80025b0 <I2Cx_MspInit+0x158>)
 800249c:	f002 f89c 	bl	80045d8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80024a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4619      	mov	r1, r3
 80024ac:	4840      	ldr	r0, [pc, #256]	@ (80025b0 <I2Cx_MspInit+0x158>)
 80024ae:	f002 f893 	bl	80045d8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80024b2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ac <I2Cx_MspInit+0x154>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a3d      	ldr	r2, [pc, #244]	@ (80025ac <I2Cx_MspInit+0x154>)
 80024b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024be:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <I2Cx_MspInit+0x154>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80024ca:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <I2Cx_MspInit+0x154>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a37      	ldr	r2, [pc, #220]	@ (80025ac <I2Cx_MspInit+0x154>)
 80024d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024d4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80024d6:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <I2Cx_MspInit+0x154>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a34      	ldr	r2, [pc, #208]	@ (80025ac <I2Cx_MspInit+0x154>)
 80024dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024e0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	210f      	movs	r1, #15
 80024e6:	2048      	movs	r0, #72	@ 0x48
 80024e8:	f001 fad7 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80024ec:	2048      	movs	r0, #72	@ 0x48
 80024ee:	f001 faf0 	bl	8003ad2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	210f      	movs	r1, #15
 80024f6:	2049      	movs	r0, #73	@ 0x49
 80024f8:	f001 facf 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80024fc:	2049      	movs	r0, #73	@ 0x49
 80024fe:	f001 fae8 	bl	8003ad2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002502:	e04d      	b.n	80025a0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002504:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <I2Cx_MspInit+0x154>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	4a28      	ldr	r2, [pc, #160]	@ (80025ac <I2Cx_MspInit+0x154>)
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002510:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <I2Cx_MspInit+0x154>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800251c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002520:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002522:	2312      	movs	r3, #18
 8002524:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800252a:	2302      	movs	r3, #2
 800252c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800252e:	2304      	movs	r3, #4
 8002530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	481e      	ldr	r0, [pc, #120]	@ (80025b4 <I2Cx_MspInit+0x15c>)
 800253a:	f002 f84d 	bl	80045d8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800253e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	481a      	ldr	r0, [pc, #104]	@ (80025b4 <I2Cx_MspInit+0x15c>)
 800254c:	f002 f844 	bl	80045d8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <I2Cx_MspInit+0x154>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	4a15      	ldr	r2, [pc, #84]	@ (80025ac <I2Cx_MspInit+0x154>)
 8002556:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800255a:	6413      	str	r3, [r2, #64]	@ 0x40
 800255c:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <I2Cx_MspInit+0x154>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <I2Cx_MspInit+0x154>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <I2Cx_MspInit+0x154>)
 800256e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002572:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002574:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <I2Cx_MspInit+0x154>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a0c      	ldr	r2, [pc, #48]	@ (80025ac <I2Cx_MspInit+0x154>)
 800257a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800257e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	210f      	movs	r1, #15
 8002584:	201f      	movs	r0, #31
 8002586:	f001 fa88 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800258a:	201f      	movs	r0, #31
 800258c:	f001 faa1 	bl	8003ad2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	210f      	movs	r1, #15
 8002594:	2020      	movs	r0, #32
 8002596:	f001 fa80 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800259a:	2020      	movs	r0, #32
 800259c:	f001 fa99 	bl	8003ad2 <HAL_NVIC_EnableIRQ>
}
 80025a0:	bf00      	nop
 80025a2:	3730      	adds	r7, #48	@ 0x30
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000080 	.word	0x20000080
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40020400 	.word	0x40020400

080025b8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f002 fde7 	bl	8005194 <HAL_I2C_GetState>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d125      	bne.n	8002618 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <I2Cx_Init+0x68>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d103      	bne.n	80025dc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a13      	ldr	r2, [pc, #76]	@ (8002624 <I2Cx_Init+0x6c>)
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e002      	b.n	80025e2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <I2Cx_Init+0x70>)
 80025e0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a11      	ldr	r2, [pc, #68]	@ (800262c <I2Cx_Init+0x74>)
 80025e6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff23 	bl	8002458 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f002 fab2 	bl	8004b7c <HAL_I2C_Init>
  }
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000080 	.word	0x20000080
 8002624:	40005c00 	.word	0x40005c00
 8002628:	40005400 	.word	0x40005400
 800262c:	40912732 	.word	0x40912732

08002630 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af04      	add	r7, sp, #16
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	72fb      	strb	r3, [r7, #11]
 8002642:	460b      	mov	r3, r1
 8002644:	813b      	strh	r3, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800264e:	7afb      	ldrb	r3, [r7, #11]
 8002650:	b299      	uxth	r1, r3
 8002652:	88f8      	ldrh	r0, [r7, #6]
 8002654:	893a      	ldrh	r2, [r7, #8]
 8002656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4603      	mov	r3, r0
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f002 fc6e 	bl	8004f48 <HAL_I2C_Mem_Read>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	4619      	mov	r1, r3
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f832 	bl	80026e4 <I2Cx_Error>
  }
  return status;    
 8002680:	7dfb      	ldrb	r3, [r7, #23]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b08a      	sub	sp, #40	@ 0x28
 800268e:	af04      	add	r7, sp, #16
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	4608      	mov	r0, r1
 8002694:	4611      	mov	r1, r2
 8002696:	461a      	mov	r2, r3
 8002698:	4603      	mov	r3, r0
 800269a:	72fb      	strb	r3, [r7, #11]
 800269c:	460b      	mov	r3, r1
 800269e:	813b      	strh	r3, [r7, #8]
 80026a0:	4613      	mov	r3, r2
 80026a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026a8:	7afb      	ldrb	r3, [r7, #11]
 80026aa:	b299      	uxth	r1, r3
 80026ac:	88f8      	ldrh	r0, [r7, #6]
 80026ae:	893a      	ldrh	r2, [r7, #8]
 80026b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4603      	mov	r3, r0
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f002 fb1b 	bl	8004cfc <HAL_I2C_Mem_Write>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80026d0:	7afb      	ldrb	r3, [r7, #11]
 80026d2:	4619      	mov	r1, r3
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f805 	bl	80026e4 <I2Cx_Error>
  }
  return status;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f002 fad3 	bl	8004c9c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff5e 	bl	80025b8 <I2Cx_Init>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <AUDIO_IO_Init+0x10>)
 800270a:	f7ff ff55 	bl	80025b8 <I2Cx_Init>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000080 	.word	0x20000080

08002718 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af02      	add	r7, sp, #8
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
 8002732:	460b      	mov	r3, r1
 8002734:	80bb      	strh	r3, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800273e:	89fb      	ldrh	r3, [r7, #14]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	b29b      	uxth	r3, r3
 8002744:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	b21a      	sxth	r2, r3
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	b21b      	sxth	r3, r3
 8002752:	4313      	orrs	r3, r2
 8002754:	b21b      	sxth	r3, r3
 8002756:	b29b      	uxth	r3, r3
 8002758:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800275a:	88ba      	ldrh	r2, [r7, #4]
 800275c:	79f9      	ldrb	r1, [r7, #7]
 800275e:	2302      	movs	r3, #2
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	1cbb      	adds	r3, r7, #2
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2302      	movs	r3, #2
 8002768:	4803      	ldr	r0, [pc, #12]	@ (8002778 <AUDIO_IO_Write+0x50>)
 800276a:	f7ff ff8e 	bl	800268a <I2Cx_WriteMultiple>
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000080 	.word	0x20000080

0800277c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af02      	add	r7, sp, #8
 8002782:	4603      	mov	r3, r0
 8002784:	460a      	mov	r2, r1
 8002786:	71fb      	strb	r3, [r7, #7]
 8002788:	4613      	mov	r3, r2
 800278a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	81bb      	strh	r3, [r7, #12]
 8002790:	2300      	movs	r3, #0
 8002792:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002794:	88ba      	ldrh	r2, [r7, #4]
 8002796:	79f9      	ldrb	r1, [r7, #7]
 8002798:	2302      	movs	r3, #2
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2302      	movs	r3, #2
 80027a4:	480a      	ldr	r0, [pc, #40]	@ (80027d0 <AUDIO_IO_Read+0x54>)
 80027a6:	f7ff ff43 	bl	8002630 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80027aa:	89bb      	ldrh	r3, [r7, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80027b0:	89bb      	ldrh	r3, [r7, #12]
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027bc:	4313      	orrs	r3, r2
 80027be:	b21b      	sxth	r3, r3
 80027c0:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80027c6:	89bb      	ldrh	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000080 	.word	0x20000080

080027d4 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f001 f861 	bl	80038a4 <HAL_Delay>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80027f0:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 80027f2:	2228      	movs	r2, #40	@ 0x28
 80027f4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80027f6:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 80027f8:	2209      	movs	r2, #9
 80027fa:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80027fc:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 80027fe:	2235      	movs	r2, #53	@ 0x35
 8002800:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002802:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002804:	220b      	movs	r2, #11
 8002806:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800280a:	f240 121b 	movw	r2, #283	@ 0x11b
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002810:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002812:	f240 2215 	movw	r2, #533	@ 0x215
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002818:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800281a:	f240 121d 	movw	r2, #285	@ 0x11d
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002822:	f240 2235 	movw	r2, #565	@ 0x235
 8002826:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002828:	2100      	movs	r1, #0
 800282a:	4823      	ldr	r0, [pc, #140]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800282c:	f000 fcb4 	bl	8003198 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002830:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002832:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002836:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002838:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800283a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800283e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002840:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002850:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002858:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002864:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800286a:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002872:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <BSP_LCD_Init+0xd0>)
 8002874:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002876:	4810      	ldr	r0, [pc, #64]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002878:	f003 f874 	bl	8005964 <HAL_LTDC_GetState>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002882:	2100      	movs	r1, #0
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 8002886:	f000 fbad 	bl	8002fe4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800288a:	480b      	ldr	r0, [pc, #44]	@ (80028b8 <BSP_LCD_Init+0xcc>)
 800288c:	f002 ff50 	bl	8005730 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002896:	480a      	ldr	r0, [pc, #40]	@ (80028c0 <BSP_LCD_Init+0xd4>)
 8002898:	f002 f956 	bl	8004b48 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800289c:	2201      	movs	r2, #1
 800289e:	2108      	movs	r1, #8
 80028a0:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <BSP_LCD_Init+0xd8>)
 80028a2:	f002 f951 	bl	8004b48 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80028a6:	f000 fddb 	bl	8003460 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028aa:	4807      	ldr	r0, [pc, #28]	@ (80028c8 <BSP_LCD_Init+0xdc>)
 80028ac:	f000 f8d8 	bl	8002a60 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	200000d0 	.word	0x200000d0
 80028bc:	40016800 	.word	0x40016800
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40022800 	.word	0x40022800
 80028c8:	20000034 	.word	0x20000034

080028cc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <BSP_LCD_GetXSize+0x20>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a06      	ldr	r2, [pc, #24]	@ (80028f0 <BSP_LCD_GetXSize+0x24>)
 80028d6:	2134      	movs	r1, #52	@ 0x34
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3360      	adds	r3, #96	@ 0x60
 80028e0:	681b      	ldr	r3, [r3, #0]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	200001b8 	.word	0x200001b8
 80028f0:	200000d0 	.word	0x200000d0

080028f4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <BSP_LCD_GetYSize+0x20>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <BSP_LCD_GetYSize+0x24>)
 80028fe:	2134      	movs	r1, #52	@ 0x34
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3364      	adds	r3, #100	@ 0x64
 8002908:	681b      	ldr	r3, [r3, #0]
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	200001b8 	.word	0x200001b8
 8002918:	200000d0 	.word	0x200000d0

0800291c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800291c:	b580      	push	{r7, lr}
 800291e:	b090      	sub	sp, #64	@ 0x40
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800292c:	f7ff ffce 	bl	80028cc <BSP_LCD_GetXSize>
 8002930:	4603      	mov	r3, r0
 8002932:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002938:	f7ff ffdc 	bl	80028f4 <BSP_LCD_GetYSize>
 800293c:	4603      	mov	r3, r0
 800293e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8002948:	23ff      	movs	r3, #255	@ 0xff
 800294a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002962:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002966:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002968:	2307      	movs	r3, #7
 800296a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800296c:	f7ff ffae 	bl	80028cc <BSP_LCD_GetXSize>
 8002970:	4603      	mov	r3, r0
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002974:	f7ff ffbe 	bl	80028f4 <BSP_LCD_GetYSize>
 8002978:	4603      	mov	r3, r0
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	4619      	mov	r1, r3
 8002984:	4812      	ldr	r0, [pc, #72]	@ (80029d0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002986:	f002 ffaf 	bl	80058e8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	4911      	ldr	r1, [pc, #68]	@ (80029d4 <BSP_LCD_LayerDefaultInit+0xb8>)
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3304      	adds	r3, #4
 800299a:	f04f 32ff 	mov.w	r2, #4294967295
 800299e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	490c      	ldr	r1, [pc, #48]	@ (80029d4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3308      	adds	r3, #8
 80029b0:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80029b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	4907      	ldr	r1, [pc, #28]	@ (80029d4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80029c6:	601a      	str	r2, [r3, #0]
}
 80029c8:	bf00      	nop
 80029ca:	3740      	adds	r7, #64	@ 0x40
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200000d0 	.word	0x200000d0
 80029d4:	200001bc 	.word	0x200001bc
 80029d8:	20000034 	.word	0x20000034

080029dc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <BSP_LCD_SelectLayer+0x1c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
} 
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200001b8 	.word	0x200001b8

080029fc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a04:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <BSP_LCD_SetTextColor+0x28>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <BSP_LCD_SetTextColor+0x2c>)
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	200001b8 	.word	0x200001b8
 8002a28:	200001bc 	.word	0x200001bc

08002a2c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <BSP_LCD_SetBackColor+0x2c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4908      	ldr	r1, [pc, #32]	@ (8002a5c <BSP_LCD_SetBackColor+0x30>)
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3304      	adds	r3, #4
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	200001b8 	.word	0x200001b8
 8002a5c:	200001bc 	.word	0x200001bc

08002a60 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002a68:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <BSP_LCD_SetFont+0x2c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4908      	ldr	r1, [pc, #32]	@ (8002a90 <BSP_LCD_SetFont+0x30>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3308      	adds	r3, #8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	200001b8 	.word	0x200001b8
 8002a90:	200001bc 	.word	0x200001bc

08002a94 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <BSP_LCD_Clear+0x48>)
 8002a9e:	681c      	ldr	r4, [r3, #0]
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <BSP_LCD_Clear+0x48>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae0 <BSP_LCD_Clear+0x4c>)
 8002aa6:	2134      	movs	r1, #52	@ 0x34
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	335c      	adds	r3, #92	@ 0x5c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461e      	mov	r6, r3
 8002ab4:	f7ff ff0a 	bl	80028cc <BSP_LCD_GetXSize>
 8002ab8:	4605      	mov	r5, r0
 8002aba:	f7ff ff1b 	bl	80028f4 <BSP_LCD_GetYSize>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	462a      	mov	r2, r5
 8002acc:	4631      	mov	r1, r6
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f000 fc36 	bl	8003340 <LL_FillBuffer>
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002adc:	200001b8 	.word	0x200001b8
 8002ae0:	200000d0 	.word	0x200000d0

08002ae4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
 8002aee:	460b      	mov	r3, r1
 8002af0:	80bb      	strh	r3, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002af6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <BSP_LCD_DisplayChar+0x80>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	491b      	ldr	r1, [pc, #108]	@ (8002b68 <BSP_LCD_DisplayChar+0x84>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3308      	adds	r3, #8
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <BSP_LCD_DisplayChar+0x80>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4c14      	ldr	r4, [pc, #80]	@ (8002b68 <BSP_LCD_DisplayChar+0x84>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4423      	add	r3, r4
 8002b22:	3308      	adds	r3, #8
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b28:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <BSP_LCD_DisplayChar+0x80>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4c0d      	ldr	r4, [pc, #52]	@ (8002b68 <BSP_LCD_DisplayChar+0x84>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4423      	add	r3, r4
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	889b      	ldrh	r3, [r3, #4]
 8002b42:	3307      	adds	r3, #7
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da00      	bge.n	8002b4a <BSP_LCD_DisplayChar+0x66>
 8002b48:	3307      	adds	r3, #7
 8002b4a:	10db      	asrs	r3, r3, #3
 8002b4c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b50:	18ca      	adds	r2, r1, r3
 8002b52:	88b9      	ldrh	r1, [r7, #4]
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fb3a 	bl	80031d0 <DrawChar>
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	200001b8 	.word	0x200001b8
 8002b68:	200001bc 	.word	0x200001bc

08002b6c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002b6c:	b5b0      	push	{r4, r5, r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60ba      	str	r2, [r7, #8]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	81fb      	strh	r3, [r7, #14]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	81bb      	strh	r3, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002b82:	2301      	movs	r3, #1
 8002b84:	83fb      	strh	r3, [r7, #30]
 8002b86:	2300      	movs	r3, #0
 8002b88:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002b96:	e002      	b.n	8002b9e <BSP_LCD_DisplayStringAt+0x32>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	617a      	str	r2, [r7, #20]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f6      	bne.n	8002b98 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002baa:	f7ff fe8f 	bl	80028cc <BSP_LCD_GetXSize>
 8002bae:	4601      	mov	r1, r0
 8002bb0:	4b50      	ldr	r3, [pc, #320]	@ (8002cf4 <BSP_LCD_DisplayStringAt+0x188>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4850      	ldr	r0, [pc, #320]	@ (8002cf8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	889b      	ldrh	r3, [r3, #4]
 8002bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bca:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d01c      	beq.n	8002c0c <BSP_LCD_DisplayStringAt+0xa0>
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	dc33      	bgt.n	8002c3e <BSP_LCD_DisplayStringAt+0xd2>
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d002      	beq.n	8002be0 <BSP_LCD_DisplayStringAt+0x74>
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d019      	beq.n	8002c12 <BSP_LCD_DisplayStringAt+0xa6>
 8002bde:	e02e      	b.n	8002c3e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	1ad1      	subs	r1, r2, r3
 8002be6:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <BSP_LCD_DisplayStringAt+0x188>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4843      	ldr	r0, [pc, #268]	@ (8002cf8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4403      	add	r3, r0
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	889b      	ldrh	r3, [r3, #4]
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	89fb      	ldrh	r3, [r7, #14]
 8002c06:	4413      	add	r3, r2
 8002c08:	83fb      	strh	r3, [r7, #30]
      break;
 8002c0a:	e01b      	b.n	8002c44 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	83fb      	strh	r3, [r7, #30]
      break;
 8002c10:	e018      	b.n	8002c44 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	b299      	uxth	r1, r3
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <BSP_LCD_DisplayStringAt+0x188>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4836      	ldr	r0, [pc, #216]	@ (8002cf8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4403      	add	r3, r0
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	889b      	ldrh	r3, [r3, #4]
 8002c30:	fb11 f303 	smulbb	r3, r1, r3
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	89fb      	ldrh	r3, [r7, #14]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	83fb      	strh	r3, [r7, #30]
      break;
 8002c3c:	e002      	b.n	8002c44 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	83fb      	strh	r3, [r7, #30]
      break;
 8002c42:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002c44:	8bfb      	ldrh	r3, [r7, #30]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <BSP_LCD_DisplayStringAt+0xe6>
 8002c4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da1d      	bge.n	8002c8e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c56:	e01a      	b.n	8002c8e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	89b9      	ldrh	r1, [r7, #12]
 8002c5e:	8bfb      	ldrh	r3, [r7, #30]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff3f 	bl	8002ae4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002c66:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <BSP_LCD_DisplayStringAt+0x188>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4923      	ldr	r1, [pc, #140]	@ (8002cf8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3308      	adds	r3, #8
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	889a      	ldrh	r2, [r3, #4]
 8002c7c:	8bfb      	ldrh	r3, [r7, #30]
 8002c7e:	4413      	add	r3, r2
 8002c80:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
    i++;
 8002c88:	8bbb      	ldrh	r3, [r7, #28]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2dc      	uxtb	r4, r3
 8002c9c:	f7ff fe16 	bl	80028cc <BSP_LCD_GetXSize>
 8002ca0:	8bb9      	ldrh	r1, [r7, #28]
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <BSP_LCD_DisplayStringAt+0x188>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4d14      	ldr	r5, [pc, #80]	@ (8002cf8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	442b      	add	r3, r5
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	889b      	ldrh	r3, [r3, #4]
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	1ac3      	subs	r3, r0, r3
 8002cbe:	b299      	uxth	r1, r3
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <BSP_LCD_DisplayStringAt+0x188>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4403      	add	r3, r0
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	889b      	ldrh	r3, [r3, #4]
 8002cd6:	4299      	cmp	r1, r3
 8002cd8:	bf2c      	ite	cs
 8002cda:	2301      	movcs	r3, #1
 8002cdc:	2300      	movcc	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4023      	ands	r3, r4
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1b7      	bne.n	8002c58 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200001b8 	.word	0x200001b8
 8002cf8:	200001bc 	.word	0x200001bc

08002cfc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002cfc:	b5b0      	push	{r4, r5, r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	603a      	str	r2, [r7, #0]
 8002d06:	80fb      	strh	r3, [r7, #6]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <BSP_LCD_DrawPixel+0x88>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	@ (8002d88 <BSP_LCD_DrawPixel+0x8c>)
 8002d12:	2134      	movs	r1, #52	@ 0x34
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3348      	adds	r3, #72	@ 0x48
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d116      	bne.n	8002d50 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002d22:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <BSP_LCD_DrawPixel+0x88>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <BSP_LCD_DrawPixel+0x8c>)
 8002d28:	2134      	movs	r1, #52	@ 0x34
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	335c      	adds	r3, #92	@ 0x5c
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	88bd      	ldrh	r5, [r7, #4]
 8002d36:	f7ff fdc9 	bl	80028cc <BSP_LCD_GetXSize>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	fb03 f205 	mul.w	r2, r3, r5
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	4413      	add	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4423      	add	r3, r4
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002d4e:	e015      	b.n	8002d7c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <BSP_LCD_DrawPixel+0x88>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0c      	ldr	r2, [pc, #48]	@ (8002d88 <BSP_LCD_DrawPixel+0x8c>)
 8002d56:	2134      	movs	r1, #52	@ 0x34
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	335c      	adds	r3, #92	@ 0x5c
 8002d60:	681c      	ldr	r4, [r3, #0]
 8002d62:	88bd      	ldrh	r5, [r7, #4]
 8002d64:	f7ff fdb2 	bl	80028cc <BSP_LCD_GetXSize>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	fb03 f205 	mul.w	r2, r3, r5
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4423      	add	r3, r4
 8002d76:	461a      	mov	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bdb0      	pop	{r4, r5, r7, pc}
 8002d84:	200001b8 	.word	0x200001b8
 8002d88:	200000d0 	.word	0x200000d0

08002d8c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b08b      	sub	sp, #44	@ 0x2c
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	330a      	adds	r3, #10
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	330b      	adds	r3, #11
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	330d      	adds	r3, #13
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	4413      	add	r3, r2
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3312      	adds	r3, #18
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3313      	adds	r3, #19
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3314      	adds	r3, #20
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3315      	adds	r3, #21
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	4413      	add	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3316      	adds	r3, #22
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3317      	adds	r3, #23
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3318      	adds	r3, #24
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	441a      	add	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3319      	adds	r3, #25
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	331c      	adds	r3, #28
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	331d      	adds	r3, #29
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	4413      	add	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002e38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee8 <BSP_LCD_DrawBitmap+0x15c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <BSP_LCD_DrawBitmap+0x160>)
 8002e3e:	2134      	movs	r1, #52	@ 0x34
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	335c      	adds	r3, #92	@ 0x5c
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	f7ff fd3f 	bl	80028cc <BSP_LCD_GetXSize>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	fb03 f202 	mul.w	r2, r3, r2
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4423      	add	r3, r4
 8002e5e:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	3b20      	subs	r3, #32
 8002e64:	2b07      	cmp	r3, #7
 8002e66:	d802      	bhi.n	8002e6e <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	e008      	b.n	8002e80 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	3b10      	subs	r3, #16
 8002e72:	2b07      	cmp	r3, #7
 8002e74:	d802      	bhi.n	8002e7c <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002e76:	2302      	movs	r3, #2
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	e001      	b.n	8002e80 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	08d2      	lsrs	r2, r2, #3
 8002e8e:	fb03 f202 	mul.w	r2, r3, r2
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	4413      	add	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea0:	e018      	b.n	8002ed4 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002ea2:	6a39      	ldr	r1, [r7, #32]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fa95 	bl	80033d8 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002eae:	f7ff fd0d 	bl	80028cc <BSP_LCD_GetXSize>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	4413      	add	r3, r2
 8002eba:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	08db      	lsrs	r3, r3, #3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	425b      	negs	r3, r3
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3e2      	bcc.n	8002ea2 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	372c      	adds	r7, #44	@ 0x2c
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200001b8 	.word	0x200001b8
 8002eec:	200000d0 	.word	0x200000d0

08002ef0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af02      	add	r7, sp, #8
 8002ef8:	4604      	mov	r4, r0
 8002efa:	4608      	mov	r0, r1
 8002efc:	4611      	mov	r1, r2
 8002efe:	461a      	mov	r2, r3
 8002f00:	4623      	mov	r3, r4
 8002f02:	80fb      	strh	r3, [r7, #6]
 8002f04:	4603      	mov	r3, r0
 8002f06:	80bb      	strh	r3, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f14:	4b30      	ldr	r3, [pc, #192]	@ (8002fd8 <BSP_LCD_FillRect+0xe8>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4930      	ldr	r1, [pc, #192]	@ (8002fdc <BSP_LCD_FillRect+0xec>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd68 	bl	80029fc <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <BSP_LCD_FillRect+0xe8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <BSP_LCD_FillRect+0xf0>)
 8002f32:	2134      	movs	r1, #52	@ 0x34
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3348      	adds	r3, #72	@ 0x48
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d114      	bne.n	8002f6c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f42:	4b25      	ldr	r3, [pc, #148]	@ (8002fd8 <BSP_LCD_FillRect+0xe8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a26      	ldr	r2, [pc, #152]	@ (8002fe0 <BSP_LCD_FillRect+0xf0>)
 8002f48:	2134      	movs	r1, #52	@ 0x34
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	335c      	adds	r3, #92	@ 0x5c
 8002f52:	681c      	ldr	r4, [r3, #0]
 8002f54:	f7ff fcba 	bl	80028cc <BSP_LCD_GetXSize>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	88bb      	ldrh	r3, [r7, #4]
 8002f5c:	fb03 f202 	mul.w	r2, r3, r2
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	4413      	add	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4423      	add	r3, r4
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e013      	b.n	8002f94 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <BSP_LCD_FillRect+0xe8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <BSP_LCD_FillRect+0xf0>)
 8002f72:	2134      	movs	r1, #52	@ 0x34
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	335c      	adds	r3, #92	@ 0x5c
 8002f7c:	681c      	ldr	r4, [r3, #0]
 8002f7e:	f7ff fca5 	bl	80028cc <BSP_LCD_GetXSize>
 8002f82:	4602      	mov	r2, r0
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	fb03 f202 	mul.w	r2, r3, r2
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4423      	add	r3, r4
 8002f92:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002f94:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <BSP_LCD_FillRect+0xe8>)
 8002f96:	681c      	ldr	r4, [r3, #0]
 8002f98:	68fd      	ldr	r5, [r7, #12]
 8002f9a:	887e      	ldrh	r6, [r7, #2]
 8002f9c:	f8b7 8000 	ldrh.w	r8, [r7]
 8002fa0:	f7ff fc94 	bl	80028cc <BSP_LCD_GetXSize>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	1ad1      	subs	r1, r2, r3
 8002faa:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <BSP_LCD_FillRect+0xe8>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	480b      	ldr	r0, [pc, #44]	@ (8002fdc <BSP_LCD_FillRect+0xec>)
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4403      	add	r3, r0
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	9100      	str	r1, [sp, #0]
 8002fc0:	4643      	mov	r3, r8
 8002fc2:	4632      	mov	r2, r6
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f000 f9ba 	bl	8003340 <LL_FillBuffer>
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200001b8 	.word	0x200001b8
 8002fdc:	200001bc 	.word	0x200001bc
 8002fe0:	200000d0 	.word	0x200000d0

08002fe4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b090      	sub	sp, #64	@ 0x40
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002fee:	4b64      	ldr	r3, [pc, #400]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	4a63      	ldr	r2, [pc, #396]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8002ff4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ffa:	4b61      	ldr	r3, [pc, #388]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003006:	4b5e      	ldr	r3, [pc, #376]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	4a5d      	ldr	r2, [pc, #372]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 800300c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003010:	6313      	str	r3, [r2, #48]	@ 0x30
 8003012:	4b5b      	ldr	r3, [pc, #364]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800301e:	4b58      	ldr	r3, [pc, #352]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	4a57      	ldr	r2, [pc, #348]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003024:	f043 0310 	orr.w	r3, r3, #16
 8003028:	6313      	str	r3, [r2, #48]	@ 0x30
 800302a:	4b55      	ldr	r3, [pc, #340]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003036:	4b52      	ldr	r3, [pc, #328]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a51      	ldr	r2, [pc, #324]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 800303c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b4f      	ldr	r3, [pc, #316]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800304e:	4b4c      	ldr	r3, [pc, #304]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a4b      	ldr	r2, [pc, #300]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b49      	ldr	r3, [pc, #292]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003066:	4b46      	ldr	r3, [pc, #280]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a45      	ldr	r2, [pc, #276]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 800306c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b43      	ldr	r3, [pc, #268]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800307e:	4b40      	ldr	r3, [pc, #256]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	4a3f      	ldr	r2, [pc, #252]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003084:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003088:	6313      	str	r3, [r2, #48]	@ 0x30
 800308a:	4b3d      	ldr	r3, [pc, #244]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003096:	4b3a      	ldr	r3, [pc, #232]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a39      	ldr	r2, [pc, #228]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80030ae:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	4a33      	ldr	r2, [pc, #204]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 80030b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ba:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <BSP_LCD_MspInit+0x19c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80030c6:	2310      	movs	r3, #16
 80030c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80030d2:	2302      	movs	r3, #2
 80030d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80030d6:	230e      	movs	r3, #14
 80030d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80030da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030de:	4619      	mov	r1, r3
 80030e0:	4828      	ldr	r0, [pc, #160]	@ (8003184 <BSP_LCD_MspInit+0x1a0>)
 80030e2:	f001 fa79 	bl	80045d8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80030e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80030f0:	2309      	movs	r3, #9
 80030f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80030f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030f8:	4619      	mov	r1, r3
 80030fa:	4823      	ldr	r0, [pc, #140]	@ (8003188 <BSP_LCD_MspInit+0x1a4>)
 80030fc:	f001 fa6c 	bl	80045d8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003100:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800310a:	230e      	movs	r3, #14
 800310c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800310e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003112:	4619      	mov	r1, r3
 8003114:	481d      	ldr	r0, [pc, #116]	@ (800318c <BSP_LCD_MspInit+0x1a8>)
 8003116:	f001 fa5f 	bl	80045d8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800311a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003124:	230e      	movs	r3, #14
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800312c:	4619      	mov	r1, r3
 800312e:	4818      	ldr	r0, [pc, #96]	@ (8003190 <BSP_LCD_MspInit+0x1ac>)
 8003130:	f001 fa52 	bl	80045d8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003134:	23f7      	movs	r3, #247	@ 0xf7
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800313c:	230e      	movs	r3, #14
 800313e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003140:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003144:	4619      	mov	r1, r3
 8003146:	4813      	ldr	r0, [pc, #76]	@ (8003194 <BSP_LCD_MspInit+0x1b0>)
 8003148:	f001 fa46 	bl	80045d8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800314c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003152:	2301      	movs	r3, #1
 8003154:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800315a:	4619      	mov	r1, r3
 800315c:	480b      	ldr	r0, [pc, #44]	@ (800318c <BSP_LCD_MspInit+0x1a8>)
 800315e:	f001 fa3b 	bl	80045d8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003162:	2308      	movs	r3, #8
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003166:	2301      	movs	r3, #1
 8003168:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800316a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800316e:	4619      	mov	r1, r3
 8003170:	4808      	ldr	r0, [pc, #32]	@ (8003194 <BSP_LCD_MspInit+0x1b0>)
 8003172:	f001 fa31 	bl	80045d8 <HAL_GPIO_Init>
}
 8003176:	bf00      	nop
 8003178:	3740      	adds	r7, #64	@ 0x40
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40021000 	.word	0x40021000
 8003188:	40021800 	.word	0x40021800
 800318c:	40022000 	.word	0x40022000
 8003190:	40022400 	.word	0x40022400
 8003194:	40022800 	.word	0x40022800

08003198 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031a2:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <BSP_LCD_ClockConfig+0x34>)
 80031a4:	2208      	movs	r2, #8
 80031a6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80031a8:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <BSP_LCD_ClockConfig+0x34>)
 80031aa:	22c0      	movs	r2, #192	@ 0xc0
 80031ac:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80031ae:	4b07      	ldr	r3, [pc, #28]	@ (80031cc <BSP_LCD_ClockConfig+0x34>)
 80031b0:	2205      	movs	r2, #5
 80031b2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80031b4:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <BSP_LCD_ClockConfig+0x34>)
 80031b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80031bc:	4803      	ldr	r0, [pc, #12]	@ (80031cc <BSP_LCD_ClockConfig+0x34>)
 80031be:	f003 fa31 	bl	8006624 <HAL_RCCEx_PeriphCLKConfig>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200001d4 	.word	0x200001d4

080031d0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	603a      	str	r2, [r7, #0]
 80031da:	80fb      	strh	r3, [r7, #6]
 80031dc:	460b      	mov	r3, r1
 80031de:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80031e8:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <DrawChar+0x168>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4953      	ldr	r1, [pc, #332]	@ (800333c <DrawChar+0x16c>)
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3308      	adds	r3, #8
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	88db      	ldrh	r3, [r3, #6]
 80031fe:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003200:	4b4d      	ldr	r3, [pc, #308]	@ (8003338 <DrawChar+0x168>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	494d      	ldr	r1, [pc, #308]	@ (800333c <DrawChar+0x16c>)
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	3308      	adds	r3, #8
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	889b      	ldrh	r3, [r3, #4]
 8003216:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003218:	8a3b      	ldrh	r3, [r7, #16]
 800321a:	3307      	adds	r3, #7
 800321c:	2b00      	cmp	r3, #0
 800321e:	da00      	bge.n	8003222 <DrawChar+0x52>
 8003220:	3307      	adds	r3, #7
 8003222:	10db      	asrs	r3, r3, #3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	b2da      	uxtb	r2, r3
 800322a:	8a3b      	ldrh	r3, [r7, #16]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e076      	b.n	8003326 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003238:	8a3b      	ldrh	r3, [r7, #16]
 800323a:	3307      	adds	r3, #7
 800323c:	2b00      	cmp	r3, #0
 800323e:	da00      	bge.n	8003242 <DrawChar+0x72>
 8003240:	3307      	adds	r3, #7
 8003242:	10db      	asrs	r3, r3, #3
 8003244:	461a      	mov	r2, r3
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4413      	add	r3, r2
 8003250:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003252:	8a3b      	ldrh	r3, [r7, #16]
 8003254:	3307      	adds	r3, #7
 8003256:	2b00      	cmp	r3, #0
 8003258:	da00      	bge.n	800325c <DrawChar+0x8c>
 800325a:	3307      	adds	r3, #7
 800325c:	10db      	asrs	r3, r3, #3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d002      	beq.n	8003268 <DrawChar+0x98>
 8003262:	2b02      	cmp	r3, #2
 8003264:	d004      	beq.n	8003270 <DrawChar+0xa0>
 8003266:	e00c      	b.n	8003282 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	617b      	str	r3, [r7, #20]
      break;
 800326e:	e016      	b.n	800329e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	3201      	adds	r2, #1
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
      break;
 8003280:	e00d      	b.n	800329e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	041a      	lsls	r2, r3, #16
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	4313      	orrs	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	3202      	adds	r2, #2
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
      break;
 800329c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e036      	b.n	8003312 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80032a4:	8a3a      	ldrh	r2, [r7, #16]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad2      	subs	r2, r2, r3
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	4413      	add	r3, r2
 80032ae:	3b01      	subs	r3, #1
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4413      	add	r3, r2
 80032c8:	b298      	uxth	r0, r3
 80032ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <DrawChar+0x168>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	491b      	ldr	r1, [pc, #108]	@ (800333c <DrawChar+0x16c>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	88bb      	ldrh	r3, [r7, #4]
 80032de:	4619      	mov	r1, r3
 80032e0:	f7ff fd0c 	bl	8002cfc <BSP_LCD_DrawPixel>
 80032e4:	e012      	b.n	800330c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4413      	add	r3, r2
 80032ee:	b298      	uxth	r0, r3
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <DrawChar+0x168>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4911      	ldr	r1, [pc, #68]	@ (800333c <DrawChar+0x16c>)
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3304      	adds	r3, #4
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	88bb      	ldrh	r3, [r7, #4]
 8003306:	4619      	mov	r1, r3
 8003308:	f7ff fcf8 	bl	8002cfc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	3301      	adds	r3, #1
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	8a3b      	ldrh	r3, [r7, #16]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	429a      	cmp	r2, r3
 8003318:	d3c4      	bcc.n	80032a4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800331a:	88bb      	ldrh	r3, [r7, #4]
 800331c:	3301      	adds	r3, #1
 800331e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	8a7b      	ldrh	r3, [r7, #18]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	429a      	cmp	r2, r3
 800332c:	d384      	bcc.n	8003238 <DrawChar+0x68>
  }
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200001b8 	.word	0x200001b8
 800333c:	200001bc 	.word	0x200001bc

08003340 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800334e:	4b1e      	ldr	r3, [pc, #120]	@ (80033c8 <LL_FillBuffer+0x88>)
 8003350:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003354:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003356:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <LL_FillBuffer+0x8c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1d      	ldr	r2, [pc, #116]	@ (80033d0 <LL_FillBuffer+0x90>)
 800335c:	2134      	movs	r1, #52	@ 0x34
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3348      	adds	r3, #72	@ 0x48
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d103      	bne.n	8003374 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800336c:	4b16      	ldr	r3, [pc, #88]	@ (80033c8 <LL_FillBuffer+0x88>)
 800336e:	2202      	movs	r2, #2
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	e002      	b.n	800337a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003374:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <LL_FillBuffer+0x88>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800337a:	4a13      	ldr	r2, [pc, #76]	@ (80033c8 <LL_FillBuffer+0x88>)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003380:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <LL_FillBuffer+0x88>)
 8003382:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <LL_FillBuffer+0x94>)
 8003384:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003386:	4810      	ldr	r0, [pc, #64]	@ (80033c8 <LL_FillBuffer+0x88>)
 8003388:	f000 fd7c 	bl	8003e84 <HAL_DMA2D_Init>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d115      	bne.n	80033be <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	480c      	ldr	r0, [pc, #48]	@ (80033c8 <LL_FillBuffer+0x88>)
 8003396:	f000 ffe3 	bl	8004360 <HAL_DMA2D_ConfigLayer>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10e      	bne.n	80033be <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69f9      	ldr	r1, [r7, #28]
 80033aa:	4807      	ldr	r0, [pc, #28]	@ (80033c8 <LL_FillBuffer+0x88>)
 80033ac:	f000 fdb4 	bl	8003f18 <HAL_DMA2D_Start>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80033b6:	210a      	movs	r1, #10
 80033b8:	4803      	ldr	r0, [pc, #12]	@ (80033c8 <LL_FillBuffer+0x88>)
 80033ba:	f000 fdd8 	bl	8003f6e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000178 	.word	0x20000178
 80033cc:	200001b8 	.word	0x200001b8
 80033d0:	200000d0 	.word	0x200000d0
 80033d4:	4002b000 	.word	0x4002b000

080033d8 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80033e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 80033e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033ec:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80033f4:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80033fa:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003400:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 8003402:	22ff      	movs	r2, #255	@ 0xff
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003406:	4a14      	ldr	r2, [pc, #80]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800340c:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003412:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 8003414:	4a11      	ldr	r2, [pc, #68]	@ (800345c <LL_ConvertLineToARGB8888+0x84>)
 8003416:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003418:	480f      	ldr	r0, [pc, #60]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 800341a:	f000 fd33 	bl	8003e84 <HAL_DMA2D_Init>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d115      	bne.n	8003450 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003424:	2101      	movs	r1, #1
 8003426:	480c      	ldr	r0, [pc, #48]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 8003428:	f000 ff9a 	bl	8004360 <HAL_DMA2D_ConfigLayer>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	2301      	movs	r3, #1
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4806      	ldr	r0, [pc, #24]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 800343e:	f000 fd6b 	bl	8003f18 <HAL_DMA2D_Start>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d103      	bne.n	8003450 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003448:	210a      	movs	r1, #10
 800344a:	4803      	ldr	r0, [pc, #12]	@ (8003458 <LL_ConvertLineToARGB8888+0x80>)
 800344c:	f000 fd8f 	bl	8003f6e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000178 	.word	0x20000178
 800345c:	4002b000 	.word	0x4002b000

08003460 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003464:	4b29      	ldr	r3, [pc, #164]	@ (800350c <BSP_SDRAM_Init+0xac>)
 8003466:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <BSP_SDRAM_Init+0xb0>)
 8003468:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800346a:	4b2a      	ldr	r3, [pc, #168]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 800346c:	2202      	movs	r2, #2
 800346e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003470:	4b28      	ldr	r3, [pc, #160]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 8003472:	2207      	movs	r2, #7
 8003474:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003476:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 8003478:	2204      	movs	r2, #4
 800347a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800347c:	4b25      	ldr	r3, [pc, #148]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 800347e:	2207      	movs	r2, #7
 8003480:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003482:	4b24      	ldr	r3, [pc, #144]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 8003484:	2202      	movs	r2, #2
 8003486:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003488:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 800348a:	2202      	movs	r2, #2
 800348c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800348e:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 8003490:	2202      	movs	r2, #2
 8003492:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003494:	4b1d      	ldr	r3, [pc, #116]	@ (800350c <BSP_SDRAM_Init+0xac>)
 8003496:	2200      	movs	r2, #0
 8003498:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800349a:	4b1c      	ldr	r3, [pc, #112]	@ (800350c <BSP_SDRAM_Init+0xac>)
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80034a0:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034a2:	2204      	movs	r2, #4
 80034a4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80034a6:	4b19      	ldr	r3, [pc, #100]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034a8:	2210      	movs	r2, #16
 80034aa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80034ac:	4b17      	ldr	r3, [pc, #92]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034ae:	2240      	movs	r2, #64	@ 0x40
 80034b0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80034b2:	4b16      	ldr	r3, [pc, #88]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034b8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80034ba:	4b14      	ldr	r3, [pc, #80]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034bc:	2200      	movs	r2, #0
 80034be:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80034c0:	4b12      	ldr	r3, [pc, #72]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034c6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80034c8:	4b10      	ldr	r3, [pc, #64]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034ce:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80034d0:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80034d6:	2100      	movs	r1, #0
 80034d8:	480c      	ldr	r0, [pc, #48]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034da:	f000 f87f 	bl	80035dc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80034de:	490d      	ldr	r1, [pc, #52]	@ (8003514 <BSP_SDRAM_Init+0xb4>)
 80034e0:	480a      	ldr	r0, [pc, #40]	@ (800350c <BSP_SDRAM_Init+0xac>)
 80034e2:	f004 f897 	bl	8007614 <HAL_SDRAM_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <BSP_SDRAM_Init+0xb8>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e002      	b.n	80034fa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <BSP_SDRAM_Init+0xb8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80034fa:	f240 6003 	movw	r0, #1539	@ 0x603
 80034fe:	f000 f80d 	bl	800351c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <BSP_SDRAM_Init+0xb8>)
 8003504:	781b      	ldrb	r3, [r3, #0]
}
 8003506:	4618      	mov	r0, r3
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000258 	.word	0x20000258
 8003510:	a0000140 	.word	0xa0000140
 8003514:	2000028c 	.word	0x2000028c
 8003518:	2000004c 	.word	0x2000004c

0800351c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003528:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800352e:	4b29      	ldr	r3, [pc, #164]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003530:	2210      	movs	r2, #16
 8003532:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003534:	4b27      	ldr	r3, [pc, #156]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003536:	2201      	movs	r2, #1
 8003538:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800353a:	4b26      	ldr	r3, [pc, #152]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003544:	4923      	ldr	r1, [pc, #140]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003546:	4824      	ldr	r0, [pc, #144]	@ (80035d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003548:	f004 f898 	bl	800767c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800354c:	2001      	movs	r0, #1
 800354e:	f000 f9a9 	bl	80038a4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003558:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800355a:	2210      	movs	r2, #16
 800355c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800355e:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003560:	2201      	movs	r2, #1
 8003562:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003564:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003566:	2200      	movs	r2, #0
 8003568:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800356a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800356e:	4919      	ldr	r1, [pc, #100]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003570:	4819      	ldr	r0, [pc, #100]	@ (80035d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003572:	f004 f883 	bl	800767c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003576:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003578:	2203      	movs	r2, #3
 800357a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800357c:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800357e:	2210      	movs	r2, #16
 8003580:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003584:	2208      	movs	r2, #8
 8003586:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003588:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800358e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003592:	4910      	ldr	r1, [pc, #64]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003594:	4810      	ldr	r0, [pc, #64]	@ (80035d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003596:	f004 f871 	bl	800767c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800359a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800359e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035a2:	2204      	movs	r2, #4
 80035a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035a8:	2210      	movs	r2, #16
 80035aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a07      	ldr	r2, [pc, #28]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80035b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035bc:	4905      	ldr	r1, [pc, #20]	@ (80035d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035be:	4806      	ldr	r0, [pc, #24]	@ (80035d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035c0:	f004 f85c 	bl	800767c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4804      	ldr	r0, [pc, #16]	@ (80035d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035c8:	f004 f883 	bl	80076d2 <HAL_SDRAM_ProgramRefreshRate>
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200002a8 	.word	0x200002a8
 80035d8:	20000258 	.word	0x20000258

080035dc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80035dc:	b580      	push	{r7, lr}
 80035de:	b090      	sub	sp, #64	@ 0x40
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80035e6:	4b70      	ldr	r3, [pc, #448]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 80035e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ea:	4a6f      	ldr	r2, [pc, #444]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80035f2:	4b6d      	ldr	r3, [pc, #436]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80035fe:	4b6a      	ldr	r3, [pc, #424]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	4a69      	ldr	r2, [pc, #420]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003604:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003608:	6313      	str	r3, [r2, #48]	@ 0x30
 800360a:	4b67      	ldr	r3, [pc, #412]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003616:	4b64      	ldr	r3, [pc, #400]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	4a63      	ldr	r2, [pc, #396]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6313      	str	r3, [r2, #48]	@ 0x30
 8003622:	4b61      	ldr	r3, [pc, #388]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800362e:	4b5e      	ldr	r3, [pc, #376]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	4a5d      	ldr	r2, [pc, #372]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	6313      	str	r3, [r2, #48]	@ 0x30
 800363a:	4b5b      	ldr	r3, [pc, #364]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	4b58      	ldr	r3, [pc, #352]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	4a57      	ldr	r2, [pc, #348]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	6313      	str	r3, [r2, #48]	@ 0x30
 8003652:	4b55      	ldr	r3, [pc, #340]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800365e:	4b52      	ldr	r3, [pc, #328]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	4a51      	ldr	r2, [pc, #324]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003664:	f043 0320 	orr.w	r3, r3, #32
 8003668:	6313      	str	r3, [r2, #48]	@ 0x30
 800366a:	4b4f      	ldr	r3, [pc, #316]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003676:	4b4c      	ldr	r3, [pc, #304]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	4a4b      	ldr	r2, [pc, #300]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 800367c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003680:	6313      	str	r3, [r2, #48]	@ 0x30
 8003682:	4b49      	ldr	r3, [pc, #292]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800368e:	4b46      	ldr	r3, [pc, #280]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	4a45      	ldr	r2, [pc, #276]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003698:	6313      	str	r3, [r2, #48]	@ 0x30
 800369a:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <BSP_SDRAM_MspInit+0x1cc>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80036ae:	2302      	movs	r3, #2
 80036b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80036b2:	230c      	movs	r3, #12
 80036b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80036b6:	2308      	movs	r3, #8
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80036ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036be:	4619      	mov	r1, r3
 80036c0:	483a      	ldr	r0, [pc, #232]	@ (80037ac <BSP_SDRAM_MspInit+0x1d0>)
 80036c2:	f000 ff89 	bl	80045d8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80036c6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80036cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d0:	4619      	mov	r1, r3
 80036d2:	4837      	ldr	r0, [pc, #220]	@ (80037b0 <BSP_SDRAM_MspInit+0x1d4>)
 80036d4:	f000 ff80 	bl	80045d8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80036d8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80036de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036e2:	4619      	mov	r1, r3
 80036e4:	4833      	ldr	r0, [pc, #204]	@ (80037b4 <BSP_SDRAM_MspInit+0x1d8>)
 80036e6:	f000 ff77 	bl	80045d8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80036ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80036ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80036f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036f4:	4619      	mov	r1, r3
 80036f6:	4830      	ldr	r0, [pc, #192]	@ (80037b8 <BSP_SDRAM_MspInit+0x1dc>)
 80036f8:	f000 ff6e 	bl	80045d8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80036fc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003702:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003706:	4619      	mov	r1, r3
 8003708:	482c      	ldr	r0, [pc, #176]	@ (80037bc <BSP_SDRAM_MspInit+0x1e0>)
 800370a:	f000 ff65 	bl	80045d8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800370e:	2328      	movs	r3, #40	@ 0x28
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003716:	4619      	mov	r1, r3
 8003718:	4829      	ldr	r0, [pc, #164]	@ (80037c0 <BSP_SDRAM_MspInit+0x1e4>)
 800371a:	f000 ff5d 	bl	80045d8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800371e:	4b29      	ldr	r3, [pc, #164]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003724:	4b27      	ldr	r3, [pc, #156]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003726:	2280      	movs	r2, #128	@ 0x80
 8003728:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800372a:	4b26      	ldr	r3, [pc, #152]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800372c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003730:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003738:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800373a:	4b22      	ldr	r3, [pc, #136]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800373c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003740:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003744:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003748:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800374a:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800374c:	2200      	movs	r2, #0
 800374e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003750:	4b1c      	ldr	r3, [pc, #112]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003752:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003756:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003758:	4b1a      	ldr	r3, [pc, #104]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800375a:	2200      	movs	r2, #0
 800375c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800375e:	4b19      	ldr	r3, [pc, #100]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003760:	2203      	movs	r2, #3
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003764:	4b17      	ldr	r3, [pc, #92]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003766:	2200      	movs	r2, #0
 8003768:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800376a:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003770:	4b14      	ldr	r3, [pc, #80]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003772:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <BSP_SDRAM_MspInit+0x1ec>)
 8003774:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a12      	ldr	r2, [pc, #72]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30
 800377c:	4a11      	ldr	r2, [pc, #68]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003782:	4810      	ldr	r0, [pc, #64]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003784:	f000 fa6e 	bl	8003c64 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003788:	480e      	ldr	r0, [pc, #56]	@ (80037c4 <BSP_SDRAM_MspInit+0x1e8>)
 800378a:	f000 f9bd 	bl	8003b08 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	210f      	movs	r1, #15
 8003792:	2038      	movs	r0, #56	@ 0x38
 8003794:	f000 f981 	bl	8003a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003798:	2038      	movs	r0, #56	@ 0x38
 800379a:	f000 f99a 	bl	8003ad2 <HAL_NVIC_EnableIRQ>
}
 800379e:	bf00      	nop
 80037a0:	3740      	adds	r7, #64	@ 0x40
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020800 	.word	0x40020800
 80037b0:	40020c00 	.word	0x40020c00
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40021400 	.word	0x40021400
 80037bc:	40021800 	.word	0x40021800
 80037c0:	40021c00 	.word	0x40021c00
 80037c4:	200002b8 	.word	0x200002b8
 80037c8:	40026410 	.word	0x40026410

080037cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <HAL_Init+0x34>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003800 <HAL_Init+0x34>)
 80037d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037da:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_Init+0x34>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a07      	ldr	r2, [pc, #28]	@ (8003800 <HAL_Init+0x34>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 f94b 	bl	8003a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ee:	200f      	movs	r0, #15
 80037f0:	f000 f808 	bl	8003804 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f006 fe72 	bl	800a4dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00

08003804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800380c:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <HAL_InitTick+0x54>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_InitTick+0x58>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800381a:	fbb3 f3f1 	udiv	r3, r3, r1
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f963 	bl	8003aee <HAL_SYSTICK_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e00e      	b.n	8003850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d80a      	bhi.n	800384e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003838:	2200      	movs	r2, #0
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	f000 f92b 	bl	8003a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003844:	4a06      	ldr	r2, [pc, #24]	@ (8003860 <HAL_InitTick+0x5c>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000058 	.word	0x20000058
 800385c:	20000054 	.word	0x20000054
 8003860:	20000050 	.word	0x20000050

08003864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003868:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <HAL_IncTick+0x20>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_IncTick+0x24>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4413      	add	r3, r2
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <HAL_IncTick+0x24>)
 8003876:	6013      	str	r3, [r2, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000054 	.word	0x20000054
 8003888:	20000318 	.word	0x20000318

0800388c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return uwTick;
 8003890:	4b03      	ldr	r3, [pc, #12]	@ (80038a0 <HAL_GetTick+0x14>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000318 	.word	0x20000318

080038a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff ffee 	bl	800388c <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d005      	beq.n	80038ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038be:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <HAL_Delay+0x44>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ca:	bf00      	nop
 80038cc:	f7ff ffde 	bl	800388c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f7      	bhi.n	80038cc <HAL_Delay+0x28>
  {
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000054 	.word	0x20000054

080038ec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <NVIC_SetPriorityGrouping+0x40>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003908:	4013      	ands	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003914:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <NVIC_SetPriorityGrouping+0x44>)
 8003916:	4313      	orrs	r3, r2
 8003918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391a:	4a04      	ldr	r2, [pc, #16]	@ (800392c <NVIC_SetPriorityGrouping+0x40>)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	60d3      	str	r3, [r2, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00
 8003930:	05fa0000 	.word	0x05fa0000

08003934 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003938:	4b04      	ldr	r3, [pc, #16]	@ (800394c <NVIC_GetPriorityGrouping+0x18>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 0307 	and.w	r3, r3, #7
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4907      	ldr	r1, [pc, #28]	@ (8003980 <NVIC_EnableIRQ+0x30>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e100 	.word	0xe000e100

08003984 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	da0b      	bge.n	80039b0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	@ (80039d0 <NVIC_SetPriority+0x4c>)
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	3b04      	subs	r3, #4
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	440b      	add	r3, r1
 80039ac:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ae:	e009      	b.n	80039c4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4907      	ldr	r1, [pc, #28]	@ (80039d4 <NVIC_SetPriority+0x50>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	@ 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f1c3 0307 	rsb	r3, r3, #7
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	bf28      	it	cs
 80039f6:	2304      	movcs	r3, #4
 80039f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d902      	bls.n	8003a08 <NVIC_EncodePriority+0x30>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	e000      	b.n	8003a0a <NVIC_EncodePriority+0x32>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	4313      	orrs	r3, r2
         );
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	@ 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a50:	d301      	bcc.n	8003a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00f      	b.n	8003a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a56:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <SysTick_Config+0x40>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5e:	210f      	movs	r1, #15
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	f7ff ff8e 	bl	8003984 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <SysTick_Config+0x40>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6e:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <SysTick_Config+0x40>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	e000e010 	.word	0xe000e010

08003a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff2d 	bl	80038ec <NVIC_SetPriorityGrouping>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aac:	f7ff ff42 	bl	8003934 <NVIC_GetPriorityGrouping>
 8003ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	6978      	ldr	r0, [r7, #20]
 8003ab8:	f7ff ff8e 	bl	80039d8 <NVIC_EncodePriority>
 8003abc:	4602      	mov	r2, r0
 8003abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff5d 	bl	8003984 <NVIC_SetPriority>
}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff35 	bl	8003950 <NVIC_EnableIRQ>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ffa2 	bl	8003a40 <SysTick_Config>
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b14:	f7ff feba 	bl	800388c <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e099      	b.n	8003c58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b44:	e00f      	b.n	8003b66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b46:	f7ff fea1 	bl	800388c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d908      	bls.n	8003b66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e078      	b.n	8003c58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e8      	bne.n	8003b46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4b38      	ldr	r3, [pc, #224]	@ (8003c60 <HAL_DMA_Init+0x158>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d107      	bne.n	8003bd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d117      	bne.n	8003c2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8bd 	bl	8003d8c <DMA_CheckFifoParam>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c26:	2301      	movs	r3, #1
 8003c28:	e016      	b.n	8003c58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f874 	bl	8003d20 <DMA_CalcBaseAndBitshift>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c40:	223f      	movs	r2, #63	@ 0x3f
 8003c42:	409a      	lsls	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	f010803f 	.word	0xf010803f

08003c64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e050      	b.n	8003d18 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e048      	b.n	8003d18 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2221      	movs	r2, #33	@ 0x21
 8003cc4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f82a 	bl	8003d20 <DMA_CalcBaseAndBitshift>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	223f      	movs	r2, #63	@ 0x3f
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	3b10      	subs	r3, #16
 8003d30:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x60>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d3a:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x64>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d908      	bls.n	8003d60 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x68>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d5e:	e006      	b.n	8003d6e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x68>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	aaaaaaab 	.word	0xaaaaaaab
 8003d84:	0800eacc 	.word	0x0800eacc
 8003d88:	fffffc00 	.word	0xfffffc00

08003d8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11f      	bne.n	8003de6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d856      	bhi.n	8003e5a <DMA_CheckFifoParam+0xce>
 8003dac:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <DMA_CheckFifoParam+0x28>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd7 	.word	0x08003dd7
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003e5b 	.word	0x08003e5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d046      	beq.n	8003e5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd4:	e043      	b.n	8003e5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dde:	d140      	bne.n	8003e62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de4:	e03d      	b.n	8003e62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dee:	d121      	bne.n	8003e34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d837      	bhi.n	8003e66 <DMA_CheckFifoParam+0xda>
 8003df6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dfc <DMA_CheckFifoParam+0x70>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e13 	.word	0x08003e13
 8003e04:	08003e0d 	.word	0x08003e0d
 8003e08:	08003e25 	.word	0x08003e25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e030      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d025      	beq.n	8003e6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e22:	e022      	b.n	8003e6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e2c:	d11f      	bne.n	8003e6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e32:	e01c      	b.n	8003e6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d903      	bls.n	8003e42 <DMA_CheckFifoParam+0xb6>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d003      	beq.n	8003e48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e40:	e018      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
      break;
 8003e46:	e015      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e00b      	b.n	8003e72 <DMA_CheckFifoParam+0xe6>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e00a      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e008      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
 8003e64:	e006      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e004      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
    }
  } 
  
  return status; 
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop

08003e84 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e039      	b.n	8003f0a <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f006 fb3a 	bl	800a524 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed4:	f023 0107 	bic.w	r1, r3, #7
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <HAL_DMA2D_Init+0x90>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68d1      	ldr	r1, [r2, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	6413      	str	r3, [r2, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	ffffc000 	.word	0xffffc000

08003f18 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA2D_Start+0x1c>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e018      	b.n	8003f66 <HAL_DMA2D_Start+0x4e>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fa9c 	bl	800448c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d056      	beq.n	800403c <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003f8e:	f7ff fc7d 	bl	800388c <HAL_GetTick>
 8003f92:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8003f94:	e04b      	b.n	800402e <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d023      	beq.n	8003ff0 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	f043 0202 	orr.w	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2221      	movs	r2, #33	@ 0x21
 8003fda:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0a2      	b.n	8004136 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d01a      	beq.n	800402e <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_DMA2D_PollForTransfer+0xa0>
 8003ffe:	f7ff fc45 	bl	800388c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d20f      	bcs.n	800402e <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2203      	movs	r2, #3
 800401e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
           
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e083      	b.n	8004136 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ac      	beq.n	8003f96 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8004054:	2b00      	cmp	r3, #0
 8004056:	d061      	beq.n	800411c <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004058:	f7ff fc18 	bl	800388c <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800405e:	e056      	b.n	800410e <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02e      	beq.n	80040d0 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	63da      	str	r2, [r3, #60]	@ 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004096:	f043 0202 	orr.w	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2229      	movs	r2, #41	@ 0x29
 80040ba:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2204      	movs	r2, #4
 80040c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          
        return HAL_ERROR;      
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d01a      	beq.n	800410e <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_DMA2D_PollForTransfer+0x180>
 80040de:	f7ff fbd5 	bl	800388c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d20f      	bcs.n	800410e <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e013      	b.n	8004136 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0a1      	beq.n	8004060 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2212      	movs	r2, #18
 8004122:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.  
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]
        
  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d026      	beq.n	80041ae <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)    
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d021      	beq.n	80041ae <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004178:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2204      	movs	r2, #4
 8004192:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d026      	beq.n	8004206 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)    
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d021      	beq.n	8004206 <HAL_DMA2D_IRQHandler+0xc8>
    {  
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041d0:	601a      	str	r2, [r3, #0]
  
      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2220      	movs	r2, #32
 80041d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041de:	f043 0202 	orr.w	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2204      	movs	r2, #4
 80041ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d026      	beq.n	800425e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004216:	2b00      	cmp	r3, #0
 8004218:	d021      	beq.n	800425e <HAL_DMA2D_IRQHandler+0x120>
    {    
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004228:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2208      	movs	r2, #8
 8004230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004236:	f043 0204 	orr.w	r2, r3, #4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2204      	movs	r2, #4
 8004242:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
      }
    }
  }  
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <HAL_DMA2D_IRQHandler+0x152>
    {    
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004280:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer watermark flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2204      	movs	r2, #4
 8004288:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f853 	bl	8004336 <HAL_DMA2D_LineEventCallback>
    }
  }  
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d024      	beq.n	80042e4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)    
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01f      	beq.n	80042e4 <HAL_DMA2D_IRQHandler+0x1a6>
    {   
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042b2:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2202      	movs	r2, #2
 80042ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
      }         
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01f      	beq.n	800432e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01a      	beq.n	800432e <HAL_DMA2D_IRQHandler+0x1f0>
    {    
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004306:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2210      	movs	r2, #16
 800430e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f80e 	bl	800434a <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }  
  
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
} 
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	3318      	adds	r3, #24
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_DMA2D_ConfigLayer+0x34>
 8004390:	2302      	movs	r3, #2
 8004392:	e073      	b.n	800447c <HAL_DMA2D_ConfigLayer+0x11c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80043b2:	4b35      	ldr	r3, [pc, #212]	@ (8004488 <HAL_DMA2D_ConfigLayer+0x128>)
 80043b4:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b0a      	cmp	r3, #10
 80043bc:	d003      	beq.n	80043c6 <HAL_DMA2D_ConfigLayer+0x66>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b09      	cmp	r3, #9
 80043c4:	d107      	bne.n	80043d6 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e005      	b.n	80043e2 <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d120      	bne.n	800442a <HAL_DMA2D_ConfigLayer+0xca>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	ea02 0103 	and.w	r1, r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b0a      	cmp	r3, #10
 8004410:	d003      	beq.n	800441a <HAL_DMA2D_ConfigLayer+0xba>
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b09      	cmp	r3, #9
 8004418:	d127      	bne.n	800446a <HAL_DMA2D_ConfigLayer+0x10a>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28
 8004428:	e01f      	b.n	800446a <HAL_DMA2D_ConfigLayer+0x10a>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	43db      	mvns	r3, r3
 8004434:	ea02 0103 	and.w	r1, r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	430a      	orrs	r2, r1
 8004440:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b0a      	cmp	r3, #10
 8004452:	d003      	beq.n	800445c <HAL_DMA2D_ConfigLayer+0xfc>
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b09      	cmp	r3, #9
 800445a:	d106      	bne.n	800446a <HAL_DMA2D_ConfigLayer+0x10a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004468:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	ff03000f 	.word	0xff03000f

0800448c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 800448c:	b480      	push	{r7}
 800448e:	b08b      	sub	sp, #44	@ 0x2c
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp1 = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	431a      	orrs	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044d8:	d174      	bne.n	80045c4 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80044e0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80044e8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80044f0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d108      	bne.n	8004512 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	431a      	orrs	r2, r3
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	4313      	orrs	r3, r2
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004510:	e053      	b.n	80045ba <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d106      	bne.n	8004528 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4313      	orrs	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
 8004526:	e048      	b.n	80045ba <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d111      	bne.n	8004554 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	0cdb      	lsrs	r3, r3, #19
 8004534:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	0a9b      	lsrs	r3, r3, #10
 800453a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	08db      	lsrs	r3, r3, #3
 8004540:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	02db      	lsls	r3, r3, #11
 800454a:	4313      	orrs	r3, r2
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
 8004552:	e032      	b.n	80045ba <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d117      	bne.n	800458c <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	0fdb      	lsrs	r3, r3, #31
 8004560:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	0cdb      	lsrs	r3, r3, #19
 8004566:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	0adb      	lsrs	r3, r3, #11
 800456c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	431a      	orrs	r2, r3
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	03db      	lsls	r3, r3, #15
 8004582:	4313      	orrs	r3, r2
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
 800458a:	e016      	b.n	80045ba <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	0f1b      	lsrs	r3, r3, #28
 8004590:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	0d1b      	lsrs	r3, r3, #20
 8004596:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	0b1b      	lsrs	r3, r3, #12
 800459c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	011a      	lsls	r2, r3, #4
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	431a      	orrs	r2, r3
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	031b      	lsls	r3, r3, #12
 80045b2:	4313      	orrs	r3, r2
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80045c2:	e003      	b.n	80045cc <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	60da      	str	r2, [r3, #12]
}
 80045cc:	bf00      	nop
 80045ce:	372c      	adds	r7, #44	@ 0x2c
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	@ 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	e175      	b.n	80048e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045f8:	2201      	movs	r2, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	f040 8164 	bne.w	80048de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x4e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b12      	cmp	r3, #18
 8004624:	d123      	bne.n	800466e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	220f      	movs	r2, #15
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	08da      	lsrs	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3208      	adds	r2, #8
 8004668:	69b9      	ldr	r1, [r7, #24]
 800466a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	2203      	movs	r2, #3
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0203 	and.w	r2, r3, #3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d00b      	beq.n	80046c2 <HAL_GPIO_Init+0xea>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d007      	beq.n	80046c2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046b6:	2b11      	cmp	r3, #17
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b12      	cmp	r3, #18
 80046c0:	d130      	bne.n	8004724 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	2203      	movs	r2, #3
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f8:	2201      	movs	r2, #1
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 0201 	and.w	r2, r3, #1
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80be 	beq.w	80048de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004762:	4b66      	ldr	r3, [pc, #408]	@ (80048fc <HAL_GPIO_Init+0x324>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	4a65      	ldr	r2, [pc, #404]	@ (80048fc <HAL_GPIO_Init+0x324>)
 8004768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800476c:	6453      	str	r3, [r2, #68]	@ 0x44
 800476e:	4b63      	ldr	r3, [pc, #396]	@ (80048fc <HAL_GPIO_Init+0x324>)
 8004770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800477a:	4a61      	ldr	r2, [pc, #388]	@ (8004900 <HAL_GPIO_Init+0x328>)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	3302      	adds	r3, #2
 8004782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a58      	ldr	r2, [pc, #352]	@ (8004904 <HAL_GPIO_Init+0x32c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d037      	beq.n	8004816 <HAL_GPIO_Init+0x23e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a57      	ldr	r2, [pc, #348]	@ (8004908 <HAL_GPIO_Init+0x330>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d031      	beq.n	8004812 <HAL_GPIO_Init+0x23a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a56      	ldr	r2, [pc, #344]	@ (800490c <HAL_GPIO_Init+0x334>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02b      	beq.n	800480e <HAL_GPIO_Init+0x236>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a55      	ldr	r2, [pc, #340]	@ (8004910 <HAL_GPIO_Init+0x338>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d025      	beq.n	800480a <HAL_GPIO_Init+0x232>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a54      	ldr	r2, [pc, #336]	@ (8004914 <HAL_GPIO_Init+0x33c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <HAL_GPIO_Init+0x22e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a53      	ldr	r2, [pc, #332]	@ (8004918 <HAL_GPIO_Init+0x340>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d019      	beq.n	8004802 <HAL_GPIO_Init+0x22a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a52      	ldr	r2, [pc, #328]	@ (800491c <HAL_GPIO_Init+0x344>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_GPIO_Init+0x226>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a51      	ldr	r2, [pc, #324]	@ (8004920 <HAL_GPIO_Init+0x348>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00d      	beq.n	80047fa <HAL_GPIO_Init+0x222>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a50      	ldr	r2, [pc, #320]	@ (8004924 <HAL_GPIO_Init+0x34c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <HAL_GPIO_Init+0x21e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004928 <HAL_GPIO_Init+0x350>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <HAL_GPIO_Init+0x21a>
 80047ee:	2309      	movs	r3, #9
 80047f0:	e012      	b.n	8004818 <HAL_GPIO_Init+0x240>
 80047f2:	230a      	movs	r3, #10
 80047f4:	e010      	b.n	8004818 <HAL_GPIO_Init+0x240>
 80047f6:	2308      	movs	r3, #8
 80047f8:	e00e      	b.n	8004818 <HAL_GPIO_Init+0x240>
 80047fa:	2307      	movs	r3, #7
 80047fc:	e00c      	b.n	8004818 <HAL_GPIO_Init+0x240>
 80047fe:	2306      	movs	r3, #6
 8004800:	e00a      	b.n	8004818 <HAL_GPIO_Init+0x240>
 8004802:	2305      	movs	r3, #5
 8004804:	e008      	b.n	8004818 <HAL_GPIO_Init+0x240>
 8004806:	2304      	movs	r3, #4
 8004808:	e006      	b.n	8004818 <HAL_GPIO_Init+0x240>
 800480a:	2303      	movs	r3, #3
 800480c:	e004      	b.n	8004818 <HAL_GPIO_Init+0x240>
 800480e:	2302      	movs	r3, #2
 8004810:	e002      	b.n	8004818 <HAL_GPIO_Init+0x240>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_GPIO_Init+0x240>
 8004816:	2300      	movs	r3, #0
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	f002 0203 	and.w	r2, r2, #3
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	4093      	lsls	r3, r2
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004828:	4935      	ldr	r1, [pc, #212]	@ (8004900 <HAL_GPIO_Init+0x328>)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	3302      	adds	r3, #2
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004836:	4b3d      	ldr	r3, [pc, #244]	@ (800492c <HAL_GPIO_Init+0x354>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800485a:	4a34      	ldr	r2, [pc, #208]	@ (800492c <HAL_GPIO_Init+0x354>)
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004860:	4b32      	ldr	r3, [pc, #200]	@ (800492c <HAL_GPIO_Init+0x354>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004884:	4a29      	ldr	r2, [pc, #164]	@ (800492c <HAL_GPIO_Init+0x354>)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488a:	4b28      	ldr	r3, [pc, #160]	@ (800492c <HAL_GPIO_Init+0x354>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ae:	4a1f      	ldr	r2, [pc, #124]	@ (800492c <HAL_GPIO_Init+0x354>)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048b4:	4b1d      	ldr	r3, [pc, #116]	@ (800492c <HAL_GPIO_Init+0x354>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048d8:	4a14      	ldr	r2, [pc, #80]	@ (800492c <HAL_GPIO_Init+0x354>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b0f      	cmp	r3, #15
 80048e8:	f67f ae86 	bls.w	80045f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	3724      	adds	r7, #36	@ 0x24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	40013800 	.word	0x40013800
 8004904:	40020000 	.word	0x40020000
 8004908:	40020400 	.word	0x40020400
 800490c:	40020800 	.word	0x40020800
 8004910:	40020c00 	.word	0x40020c00
 8004914:	40021000 	.word	0x40021000
 8004918:	40021400 	.word	0x40021400
 800491c:	40021800 	.word	0x40021800
 8004920:	40021c00 	.word	0x40021c00
 8004924:	40022000 	.word	0x40022000
 8004928:	40022400 	.word	0x40022400
 800492c:	40013c00 	.word	0x40013c00

08004930 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e0d9      	b.n	8004b00 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800494c:	2201      	movs	r2, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	f040 80c9 	bne.w	8004afa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2103      	movs	r1, #3
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	401a      	ands	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	08da      	lsrs	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3208      	adds	r2, #8
 8004986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	220f      	movs	r2, #15
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	08d2      	lsrs	r2, r2, #3
 800499e:	4019      	ands	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3208      	adds	r2, #8
 80049a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	2103      	movs	r1, #3
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	401a      	ands	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	2101      	movs	r1, #1
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	401a      	ands	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	2103      	movs	r1, #3
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80049e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004b18 <HAL_GPIO_DeInit+0x1e8>)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	3302      	adds	r3, #2
 80049f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	220f      	movs	r2, #15
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a43      	ldr	r2, [pc, #268]	@ (8004b1c <HAL_GPIO_DeInit+0x1ec>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d037      	beq.n	8004a82 <HAL_GPIO_DeInit+0x152>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a42      	ldr	r2, [pc, #264]	@ (8004b20 <HAL_GPIO_DeInit+0x1f0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d031      	beq.n	8004a7e <HAL_GPIO_DeInit+0x14e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a41      	ldr	r2, [pc, #260]	@ (8004b24 <HAL_GPIO_DeInit+0x1f4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d02b      	beq.n	8004a7a <HAL_GPIO_DeInit+0x14a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a40      	ldr	r2, [pc, #256]	@ (8004b28 <HAL_GPIO_DeInit+0x1f8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d025      	beq.n	8004a76 <HAL_GPIO_DeInit+0x146>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b2c <HAL_GPIO_DeInit+0x1fc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01f      	beq.n	8004a72 <HAL_GPIO_DeInit+0x142>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a3e      	ldr	r2, [pc, #248]	@ (8004b30 <HAL_GPIO_DeInit+0x200>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d019      	beq.n	8004a6e <HAL_GPIO_DeInit+0x13e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8004b34 <HAL_GPIO_DeInit+0x204>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_GPIO_DeInit+0x13a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a3c      	ldr	r2, [pc, #240]	@ (8004b38 <HAL_GPIO_DeInit+0x208>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00d      	beq.n	8004a66 <HAL_GPIO_DeInit+0x136>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b3c <HAL_GPIO_DeInit+0x20c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <HAL_GPIO_DeInit+0x132>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a3a      	ldr	r2, [pc, #232]	@ (8004b40 <HAL_GPIO_DeInit+0x210>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_GPIO_DeInit+0x12e>
 8004a5a:	2309      	movs	r3, #9
 8004a5c:	e012      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a5e:	230a      	movs	r3, #10
 8004a60:	e010      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a62:	2308      	movs	r3, #8
 8004a64:	e00e      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a66:	2307      	movs	r3, #7
 8004a68:	e00c      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a6a:	2306      	movs	r3, #6
 8004a6c:	e00a      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a6e:	2305      	movs	r3, #5
 8004a70:	e008      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a72:	2304      	movs	r3, #4
 8004a74:	e006      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a76:	2303      	movs	r3, #3
 8004a78:	e004      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e002      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_GPIO_DeInit+0x154>
 8004a82:	2300      	movs	r3, #0
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	f002 0203 	and.w	r2, r2, #3
 8004a8a:	0092      	lsls	r2, r2, #2
 8004a8c:	4093      	lsls	r3, r2
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d132      	bne.n	8004afa <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <HAL_GPIO_DeInit+0x1e8>)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	3302      	adds	r3, #2
 8004aac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	4818      	ldr	r0, [pc, #96]	@ (8004b18 <HAL_GPIO_DeInit+0x1e8>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	400a      	ands	r2, r1
 8004abc:	3302      	adds	r3, #2
 8004abe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ac2:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	491e      	ldr	r1, [pc, #120]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	491a      	ldr	r1, [pc, #104]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ade:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	4917      	ldr	r1, [pc, #92]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004aec:	4b15      	ldr	r3, [pc, #84]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	4913      	ldr	r1, [pc, #76]	@ (8004b44 <HAL_GPIO_DeInit+0x214>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	3301      	adds	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	f67f af22 	bls.w	800494c <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	40020000 	.word	0x40020000
 8004b20:	40020400 	.word	0x40020400
 8004b24:	40020800 	.word	0x40020800
 8004b28:	40020c00 	.word	0x40020c00
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40021400 	.word	0x40021400
 8004b34:	40021800 	.word	0x40021800
 8004b38:	40021c00 	.word	0x40021c00
 8004b3c:	40022000 	.word	0x40022000
 8004b40:	40022400 	.word	0x40022400
 8004b44:	40013c00 	.word	0x40013c00

08004b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
 8004b54:	4613      	mov	r3, r2
 8004b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b58:	787b      	ldrb	r3, [r7, #1]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b64:	e003      	b.n	8004b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b66:	887b      	ldrh	r3, [r7, #2]
 8004b68:	041a      	lsls	r2, r3, #16
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	619a      	str	r2, [r3, #24]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f005 fce4 	bl	800a570 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2224      	movs	r2, #36	@ 0x24
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	e006      	b.n	8004c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d104      	bne.n	8004c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b1d      	ldr	r3, [pc, #116]	@ (8004c98 <HAL_I2C_Init+0x11c>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	ea42 0103 	orr.w	r1, r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69d9      	ldr	r1, [r3, #28]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	02008000 	.word	0x02008000

08004c9c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e021      	b.n	8004cf2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2224      	movs	r2, #36	@ 0x24
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f005 fc96 	bl	800a5f8 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	4608      	mov	r0, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	817b      	strh	r3, [r7, #10]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	813b      	strh	r3, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	f040 8109 	bne.w	8004f3a <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_I2C_Mem_Write+0x38>
 8004d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e101      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_I2C_Mem_Write+0x4a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e0fa      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d4e:	f7fe fd9d 	bl	800388c <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2319      	movs	r3, #25
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fb09 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0e5      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2221      	movs	r2, #33	@ 0x21
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2240      	movs	r2, #64	@ 0x40
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d98:	88f8      	ldrh	r0, [r7, #6]
 8004d9a:	893a      	ldrh	r2, [r7, #8]
 8004d9c:	8979      	ldrh	r1, [r7, #10]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	4603      	mov	r3, r0
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fa01 	bl	80051b0 <I2C_RequestMemoryWrite>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00f      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d105      	bne.n	8004dc8 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b9      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e0b3      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2bff      	cmp	r3, #255	@ 0xff
 8004ddc:	d90e      	bls.n	8004dfc <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	22ff      	movs	r2, #255	@ 0xff
 8004de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	8979      	ldrh	r1, [r7, #10]
 8004dec:	2300      	movs	r3, #0
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fbd3 	bl	80055a0 <I2C_TransferConfig>
 8004dfa:	e00f      	b.n	8004e1c <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	8979      	ldrh	r1, [r7, #10]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fbc2 	bl	80055a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fae3 	bl	80053ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d101      	bne.n	8004e38 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e081      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e07f      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	1c59      	adds	r1, r3, #1
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	6251      	str	r1, [r2, #36]	@ 0x24
 8004e46:	781a      	ldrb	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d135      	bne.n	8004edc <HAL_I2C_Mem_Write+0x1e0>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d030      	beq.n	8004edc <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	@ 0x80
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fa77 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e053      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2bff      	cmp	r3, #255	@ 0xff
 8004e9c:	d90e      	bls.n	8004ebc <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	22ff      	movs	r2, #255	@ 0xff
 8004ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	8979      	ldrh	r1, [r7, #10]
 8004eac:	2300      	movs	r3, #0
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fb73 	bl	80055a0 <I2C_TransferConfig>
 8004eba:	e00f      	b.n	8004edc <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	8979      	ldrh	r1, [r7, #10]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fb62 	bl	80055a0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d19a      	bne.n	8004e1c <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fabe 	bl	800546c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d101      	bne.n	8004f02 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e01c      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e01a      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <HAL_I2C_Mem_Write+0x248>)
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	fe00e800 	.word	0xfe00e800

08004f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	461a      	mov	r2, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	817b      	strh	r3, [r7, #10]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	813b      	strh	r3, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	f040 8107 	bne.w	8005182 <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_I2C_Mem_Read+0x38>
 8004f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0ff      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_I2C_Mem_Read+0x4a>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0f8      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fe fc77 	bl	800388c <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	2319      	movs	r3, #25
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f9e3 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0e3      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2222      	movs	r2, #34	@ 0x22
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2240      	movs	r2, #64	@ 0x40
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fe4:	88f8      	ldrh	r0, [r7, #6]
 8004fe6:	893a      	ldrh	r2, [r7, #8]
 8004fe8:	8979      	ldrh	r1, [r7, #10]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f93b 	bl	8005270 <I2C_RequestMemoryRead>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00f      	beq.n	8005020 <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005004:	2b04      	cmp	r3, #4
 8005006:	d105      	bne.n	8005014 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0b7      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0b1      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2bff      	cmp	r3, #255	@ 0xff
 8005028:	d90e      	bls.n	8005048 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	22ff      	movs	r2, #255	@ 0xff
 800502e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005034:	b2da      	uxtb	r2, r3
 8005036:	8979      	ldrh	r1, [r7, #10]
 8005038:	4b54      	ldr	r3, [pc, #336]	@ (800518c <HAL_I2C_Mem_Read+0x244>)
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 faad 	bl	80055a0 <I2C_TransferConfig>
 8005046:	e00f      	b.n	8005068 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005056:	b2da      	uxtb	r2, r3
 8005058:	8979      	ldrh	r1, [r7, #10]
 800505a:	4b4c      	ldr	r3, [pc, #304]	@ (800518c <HAL_I2C_Mem_Read+0x244>)
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fa9c 	bl	80055a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	2200      	movs	r2, #0
 8005070:	2104      	movs	r1, #4
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f980 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e080      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	6251      	str	r1, [r2, #36]	@ 0x24
 8005092:	b2c2      	uxtb	r2, r0
 8005094:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d135      	bne.n	8005124 <HAL_I2C_Mem_Read+0x1dc>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d030      	beq.n	8005124 <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	@ 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f953 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e053      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2bff      	cmp	r3, #255	@ 0xff
 80050e4:	d90e      	bls.n	8005104 <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	@ 0xff
 80050ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	8979      	ldrh	r1, [r7, #10]
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fa4f 	bl	80055a0 <I2C_TransferConfig>
 8005102:	e00f      	b.n	8005124 <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	b2da      	uxtb	r2, r3
 8005114:	8979      	ldrh	r1, [r7, #10]
 8005116:	2300      	movs	r3, #0
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa3e 	bl	80055a0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d19c      	bne.n	8005068 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f99a 	bl	800546c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	2b04      	cmp	r3, #4
 8005144:	d101      	bne.n	800514a <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e01c      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e01a      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2220      	movs	r2, #32
 8005154:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <HAL_I2C_Mem_Read+0x248>)
 8005162:	400b      	ands	r3, r1
 8005164:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	80002400 	.word	0x80002400
 8005190:	fe00e800 	.word	0xfe00e800

08005194 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a2:	b2db      	uxtb	r3, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	4608      	mov	r0, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	461a      	mov	r2, r3
 80051be:	4603      	mov	r3, r0
 80051c0:	817b      	strh	r3, [r7, #10]
 80051c2:	460b      	mov	r3, r1
 80051c4:	813b      	strh	r3, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	8979      	ldrh	r1, [r7, #10]
 80051d0:	4b26      	ldr	r3, [pc, #152]	@ (800526c <I2C_RequestMemoryWrite+0xbc>)
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f9e1 	bl	80055a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f902 	bl	80053ec <I2C_WaitOnTXISFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d101      	bne.n	80051fa <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e034      	b.n	8005264 <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e032      	b.n	8005264 <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005204:	893b      	ldrh	r3, [r7, #8]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	629a      	str	r2, [r3, #40]	@ 0x28
 800520e:	e01b      	b.n	8005248 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005210:	893b      	ldrh	r3, [r7, #8]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	b29b      	uxth	r3, r3
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	69b9      	ldr	r1, [r7, #24]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f8e2 	bl	80053ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	2b04      	cmp	r3, #4
 8005234:	d101      	bne.n	800523a <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e014      	b.n	8005264 <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e012      	b.n	8005264 <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800523e:	893b      	ldrh	r3, [r7, #8]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2200      	movs	r2, #0
 8005250:	2180      	movs	r1, #128	@ 0x80
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f890 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e000      	b.n	8005264 <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	80002000 	.word	0x80002000

08005270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	4608      	mov	r0, r1
 800527a:	4611      	mov	r1, r2
 800527c:	461a      	mov	r2, r3
 800527e:	4603      	mov	r3, r0
 8005280:	817b      	strh	r3, [r7, #10]
 8005282:	460b      	mov	r3, r1
 8005284:	813b      	strh	r3, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	8979      	ldrh	r1, [r7, #10]
 8005290:	4b26      	ldr	r3, [pc, #152]	@ (800532c <I2C_RequestMemoryRead+0xbc>)
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f982 	bl	80055a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	69b9      	ldr	r1, [r7, #24]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f8a3 	bl	80053ec <I2C_WaitOnTXISFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d101      	bne.n	80052b8 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e034      	b.n	8005322 <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e032      	b.n	8005322 <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052c2:	893b      	ldrh	r3, [r7, #8]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80052cc:	e01b      	b.n	8005306 <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052ce:	893b      	ldrh	r3, [r7, #8]
 80052d0:	0a1b      	lsrs	r3, r3, #8
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	69b9      	ldr	r1, [r7, #24]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f883 	bl	80053ec <I2C_WaitOnTXISFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d101      	bne.n	80052f8 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e014      	b.n	8005322 <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e012      	b.n	8005322 <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052fc:	893b      	ldrh	r3, [r7, #8]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2200      	movs	r2, #0
 800530e:	2140      	movs	r1, #64	@ 0x40
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f831 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e000      	b.n	8005322 <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	80002000 	.word	0x80002000

08005330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d103      	bne.n	800534e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d007      	beq.n	800536c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	619a      	str	r2, [r3, #24]
  }
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	4613      	mov	r3, r2
 8005386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005388:	e01c      	b.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d018      	beq.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005398:	f7fe fa78 	bl	800388c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d20d      	bcs.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e00f      	b.n	80053e4 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4013      	ands	r3, r2
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d0d3      	beq.n	800538a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053f8:	e02c      	b.n	8005454 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f870 	bl	80054e4 <I2C_IsAcknowledgeFailed>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e02a      	b.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d01e      	beq.n	8005454 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800541c:	f7fe fa36 	bl	800388c <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	429a      	cmp	r2, r3
 800542a:	d213      	bcs.n	8005454 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e007      	b.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	d1cb      	bne.n	80053fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005478:	e028      	b.n	80054cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f830 	bl	80054e4 <I2C_IsAcknowledgeFailed>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e026      	b.n	80054dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005494:	f7fe f9fa 	bl	800388c <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d213      	bcs.n	80054cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e007      	b.n	80054dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d1cf      	bne.n	800547a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d148      	bne.n	8005590 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054fe:	e01c      	b.n	800553a <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d018      	beq.n	800553a <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <I2C_IsAcknowledgeFailed+0x3a>
 800550e:	f7fe f9bd 	bl	800388c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d20d      	bcs.n	800553a <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e02b      	b.n	8005592 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b20      	cmp	r3, #32
 8005546:	d1db      	bne.n	8005500 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2210      	movs	r2, #16
 800554e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2220      	movs	r2, #32
 8005556:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff fee9 	bl	8005330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6859      	ldr	r1, [r3, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <I2C_IsAcknowledgeFailed+0xb8>)
 800556a:	400b      	ands	r3, r1
 800556c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2204      	movs	r2, #4
 8005572:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	fe00e800 	.word	0xfe00e800

080055a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	817b      	strh	r3, [r7, #10]
 80055ae:	4613      	mov	r3, r2
 80055b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	0d5b      	lsrs	r3, r3, #21
 80055bc:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80055c0:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <I2C_TransferConfig+0x58>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	43db      	mvns	r3, r3
 80055c6:	ea02 0103 	and.w	r1, r2, r3
 80055ca:	897b      	ldrh	r3, [r7, #10]
 80055cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80055d0:	7a7b      	ldrb	r3, [r7, #9]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	431a      	orrs	r2, r3
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	03ff63ff 	.word	0x03ff63ff

080055fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b20      	cmp	r3, #32
 8005610:	d138      	bne.n	8005684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800561c:	2302      	movs	r3, #2
 800561e:	e032      	b.n	8005686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	@ 0x24
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800564e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6819      	ldr	r1, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d139      	bne.n	8005720 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e033      	b.n	8005722 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2224      	movs	r2, #36	@ 0x24
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	2300      	movs	r3, #0
 800573e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0c7      	b.n	80058da <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f004 ff68 	bl	800a634 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800577a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005790:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6899      	ldr	r1, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b4e      	ldr	r3, [pc, #312]	@ (80058e4 <HAL_LTDC_Init+0x1b4>)
 80057ac:	400b      	ands	r3, r1
 80057ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6899      	ldr	r1, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68d9      	ldr	r1, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b42      	ldr	r3, [pc, #264]	@ (80058e4 <HAL_LTDC_Init+0x1b4>)
 80057da:	400b      	ands	r3, r1
 80057dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68d9      	ldr	r1, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1a      	ldr	r2, [r3, #32]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6919      	ldr	r1, [r3, #16]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b37      	ldr	r3, [pc, #220]	@ (80058e4 <HAL_LTDC_Init+0x1b4>)
 8005808:	400b      	ands	r3, r1
 800580a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6919      	ldr	r1, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6959      	ldr	r1, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b2b      	ldr	r3, [pc, #172]	@ (80058e4 <HAL_LTDC_Init+0x1b4>)
 8005836:	400b      	ands	r3, r1
 8005838:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6959      	ldr	r1, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800587a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0204 	orr.w	r2, r2, #4
 80058a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0202 	orr.w	r2, r2, #2
 80058b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	f000f800 	.word	0xf000f800

080058e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80058e8:	b5b0      	push	{r4, r5, r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_LTDC_ConfigLayer+0x1a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e02c      	b.n	800595c <HAL_LTDC_ConfigLayer+0x74>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2134      	movs	r1, #52	@ 0x34
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	4413      	add	r3, r2
 800591e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4614      	mov	r4, r2
 8005926:	461d      	mov	r5, r3
 8005928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800592a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800592c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800592e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f81f 	bl	8005980 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2201      	movs	r2, #1
 8005948:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bdb0      	pop	{r4, r5, r7, pc}

08005964 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005972:	b2db      	uxtb	r3, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005980:	b480      	push	{r7}
 8005982:	b089      	sub	sp, #36	@ 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	0c1b      	lsrs	r3, r3, #16
 80059a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a8:	4413      	add	r3, r2
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	01db      	lsls	r3, r3, #7
 80059b8:	4413      	add	r3, r2
 80059ba:	3384      	adds	r3, #132	@ 0x84
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4611      	mov	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	01d2      	lsls	r2, r2, #7
 80059c8:	440a      	add	r2, r1
 80059ca:	3284      	adds	r2, #132	@ 0x84
 80059cc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80059d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e2:	4413      	add	r3, r2
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	01db      	lsls	r3, r3, #7
 80059f0:	440b      	add	r3, r1
 80059f2:	3384      	adds	r3, #132	@ 0x84
 80059f4:	4619      	mov	r1, r3
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0a:	4413      	add	r3, r2
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3384      	adds	r3, #132	@ 0x84
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	4611      	mov	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	01d2      	lsls	r2, r2, #7
 8005a2a:	440a      	add	r2, r1
 8005a2c:	3284      	adds	r2, #132	@ 0x84
 8005a2e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005a32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a42:	4413      	add	r3, r2
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	01db      	lsls	r3, r3, #7
 8005a50:	440b      	add	r3, r1
 8005a52:	3384      	adds	r3, #132	@ 0x84
 8005a54:	4619      	mov	r1, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	4413      	add	r3, r2
 8005a68:	3384      	adds	r3, #132	@ 0x84
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	4611      	mov	r1, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	01d2      	lsls	r2, r2, #7
 8005a76:	440a      	add	r2, r1
 8005a78:	3284      	adds	r2, #132	@ 0x84
 8005a7a:	f023 0307 	bic.w	r3, r3, #7
 8005a7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	01db      	lsls	r3, r3, #7
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3384      	adds	r3, #132	@ 0x84
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	061b      	lsls	r3, r3, #24
 8005ab0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	01db      	lsls	r3, r3, #7
 8005abc:	4413      	add	r3, r2
 8005abe:	3384      	adds	r3, #132	@ 0x84
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	01db      	lsls	r3, r3, #7
 8005acc:	4413      	add	r3, r2
 8005ace:	3384      	adds	r3, #132	@ 0x84
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005adc:	461a      	mov	r2, r3
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4619      	mov	r1, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	01db      	lsls	r3, r3, #7
 8005af0:	440b      	add	r3, r1
 8005af2:	3384      	adds	r3, #132	@ 0x84
 8005af4:	4619      	mov	r1, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	01db      	lsls	r3, r3, #7
 8005b06:	4413      	add	r3, r2
 8005b08:	3384      	adds	r3, #132	@ 0x84
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	4611      	mov	r1, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	01d2      	lsls	r2, r2, #7
 8005b16:	440a      	add	r2, r1
 8005b18:	3284      	adds	r2, #132	@ 0x84
 8005b1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	01db      	lsls	r3, r3, #7
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3384      	adds	r3, #132	@ 0x84
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	01db      	lsls	r3, r3, #7
 8005b40:	4413      	add	r3, r2
 8005b42:	3384      	adds	r3, #132	@ 0x84
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	01db      	lsls	r3, r3, #7
 8005b50:	440b      	add	r3, r1
 8005b52:	3384      	adds	r3, #132	@ 0x84
 8005b54:	4619      	mov	r1, r3
 8005b56:	4b58      	ldr	r3, [pc, #352]	@ (8005cb8 <LTDC_SetConfig+0x338>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	6809      	ldr	r1, [r1, #0]
 8005b68:	4608      	mov	r0, r1
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	01c9      	lsls	r1, r1, #7
 8005b6e:	4401      	add	r1, r0
 8005b70:	3184      	adds	r1, #132	@ 0x84
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	01db      	lsls	r3, r3, #7
 8005b80:	4413      	add	r3, r2
 8005b82:	3384      	adds	r3, #132	@ 0x84
 8005b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	01db      	lsls	r3, r3, #7
 8005b90:	4413      	add	r3, r2
 8005b92:	3384      	adds	r3, #132	@ 0x84
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	01db      	lsls	r3, r3, #7
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3384      	adds	r3, #132	@ 0x84
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	6293      	str	r3, [r2, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8005bb8:	2304      	movs	r3, #4
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	e01b      	b.n	8005bf6 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d102      	bne.n	8005bcc <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	e014      	b.n	8005bf6 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d00b      	beq.n	8005bec <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d007      	beq.n	8005bec <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d003      	beq.n	8005bec <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	d102      	bne.n	8005bf2 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8005bec:	2302      	movs	r3, #2
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	e001      	b.n	8005bf6 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	01db      	lsls	r3, r3, #7
 8005c00:	4413      	add	r3, r2
 8005c02:	3384      	adds	r3, #132	@ 0x84
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	01d2      	lsls	r2, r2, #7
 8005c10:	440a      	add	r2, r1
 8005c12:	3284      	adds	r2, #132	@ 0x84
 8005c14:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	fb02 f303 	mul.w	r3, r2, r3
 8005c24:	041a      	lsls	r2, r3, #16
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1acb      	subs	r3, r1, r3
 8005c30:	69f9      	ldr	r1, [r7, #28]
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	3303      	adds	r3, #3
 8005c38:	68f9      	ldr	r1, [r7, #12]
 8005c3a:	6809      	ldr	r1, [r1, #0]
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	01c9      	lsls	r1, r1, #7
 8005c42:	4401      	add	r1, r0
 8005c44:	3184      	adds	r1, #132	@ 0x84
 8005c46:	4313      	orrs	r3, r2
 8005c48:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	01db      	lsls	r3, r3, #7
 8005c54:	4413      	add	r3, r2
 8005c56:	3384      	adds	r3, #132	@ 0x84
 8005c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	01db      	lsls	r3, r3, #7
 8005c64:	440b      	add	r3, r1
 8005c66:	3384      	adds	r3, #132	@ 0x84
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4b14      	ldr	r3, [pc, #80]	@ (8005cbc <LTDC_SetConfig+0x33c>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	01db      	lsls	r3, r3, #7
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3384      	adds	r3, #132	@ 0x84
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	01db      	lsls	r3, r3, #7
 8005c90:	4413      	add	r3, r2
 8005c92:	3384      	adds	r3, #132	@ 0x84
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	01d2      	lsls	r2, r2, #7
 8005ca0:	440a      	add	r2, r1
 8005ca2:	3284      	adds	r2, #132	@ 0x84
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	6013      	str	r3, [r2, #0]
}
 8005caa:	bf00      	nop
 8005cac:	3724      	adds	r7, #36	@ 0x24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	fffff8f8 	.word	0xfffff8f8
 8005cbc:	fffff800 	.word	0xfffff800

08005cc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a04      	ldr	r2, [pc, #16]	@ (8005cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cce:	6013      	str	r3, [r2, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40007000 	.word	0x40007000

08005ce0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cea:	4b23      	ldr	r3, [pc, #140]	@ (8005d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	4a22      	ldr	r2, [pc, #136]	@ (8005d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cf6:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d02:	4b1e      	ldr	r3, [pc, #120]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d0e:	f7fd fdbd 	bl	800388c <HAL_GetTick>
 8005d12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d14:	e009      	b.n	8005d2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d16:	f7fd fdb9 	bl	800388c <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d24:	d901      	bls.n	8005d2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e022      	b.n	8005d70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d2a:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d36:	d1ee      	bne.n	8005d16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d38:	4b10      	ldr	r3, [pc, #64]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d44:	f7fd fda2 	bl	800388c <HAL_GetTick>
 8005d48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d4a:	e009      	b.n	8005d60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d4c:	f7fd fd9e 	bl	800388c <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d5a:	d901      	bls.n	8005d60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e007      	b.n	8005d70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d60:	4b06      	ldr	r3, [pc, #24]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d6c:	d1ee      	bne.n	8005d4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40007000 	.word	0x40007000

08005d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e25c      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8087 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005da4:	4b96      	ldr	r3, [pc, #600]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d00c      	beq.n	8005dca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005db0:	4b93      	ldr	r3, [pc, #588]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d112      	bne.n	8005de2 <HAL_RCC_OscConfig+0x62>
 8005dbc:	4b90      	ldr	r3, [pc, #576]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dc8:	d10b      	bne.n	8005de2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dca:	4b8d      	ldr	r3, [pc, #564]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d06c      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x130>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d168      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e236      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x7a>
 8005dec:	4b84      	ldr	r3, [pc, #528]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a83      	ldr	r2, [pc, #524]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e02e      	b.n	8005e58 <HAL_RCC_OscConfig+0xd8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x9c>
 8005e02:	4b7f      	ldr	r3, [pc, #508]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a7e      	ldr	r2, [pc, #504]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7b      	ldr	r2, [pc, #492]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e01d      	b.n	8005e58 <HAL_RCC_OscConfig+0xd8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e24:	d10c      	bne.n	8005e40 <HAL_RCC_OscConfig+0xc0>
 8005e26:	4b76      	ldr	r3, [pc, #472]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a75      	ldr	r2, [pc, #468]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4b73      	ldr	r3, [pc, #460]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a72      	ldr	r2, [pc, #456]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e00b      	b.n	8005e58 <HAL_RCC_OscConfig+0xd8>
 8005e40:	4b6f      	ldr	r3, [pc, #444]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a6e      	ldr	r2, [pc, #440]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6b      	ldr	r2, [pc, #428]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d013      	beq.n	8005e88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fd fd14 	bl	800388c <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e68:	f7fd fd10 	bl	800388c <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	@ 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1ea      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7a:	4b61      	ldr	r3, [pc, #388]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0xe8>
 8005e86:	e014      	b.n	8005eb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fd fd00 	bl	800388c <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fd fcfc 	bl	800388c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	@ 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e1d6      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ea2:	4b57      	ldr	r3, [pc, #348]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x110>
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d069      	beq.n	8005f92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ebe:	4b50      	ldr	r3, [pc, #320]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eca:	4b4d      	ldr	r3, [pc, #308]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d11c      	bne.n	8005f10 <HAL_RCC_OscConfig+0x190>
 8005ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d116      	bne.n	8005f10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee2:	4b47      	ldr	r3, [pc, #284]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <HAL_RCC_OscConfig+0x17a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d001      	beq.n	8005efa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e1aa      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efa:	4b41      	ldr	r3, [pc, #260]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	493d      	ldr	r1, [pc, #244]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0e:	e040      	b.n	8005f92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d023      	beq.n	8005f60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f18:	4b39      	ldr	r3, [pc, #228]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a38      	ldr	r2, [pc, #224]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fd fcb2 	bl	800388c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2c:	f7fd fcae 	bl	800388c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e188      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f3e:	4b30      	ldr	r3, [pc, #192]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4929      	ldr	r1, [pc, #164]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	600b      	str	r3, [r1, #0]
 8005f5e:	e018      	b.n	8005f92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f60:	4b27      	ldr	r3, [pc, #156]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a26      	ldr	r2, [pc, #152]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fd fc8e 	bl	800388c <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f74:	f7fd fc8a 	bl	800388c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e164      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f86:	4b1e      	ldr	r3, [pc, #120]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d038      	beq.n	8006010 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa6:	4b16      	ldr	r3, [pc, #88]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005faa:	4a15      	ldr	r2, [pc, #84]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb2:	f7fd fc6b 	bl	800388c <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fba:	f7fd fc67 	bl	800388c <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e141      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0f0      	beq.n	8005fba <HAL_RCC_OscConfig+0x23a>
 8005fd8:	e01a      	b.n	8006010 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fda:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fde:	4a08      	ldr	r2, [pc, #32]	@ (8006000 <HAL_RCC_OscConfig+0x280>)
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe6:	f7fd fc51 	bl	800388c <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fec:	e00a      	b.n	8006004 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fee:	f7fd fc4d 	bl	800388c <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d903      	bls.n	8006004 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e127      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
 8006000:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006004:	4b94      	ldr	r3, [pc, #592]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1ee      	bne.n	8005fee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80a4 	beq.w	8006166 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800601e:	4b8e      	ldr	r3, [pc, #568]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800602a:	4b8b      	ldr	r3, [pc, #556]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	4a8a      	ldr	r2, [pc, #552]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006034:	6413      	str	r3, [r2, #64]	@ 0x40
 8006036:	4b88      	ldr	r3, [pc, #544]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006042:	2301      	movs	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006046:	4b85      	ldr	r3, [pc, #532]	@ (800625c <HAL_RCC_OscConfig+0x4dc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d118      	bne.n	8006084 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006052:	4b82      	ldr	r3, [pc, #520]	@ (800625c <HAL_RCC_OscConfig+0x4dc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a81      	ldr	r2, [pc, #516]	@ (800625c <HAL_RCC_OscConfig+0x4dc>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800605c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800605e:	f7fd fc15 	bl	800388c <HAL_GetTick>
 8006062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006066:	f7fd fc11 	bl	800388c <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b64      	cmp	r3, #100	@ 0x64
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e0eb      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006078:	4b78      	ldr	r3, [pc, #480]	@ (800625c <HAL_RCC_OscConfig+0x4dc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0f0      	beq.n	8006066 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d106      	bne.n	800609a <HAL_RCC_OscConfig+0x31a>
 800608c:	4b72      	ldr	r3, [pc, #456]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006090:	4a71      	ldr	r2, [pc, #452]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	6713      	str	r3, [r2, #112]	@ 0x70
 8006098:	e02d      	b.n	80060f6 <HAL_RCC_OscConfig+0x376>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10c      	bne.n	80060bc <HAL_RCC_OscConfig+0x33c>
 80060a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a6:	4a6c      	ldr	r2, [pc, #432]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b2:	4a69      	ldr	r2, [pc, #420]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060b4:	f023 0304 	bic.w	r3, r3, #4
 80060b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ba:	e01c      	b.n	80060f6 <HAL_RCC_OscConfig+0x376>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b05      	cmp	r3, #5
 80060c2:	d10c      	bne.n	80060de <HAL_RCC_OscConfig+0x35e>
 80060c4:	4b64      	ldr	r3, [pc, #400]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	4a63      	ldr	r2, [pc, #396]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060ca:	f043 0304 	orr.w	r3, r3, #4
 80060ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d0:	4b61      	ldr	r3, [pc, #388]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	4a60      	ldr	r2, [pc, #384]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6713      	str	r3, [r2, #112]	@ 0x70
 80060dc:	e00b      	b.n	80060f6 <HAL_RCC_OscConfig+0x376>
 80060de:	4b5e      	ldr	r3, [pc, #376]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e2:	4a5d      	ldr	r2, [pc, #372]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ee:	4a5a      	ldr	r2, [pc, #360]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d015      	beq.n	800612a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fe:	f7fd fbc5 	bl	800388c <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fd fbc1 	bl	800388c <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e099      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611c:	4b4e      	ldr	r3, [pc, #312]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800611e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0ee      	beq.n	8006106 <HAL_RCC_OscConfig+0x386>
 8006128:	e014      	b.n	8006154 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612a:	f7fd fbaf 	bl	800388c <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006130:	e00a      	b.n	8006148 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006132:	f7fd fbab 	bl	800388c <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006140:	4293      	cmp	r3, r2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e083      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006148:	4b43      	ldr	r3, [pc, #268]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800614a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1ee      	bne.n	8006132 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d105      	bne.n	8006166 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615a:	4b3f      	ldr	r3, [pc, #252]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	4a3e      	ldr	r2, [pc, #248]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006164:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d06f      	beq.n	800624e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800616e:	4b3a      	ldr	r3, [pc, #232]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b08      	cmp	r3, #8
 8006178:	d067      	beq.n	800624a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d149      	bne.n	8006216 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006182:	4b35      	ldr	r3, [pc, #212]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a34      	ldr	r2, [pc, #208]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006188:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800618c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618e:	f7fd fb7d 	bl	800388c <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006196:	f7fd fb79 	bl	800388c <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e053      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f0      	bne.n	8006196 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c2:	019b      	lsls	r3, r3, #6
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	4313      	orrs	r3, r2
 80061da:	4a1f      	ldr	r2, [pc, #124]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80061dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061e0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 80061e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ee:	f7fd fb4d 	bl	800388c <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f6:	f7fd fb49 	bl	800388c <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e023      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006208:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x476>
 8006214:	e01b      	b.n	800624e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006216:	4b10      	ldr	r3, [pc, #64]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a0f      	ldr	r2, [pc, #60]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800621c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006222:	f7fd fb33 	bl	800388c <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622a:	f7fd fb2f 	bl	800388c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e009      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <HAL_RCC_OscConfig+0x4d8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1f0      	bne.n	800622a <HAL_RCC_OscConfig+0x4aa>
 8006248:	e001      	b.n	800624e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	40007000 	.word	0x40007000

08006260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0ce      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006278:	4b69      	ldr	r3, [pc, #420]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d910      	bls.n	80062a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006286:	4b66      	ldr	r3, [pc, #408]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 020f 	bic.w	r2, r3, #15
 800628e:	4964      	ldr	r1, [pc, #400]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	4313      	orrs	r3, r2
 8006294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006296:	4b62      	ldr	r3, [pc, #392]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d001      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0b6      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d020      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062c0:	4b58      	ldr	r3, [pc, #352]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4a57      	ldr	r2, [pc, #348]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062d8:	4b52      	ldr	r3, [pc, #328]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	4a51      	ldr	r2, [pc, #324]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e4:	4b4f      	ldr	r3, [pc, #316]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	494c      	ldr	r1, [pc, #304]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d040      	beq.n	8006384 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d107      	bne.n	800631a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630a:	4b46      	ldr	r3, [pc, #280]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d115      	bne.n	8006342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e07d      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d107      	bne.n	8006332 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006322:	4b40      	ldr	r3, [pc, #256]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d109      	bne.n	8006342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e071      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006332:	4b3c      	ldr	r3, [pc, #240]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e069      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006342:	4b38      	ldr	r3, [pc, #224]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f023 0203 	bic.w	r2, r3, #3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4935      	ldr	r1, [pc, #212]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006350:	4313      	orrs	r3, r2
 8006352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006354:	f7fd fa9a 	bl	800388c <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635a:	e00a      	b.n	8006372 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800635c:	f7fd fa96 	bl	800388c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e051      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006372:	4b2c      	ldr	r3, [pc, #176]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 020c 	and.w	r2, r3, #12
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	429a      	cmp	r2, r3
 8006382:	d1eb      	bne.n	800635c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006384:	4b26      	ldr	r3, [pc, #152]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d210      	bcs.n	80063b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006392:	4b23      	ldr	r3, [pc, #140]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f023 020f 	bic.w	r2, r3, #15
 800639a:	4921      	ldr	r1, [pc, #132]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	4313      	orrs	r3, r2
 80063a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d001      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e030      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c0:	4b18      	ldr	r3, [pc, #96]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4915      	ldr	r1, [pc, #84]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d009      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063de:	4b11      	ldr	r3, [pc, #68]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	490d      	ldr	r1, [pc, #52]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063f2:	f000 f81d 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 80063f6:	4602      	mov	r2, r0
 80063f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	4909      	ldr	r1, [pc, #36]	@ (8006428 <HAL_RCC_ClockConfig+0x1c8>)
 8006404:	5ccb      	ldrb	r3, [r1, r3]
 8006406:	fa22 f303 	lsr.w	r3, r2, r3
 800640a:	4a08      	ldr	r2, [pc, #32]	@ (800642c <HAL_RCC_ClockConfig+0x1cc>)
 800640c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800640e:	200f      	movs	r0, #15
 8006410:	f7fd f9f8 	bl	8003804 <HAL_InitTick>

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40023c00 	.word	0x40023c00
 8006424:	40023800 	.word	0x40023800
 8006428:	08010eac 	.word	0x08010eac
 800642c:	20000058 	.word	0x20000058

08006430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006434:	b090      	sub	sp, #64	@ 0x40
 8006436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
 800643c:	2300      	movs	r3, #0
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006440:	2300      	movs	r3, #0
 8006442:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006448:	4b59      	ldr	r3, [pc, #356]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	2b08      	cmp	r3, #8
 8006452:	d00d      	beq.n	8006470 <HAL_RCC_GetSysClockFreq+0x40>
 8006454:	2b08      	cmp	r3, #8
 8006456:	f200 80a1 	bhi.w	800659c <HAL_RCC_GetSysClockFreq+0x16c>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x34>
 800645e:	2b04      	cmp	r3, #4
 8006460:	d003      	beq.n	800646a <HAL_RCC_GetSysClockFreq+0x3a>
 8006462:	e09b      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006464:	4b53      	ldr	r3, [pc, #332]	@ (80065b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006466:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006468:	e09b      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800646a:	4b53      	ldr	r3, [pc, #332]	@ (80065b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800646c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800646e:	e098      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006470:	4b4f      	ldr	r3, [pc, #316]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800647a:	4b4d      	ldr	r3, [pc, #308]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d028      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006486:	4b4a      	ldr	r3, [pc, #296]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	099b      	lsrs	r3, r3, #6
 800648c:	2200      	movs	r2, #0
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	627a      	str	r2, [r7, #36]	@ 0x24
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006498:	2100      	movs	r1, #0
 800649a:	4b47      	ldr	r3, [pc, #284]	@ (80065b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800649c:	fb03 f201 	mul.w	r2, r3, r1
 80064a0:	2300      	movs	r3, #0
 80064a2:	fb00 f303 	mul.w	r3, r0, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	4a43      	ldr	r2, [pc, #268]	@ (80065b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80064aa:	fba0 1202 	umull	r1, r2, r0, r2
 80064ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064b0:	460a      	mov	r2, r1
 80064b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064b6:	4413      	add	r3, r2
 80064b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064bc:	2200      	movs	r2, #0
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	61fa      	str	r2, [r7, #28]
 80064c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064ca:	f7fa fb1b 	bl	8000b04 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4613      	mov	r3, r2
 80064d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d6:	e053      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064d8:	4b35      	ldr	r3, [pc, #212]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	099b      	lsrs	r3, r3, #6
 80064de:	2200      	movs	r2, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	617a      	str	r2, [r7, #20]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064ea:	f04f 0b00 	mov.w	fp, #0
 80064ee:	4652      	mov	r2, sl
 80064f0:	465b      	mov	r3, fp
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	0159      	lsls	r1, r3, #5
 80064fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006500:	0150      	lsls	r0, r2, #5
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	ebb2 080a 	subs.w	r8, r2, sl
 800650a:	eb63 090b 	sbc.w	r9, r3, fp
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800651a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800651e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006522:	ebb2 0408 	subs.w	r4, r2, r8
 8006526:	eb63 0509 	sbc.w	r5, r3, r9
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	00eb      	lsls	r3, r5, #3
 8006534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006538:	00e2      	lsls	r2, r4, #3
 800653a:	4614      	mov	r4, r2
 800653c:	461d      	mov	r5, r3
 800653e:	eb14 030a 	adds.w	r3, r4, sl
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	eb45 030b 	adc.w	r3, r5, fp
 8006548:	607b      	str	r3, [r7, #4]
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006556:	4629      	mov	r1, r5
 8006558:	028b      	lsls	r3, r1, #10
 800655a:	4621      	mov	r1, r4
 800655c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006560:	4621      	mov	r1, r4
 8006562:	028a      	lsls	r2, r1, #10
 8006564:	4610      	mov	r0, r2
 8006566:	4619      	mov	r1, r3
 8006568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656a:	2200      	movs	r2, #0
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	60fa      	str	r2, [r7, #12]
 8006570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006574:	f7fa fac6 	bl	8000b04 <__aeabi_uldivmod>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4613      	mov	r3, r2
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	0c1b      	lsrs	r3, r3, #16
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	3301      	adds	r3, #1
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	fbb2 f3f3 	udiv	r3, r2, r3
 8006598:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800659a:	e002      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800659c:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800659e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3740      	adds	r7, #64	@ 0x40
 80065a8:	46bd      	mov	sp, r7
 80065aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	017d7840 	.word	0x017d7840

080065bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c0:	4b03      	ldr	r3, [pc, #12]	@ (80065d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000058 	.word	0x20000058

080065d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065d8:	f7ff fff0 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 80065dc:	4602      	mov	r2, r0
 80065de:	4b05      	ldr	r3, [pc, #20]	@ (80065f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0a9b      	lsrs	r3, r3, #10
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4903      	ldr	r1, [pc, #12]	@ (80065f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ea:	5ccb      	ldrb	r3, [r1, r3]
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40023800 	.word	0x40023800
 80065f8:	08010ebc 	.word	0x08010ebc

080065fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006600:	f7ff ffdc 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8006604:	4602      	mov	r2, r0
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	0b5b      	lsrs	r3, r3, #13
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	4903      	ldr	r1, [pc, #12]	@ (8006620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006612:	5ccb      	ldrb	r3, [r1, r3]
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	08010ebc 	.word	0x08010ebc

08006624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d012      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800664c:	4b69      	ldr	r3, [pc, #420]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	4a68      	ldr	r2, [pc, #416]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006656:	6093      	str	r3, [r2, #8]
 8006658:	4b66      	ldr	r3, [pc, #408]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006660:	4964      	ldr	r1, [pc, #400]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800666e:	2301      	movs	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d017      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800667e:	4b5d      	ldr	r3, [pc, #372]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006684:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668c:	4959      	ldr	r1, [pc, #356]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800669c:	d101      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800669e:	2301      	movs	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80066aa:	2301      	movs	r3, #1
 80066ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d017      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066ba:	4b4e      	ldr	r3, [pc, #312]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	494a      	ldr	r1, [pc, #296]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066d8:	d101      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80066da:	2301      	movs	r3, #1
 80066dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80066e6:	2301      	movs	r3, #1
 80066e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066f6:	2301      	movs	r3, #1
 80066f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 808b 	beq.w	800681e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006708:	4b3a      	ldr	r3, [pc, #232]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	4a39      	ldr	r2, [pc, #228]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006712:	6413      	str	r3, [r2, #64]	@ 0x40
 8006714:	4b37      	ldr	r3, [pc, #220]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006720:	4b35      	ldr	r3, [pc, #212]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a34      	ldr	r2, [pc, #208]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800672a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672c:	f7fd f8ae 	bl	800388c <HAL_GetTick>
 8006730:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006734:	f7fd f8aa 	bl	800388c <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	@ 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e357      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006746:	4b2c      	ldr	r3, [pc, #176]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006752:	4b28      	ldr	r3, [pc, #160]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800675a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d035      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	429a      	cmp	r2, r3
 800676e:	d02e      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006770:	4b20      	ldr	r3, [pc, #128]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006778:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800677a:	4b1e      	ldr	r3, [pc, #120]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677e:	4a1d      	ldr	r2, [pc, #116]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006784:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006786:	4b1b      	ldr	r3, [pc, #108]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678a:	4a1a      	ldr	r2, [pc, #104]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006790:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006792:	4a18      	ldr	r2, [pc, #96]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006798:	4b16      	ldr	r3, [pc, #88]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d014      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fd f872 	bl	800388c <HAL_GetTick>
 80067a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067aa:	e00a      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ac:	f7fd f86e 	bl	800388c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e319      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c2:	4b0c      	ldr	r3, [pc, #48]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0ee      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067da:	d111      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067e8:	4b04      	ldr	r3, [pc, #16]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067ea:	400b      	ands	r3, r1
 80067ec:	4901      	ldr	r1, [pc, #4]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
 80067f2:	e00b      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	40007000 	.word	0x40007000
 80067fc:	0ffffcff 	.word	0x0ffffcff
 8006800:	4baa      	ldr	r3, [pc, #680]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	4aa9      	ldr	r2, [pc, #676]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006806:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800680a:	6093      	str	r3, [r2, #8]
 800680c:	4ba7      	ldr	r3, [pc, #668]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800680e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006818:	49a4      	ldr	r1, [pc, #656]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800681a:	4313      	orrs	r3, r2
 800681c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b00      	cmp	r3, #0
 8006828:	d010      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800682a:	4ba0      	ldr	r3, [pc, #640]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006830:	4a9e      	ldr	r2, [pc, #632]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006836:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800683a:	4b9c      	ldr	r3, [pc, #624]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800683c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006844:	4999      	ldr	r1, [pc, #612]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006858:	4b94      	ldr	r3, [pc, #592]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006866:	4991      	ldr	r1, [pc, #580]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800687a:	4b8c      	ldr	r3, [pc, #560]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006880:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006888:	4988      	ldr	r1, [pc, #544]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800689c:	4b83      	ldr	r3, [pc, #524]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068aa:	4980      	ldr	r1, [pc, #512]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068be:	4b7b      	ldr	r3, [pc, #492]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068cc:	4977      	ldr	r1, [pc, #476]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068e0:	4b72      	ldr	r3, [pc, #456]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	496f      	ldr	r1, [pc, #444]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006902:	4b6a      	ldr	r3, [pc, #424]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006908:	f023 020c 	bic.w	r2, r3, #12
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006910:	4966      	ldr	r1, [pc, #408]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006924:	4b61      	ldr	r3, [pc, #388]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006932:	495e      	ldr	r1, [pc, #376]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006946:	4b59      	ldr	r3, [pc, #356]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006954:	4955      	ldr	r1, [pc, #340]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006968:	4b50      	ldr	r3, [pc, #320]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006976:	494d      	ldr	r1, [pc, #308]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800698a:	4b48      	ldr	r3, [pc, #288]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006990:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006998:	4944      	ldr	r1, [pc, #272]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80069ac:	4b3f      	ldr	r3, [pc, #252]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ba:	493c      	ldr	r1, [pc, #240]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069ce:	4b37      	ldr	r3, [pc, #220]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069dc:	4933      	ldr	r1, [pc, #204]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069f0:	4b2e      	ldr	r3, [pc, #184]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069fe:	492b      	ldr	r1, [pc, #172]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a12:	4b26      	ldr	r3, [pc, #152]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a18:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a20:	4922      	ldr	r1, [pc, #136]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a30:	d101      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a42:	2301      	movs	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a52:	4b16      	ldr	r3, [pc, #88]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a60:	4912      	ldr	r1, [pc, #72]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a74:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a84:	4909      	ldr	r1, [pc, #36]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d005      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a9a:	f040 80d9 	bne.w	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a9e:	4b03      	ldr	r3, [pc, #12]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a02      	ldr	r2, [pc, #8]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aa4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e001      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006aac:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab0:	f7fc feec 	bl	800388c <HAL_GetTick>
 8006ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ab8:	f7fc fee8 	bl	800388c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b64      	cmp	r3, #100	@ 0x64
 8006ac4:	d901      	bls.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e195      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aca:	4b6d      	ldr	r3, [pc, #436]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d021      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11d      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006aea:	4b65      	ldr	r3, [pc, #404]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006af8:	4b61      	ldr	r3, [pc, #388]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006afe:	0e1b      	lsrs	r3, r3, #24
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	019a      	lsls	r2, r3, #6
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	071b      	lsls	r3, r3, #28
 8006b1e:	4958      	ldr	r1, [pc, #352]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d004      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b3a:	d00a      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d02e      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b50:	d129      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b52:	4b4b      	ldr	r3, [pc, #300]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b60:	4b47      	ldr	r3, [pc, #284]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b66:	0f1b      	lsrs	r3, r3, #28
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	019a      	lsls	r2, r3, #6
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	061b      	lsls	r3, r3, #24
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	071b      	lsls	r3, r3, #28
 8006b86:	493e      	ldr	r1, [pc, #248]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b94:	f023 021f 	bic.w	r2, r3, #31
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	4938      	ldr	r1, [pc, #224]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01d      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bb2:	4b33      	ldr	r3, [pc, #204]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb8:	0e1b      	lsrs	r3, r3, #24
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc6:	0f1b      	lsrs	r3, r3, #28
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	019a      	lsls	r2, r3, #6
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	431a      	orrs	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	4926      	ldr	r1, [pc, #152]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	019a      	lsls	r2, r3, #6
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	061b      	lsls	r3, r3, #24
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	071b      	lsls	r3, r3, #28
 8006c16:	491a      	ldr	r1, [pc, #104]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c1e:	4b18      	ldr	r3, [pc, #96]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a17      	ldr	r2, [pc, #92]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2a:	f7fc fe2f 	bl	800388c <HAL_GetTick>
 8006c2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c30:	e008      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c32:	f7fc fe2b 	bl	800388c <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b64      	cmp	r3, #100	@ 0x64
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e0d8      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c44:	4b0e      	ldr	r3, [pc, #56]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0f0      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	f040 80ce 	bne.w	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c58:	4b09      	ldr	r3, [pc, #36]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a08      	ldr	r2, [pc, #32]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c64:	f7fc fe12 	bl	800388c <HAL_GetTick>
 8006c68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c6a:	e00b      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c6c:	f7fc fe0e 	bl	800388c <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b64      	cmp	r3, #100	@ 0x64
 8006c78:	d904      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e0bb      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006c7e:	bf00      	nop
 8006c80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c84:	4b5e      	ldr	r3, [pc, #376]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c90:	d0ec      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d02e      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d12a      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006cba:	4b51      	ldr	r3, [pc, #324]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cce:	0f1b      	lsrs	r3, r3, #28
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	019a      	lsls	r2, r3, #6
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	061b      	lsls	r3, r3, #24
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	071b      	lsls	r3, r3, #28
 8006cee:	4944      	ldr	r1, [pc, #272]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cf6:	4b42      	ldr	r3, [pc, #264]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cfc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	493d      	ldr	r1, [pc, #244]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d022      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d24:	d11d      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d26:	4b36      	ldr	r3, [pc, #216]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2c:	0e1b      	lsrs	r3, r3, #24
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d34:	4b32      	ldr	r3, [pc, #200]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3a:	0f1b      	lsrs	r3, r3, #28
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	019a      	lsls	r2, r3, #6
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	071b      	lsls	r3, r3, #28
 8006d5a:	4929      	ldr	r1, [pc, #164]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d028      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d6e:	4b24      	ldr	r3, [pc, #144]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d74:	0e1b      	lsrs	r3, r3, #24
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d7c:	4b20      	ldr	r3, [pc, #128]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d82:	0c1b      	lsrs	r3, r3, #16
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	019a      	lsls	r2, r3, #6
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	431a      	orrs	r2, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	061b      	lsls	r3, r3, #24
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	071b      	lsls	r3, r3, #28
 8006da2:	4917      	ldr	r1, [pc, #92]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006daa:	4b15      	ldr	r3, [pc, #84]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006db0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	4911      	ldr	r1, [pc, #68]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fc fd5e 	bl	800388c <HAL_GetTick>
 8006dd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006dd4:	f7fc fd5a 	bl	800388c <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	@ 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e007      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006de6:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df2:	d1ef      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3720      	adds	r7, #32
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40023800 	.word	0x40023800

08006e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e22:	f040 808d 	bne.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006e26:	4b93      	ldr	r3, [pc, #588]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e2c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006e34:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e3c:	d07c      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e44:	d87b      	bhi.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e52:	d039      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006e54:	e073      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e56:	4b87      	ldr	r3, [pc, #540]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e62:	4b84      	ldr	r3, [pc, #528]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e6a:	4a83      	ldr	r2, [pc, #524]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	e007      	b.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e74:	4b7f      	ldr	r3, [pc, #508]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e84:	4b7b      	ldr	r3, [pc, #492]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8a:	0e1b      	lsrs	r3, r3, #24
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e92:	4b78      	ldr	r3, [pc, #480]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e98:	099b      	lsrs	r3, r3, #6
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	fb03 f202 	mul.w	r2, r3, r2
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006eac:	4b71      	ldr	r3, [pc, #452]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec4:	617b      	str	r3, [r7, #20]
        break;
 8006ec6:	e03b      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d108      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ed4:	4b67      	ldr	r3, [pc, #412]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006edc:	4a66      	ldr	r2, [pc, #408]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	e007      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ee6:	4b63      	ldr	r3, [pc, #396]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006eee:	4a63      	ldr	r2, [pc, #396]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006efc:	0e1b      	lsrs	r3, r3, #24
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006f04:	4b5b      	ldr	r3, [pc, #364]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	fb03 f202 	mul.w	r2, r3, r2
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006f1e:	4b55      	ldr	r3, [pc, #340]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]
        break;
 8006f36:	e003      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f38:	4b51      	ldr	r3, [pc, #324]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006f3a:	617b      	str	r3, [r7, #20]
        break;
 8006f3c:	e000      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8006f3e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f46:	f040 808d 	bne.w	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f50:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006f58:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f60:	d07c      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f68:	d87b      	bhi.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f76:	d039      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006f78:	e073      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d108      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f86:	4b3b      	ldr	r3, [pc, #236]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f8e:	4a3a      	ldr	r2, [pc, #232]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	e007      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006f98:	4b36      	ldr	r3, [pc, #216]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fa0:	4a36      	ldr	r2, [pc, #216]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006fa8:	4b32      	ldr	r3, [pc, #200]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fae:	0e1b      	lsrs	r3, r3, #24
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbc:	099b      	lsrs	r3, r3, #6
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	fb03 f202 	mul.w	r2, r3, r2
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006fd0:	4b28      	ldr	r3, [pc, #160]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	617b      	str	r3, [r7, #20]
        break;
 8006fea:	e03b      	b.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006fec:	4b21      	ldr	r3, [pc, #132]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d108      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007000:	4a1d      	ldr	r2, [pc, #116]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007002:	fbb2 f3f3 	udiv	r3, r2, r3
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	e007      	b.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800700a:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007012:	4a1a      	ldr	r2, [pc, #104]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007014:	fbb2 f3f3 	udiv	r3, r2, r3
 8007018:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800701a:	4b16      	ldr	r3, [pc, #88]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800701c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007020:	0e1b      	lsrs	r3, r3, #24
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007028:	4b12      	ldr	r3, [pc, #72]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800702a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800702e:	099b      	lsrs	r3, r3, #6
 8007030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	fb03 f202 	mul.w	r2, r3, r2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007042:	4b0c      	ldr	r3, [pc, #48]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]
        break;
 800705a:	e003      	b.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800705c:	4b08      	ldr	r3, [pc, #32]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800705e:	617b      	str	r3, [r7, #20]
        break;
 8007060:	e000      	b.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007062:	bf00      	nop
      }
    }
  }

  return frequency;
 8007064:	697b      	ldr	r3, [r7, #20]
}
 8007066:	4618      	mov	r0, r3
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40023800 	.word	0x40023800
 8007078:	00f42400 	.word	0x00f42400
 800707c:	017d7840 	.word	0x017d7840
 8007080:	00bb8000 	.word	0x00bb8000

08007084 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e14d      	b.n	800733e <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f003 fdf8 	bl	800acac <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa6f 	bl	80075a8 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d00c      	beq.n	80070ec <HAL_SAI_Init+0x68>
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d80d      	bhi.n	80070f2 <HAL_SAI_Init+0x6e>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_SAI_Init+0x5c>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d003      	beq.n	80070e6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80070de:	e008      	b.n	80070f2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61fb      	str	r3, [r7, #28]
      break;
 80070e4:	e006      	b.n	80070f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80070e6:	2310      	movs	r3, #16
 80070e8:	61fb      	str	r3, [r7, #28]
      break;
 80070ea:	e003      	b.n	80070f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80070ec:	2320      	movs	r3, #32
 80070ee:	61fb      	str	r3, [r7, #28]
      break;
 80070f0:	e000      	b.n	80070f4 <HAL_SAI_Init+0x70>
    break;
 80070f2:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d81e      	bhi.n	800713a <HAL_SAI_Init+0xb6>
 80070fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <HAL_SAI_Init+0x80>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007115 	.word	0x08007115
 8007108:	0800711b 	.word	0x0800711b
 800710c:	08007123 	.word	0x08007123
 8007110:	0800712b 	.word	0x0800712b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]
      }
      break;
 8007118:	e010      	b.n	800713c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800711a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800711e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007120:	e00c      	b.n	800713c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007122:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007126:	617b      	str	r3, [r7, #20]
      }
      break;
 8007128:	e008      	b.n	800713c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800712a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800712e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007138:	e000      	b.n	800713c <HAL_SAI_Init+0xb8>
  default:
    break;      
 800713a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a81      	ldr	r2, [pc, #516]	@ (8007348 <HAL_SAI_Init+0x2c4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d004      	beq.n	8007150 <HAL_SAI_Init+0xcc>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a80      	ldr	r2, [pc, #512]	@ (800734c <HAL_SAI_Init+0x2c8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d103      	bne.n	8007158 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007150:	4a7f      	ldr	r2, [pc, #508]	@ (8007350 <HAL_SAI_Init+0x2cc>)
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e002      	b.n	800715e <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8007158:	4a7e      	ldr	r2, [pc, #504]	@ (8007354 <HAL_SAI_Init+0x2d0>)
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d043      	beq.n	80071ee <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a76      	ldr	r2, [pc, #472]	@ (8007348 <HAL_SAI_Init+0x2c4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <HAL_SAI_Init+0xfa>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a74      	ldr	r2, [pc, #464]	@ (800734c <HAL_SAI_Init+0x2c8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d104      	bne.n	8007188 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800717e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007182:	f7ff fe3f 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 8007186:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a72      	ldr	r2, [pc, #456]	@ (8007358 <HAL_SAI_Init+0x2d4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d004      	beq.n	800719c <HAL_SAI_Init+0x118>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a71      	ldr	r2, [pc, #452]	@ (800735c <HAL_SAI_Init+0x2d8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d104      	bne.n	80071a6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800719c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80071a0:	f7ff fe30 	bl	8006e04 <HAL_RCCEx_GetPeriphCLKFreq>
 80071a4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	025b      	lsls	r3, r3, #9
 80071b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071bc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a67      	ldr	r2, [pc, #412]	@ (8007360 <HAL_SAI_Init+0x2dc>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	08da      	lsrs	r2, r3, #3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80071cc:	68f9      	ldr	r1, [r7, #12]
 80071ce:	4b64      	ldr	r3, [pc, #400]	@ (8007360 <HAL_SAI_Init+0x2dc>)
 80071d0:	fba3 2301 	umull	r2, r3, r3, r1
 80071d4:	08da      	lsrs	r2, r3, #3
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	1aca      	subs	r2, r1, r3
 80071e0:	2a08      	cmp	r2, #8
 80071e2:	d904      	bls.n	80071ee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_SAI_Init+0x17a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d109      	bne.n	8007212 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_SAI_Init+0x186>
 8007206:	2300      	movs	r3, #0
 8007208:	e001      	b.n	800720e <HAL_SAI_Init+0x18a>
 800720a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	e008      	b.n	8007224 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	2b01      	cmp	r3, #1
 8007218:	d102      	bne.n	8007220 <HAL_SAI_Init+0x19c>
 800721a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800721e:	e000      	b.n	8007222 <HAL_SAI_Init+0x19e>
 8007220:	2300      	movs	r3, #0
 8007222:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b4d      	ldr	r3, [pc, #308]	@ (8007364 <HAL_SAI_Init+0x2e0>)
 8007230:	400b      	ands	r3, r1
 8007232:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007242:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007248:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	431a      	orrs	r2, r3
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ckstr_bits | syncen_bits |                               \
 800725c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007268:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	051b      	lsls	r3, r3, #20
 8007270:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6859      	ldr	r1, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	4b38      	ldr	r3, [pc, #224]	@ (8007368 <HAL_SAI_Init+0x2e4>)
 8007286:	400b      	ands	r3, r1
 8007288:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6859      	ldr	r1, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6899      	ldr	r1, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b2e      	ldr	r3, [pc, #184]	@ (800736c <HAL_SAI_Init+0x2e8>)
 80072b4:	400b      	ands	r3, r1
 80072b6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6899      	ldr	r1, [r3, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80072c8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                          hsai->FrameInit.FSOffset |
 80072ce:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                          hsai->FrameInit.FSDefinition |
 80072d4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072da:	3b01      	subs	r3, #1
 80072dc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80072de:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68d9      	ldr	r1, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80072f6:	400b      	ands	r3, r1
 80072f8:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68d9      	ldr	r1, [r3, #12]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007308:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800730e:	041b      	lsls	r3, r3, #16
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007316:	3b01      	subs	r3, #1
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3720      	adds	r7, #32
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40015804 	.word	0x40015804
 800734c:	40015824 	.word	0x40015824
 8007350:	40015800 	.word	0x40015800
 8007354:	40015c00 	.word	0x40015c00
 8007358:	40015c04 	.word	0x40015c04
 800735c:	40015c24 	.word	0x40015c24
 8007360:	cccccccd 	.word	0xcccccccd
 8007364:	ff05c010 	.word	0xff05c010
 8007368:	ffff1ff0 	.word	0xffff1ff0
 800736c:	fff88000 	.word	0xfff88000

08007370 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t* pData, uint16_t Size, uint32_t Timeout)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	4613      	mov	r3, r2
 800737e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007380:	f7fc fa84 	bl	800388c <HAL_GetTick>
 8007384:	6178      	str	r0, [r7, #20]

  if((pData == NULL ) || (Size == 0))
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_SAI_Transmit+0x22>
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e0b6      	b.n	8007504 <HAL_SAI_Transmit+0x194>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b01      	cmp	r3, #1
 80073a0:	f040 80af 	bne.w	8007502 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_SAI_Transmit+0x42>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e0a8      	b.n	8007504 <HAL_SAI_Transmit+0x194>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->XferSize = Size;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2212      	movs	r2, #18
 80073d4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d17a      	bne.n	80074e4 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f88c 	bl	800750c <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007402:	601a      	str	r2, [r3, #0]
    }

    while(hsai->XferCount > 0)
 8007404:	e06e      	b.n	80074e4 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007414:	d035      	beq.n	8007482 <HAL_SAI_Transmit+0x112>
      {
        if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741a:	2b40      	cmp	r3, #64	@ 0x40
 800741c:	d10d      	bne.n	800743a <HAL_SAI_Transmit+0xca>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800742a:	1c59      	adds	r1, r3, #1
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	6651      	str	r1, [r2, #100]	@ 0x64
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	61da      	str	r2, [r3, #28]
 8007438:	e01a      	b.n	8007470 <HAL_SAI_Transmit+0x100>
        }
        else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743e:	2b80      	cmp	r3, #128	@ 0x80
 8007440:	d80b      	bhi.n	800745a <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007446:	881a      	ldrh	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 2;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007452:	1c9a      	adds	r2, r3, #2
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	665a      	str	r2, [r3, #100]	@ 0x64
 8007458:	e00a      	b.n	8007470 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 4;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800746a:	1d1a      	adds	r2, r3, #4
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        hsai->XferCount--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007480:	e030      	b.n	80074e4 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d02c      	beq.n	80074e4 <HAL_SAI_Transmit+0x174>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <HAL_SAI_Transmit+0x130>
 8007490:	f7fc f9fc 	bl	800388c <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d221      	bcs.n	80074e4 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f04f 32ff 	mov.w	r2, #4294967295
 80074b8:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f874 	bl	80075a8 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0208 	orr.w	r2, r2, #8
 80074ce:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e00f      	b.n	8007504 <HAL_SAI_Transmit+0x194>
    while(hsai->XferCount > 0)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d18b      	bne.n	8007406 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	e000      	b.n	8007504 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8007502:	2302      	movs	r3, #2
  }
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8007514:	e034      	b.n	8007580 <SAI_FillFifo+0x74>
  {
    if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751a:	2b40      	cmp	r3, #64	@ 0x40
 800751c:	d10d      	bne.n	800753a <SAI_FillFifo+0x2e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800752a:	1c59      	adds	r1, r3, #1
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6651      	str	r1, [r2, #100]	@ 0x64
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61da      	str	r2, [r3, #28]
 8007538:	e01a      	b.n	8007570 <SAI_FillFifo+0x64>
    }
    else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800753e:	2b80      	cmp	r3, #128	@ 0x80
 8007540:	d80b      	bhi.n	800755a <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007552:	1c9a      	adds	r2, r3, #2
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	665a      	str	r2, [r3, #100]	@ 0x64
 8007558:	e00a      	b.n	8007570 <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 4;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    hsai->XferCount--;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800758a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800758e:	d004      	beq.n	800759a <SAI_FillFifo+0x8e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1bd      	bne.n	8007516 <SAI_FillFifo+0xa>
  }
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80075a8:	b490      	push	{r4, r7}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80075b0:	4b16      	ldr	r3, [pc, #88]	@ (800760c <SAI_Disable+0x64>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a16      	ldr	r2, [pc, #88]	@ (8007610 <SAI_Disable+0x68>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	0b1b      	lsrs	r3, r3, #12
 80075bc:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80075d0:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80075d2:	4623      	mov	r3, r4
 80075d4:	1e5c      	subs	r4, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	73fb      	strb	r3, [r7, #15]
      break;
 80075ee:	e006      	b.n	80075fe <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e9      	bne.n	80075d2 <SAI_Disable+0x2a>

  return status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bc90      	pop	{r4, r7}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20000058 	.word	0x20000058
 8007610:	95cbec1b 	.word	0x95cbec1b

08007614 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e025      	b.n	8007674 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f003 fb2b 	bl	800ac98 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3304      	adds	r3, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f001 faf1 	bl	8008c3c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	461a      	mov	r2, r3
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	f001 fb5b 	bl	8008d20 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d101      	bne.n	8007698 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
 8007696:	e018      	b.n	80076ca <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fbb9 	bl	8008e20 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d104      	bne.n	80076c0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2205      	movs	r2, #5
 80076ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80076be:	e003      	b.n	80076c8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d101      	bne.n	80076ec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
 80076ea:	e00e      	b.n	800770a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fbb1 	bl	8008e62 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e01d      	b.n	8007760 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f003 f843 	bl	800a7c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2202      	movs	r2, #2
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 f93f 	bl	80079d4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Return function status */
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e01d      	b.n	80077ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f003 f8cb 	bl	800a960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f000 f8f9 	bl	80079d4 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}  
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_TIM_ConfigClockSource+0x1c>
 800780c:	2302      	movs	r3, #2
 800780e:	e0d8      	b.n	80079c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4b68      	ldr	r3, [pc, #416]	@ (80079cc <HAL_TIM_ConfigClockSource+0x1d8>)
 800782c:	4013      	ands	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007848:	d052      	beq.n	80078f0 <HAL_TIM_ConfigClockSource+0xfc>
 800784a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800784e:	f200 80ae 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 8007852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007856:	d027      	beq.n	80078a8 <HAL_TIM_ConfigClockSource+0xb4>
 8007858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800785c:	f200 80a7 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 8007860:	2b70      	cmp	r3, #112	@ 0x70
 8007862:	d02a      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0xc6>
 8007864:	2b70      	cmp	r3, #112	@ 0x70
 8007866:	f200 80a2 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 800786a:	2b60      	cmp	r3, #96	@ 0x60
 800786c:	d063      	beq.n	8007936 <HAL_TIM_ConfigClockSource+0x142>
 800786e:	2b60      	cmp	r3, #96	@ 0x60
 8007870:	f200 809d 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 8007874:	2b50      	cmp	r3, #80	@ 0x50
 8007876:	d04e      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x122>
 8007878:	2b50      	cmp	r3, #80	@ 0x50
 800787a:	f200 8098 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 800787e:	2b40      	cmp	r3, #64	@ 0x40
 8007880:	d069      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0x162>
 8007882:	2b40      	cmp	r3, #64	@ 0x40
 8007884:	f200 8093 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 8007888:	2b30      	cmp	r3, #48	@ 0x30
 800788a:	f000 8089 	beq.w	80079a0 <HAL_TIM_ConfigClockSource+0x1ac>
 800788e:	2b30      	cmp	r3, #48	@ 0x30
 8007890:	f200 808d 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 8007894:	2b20      	cmp	r3, #32
 8007896:	d07c      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x19e>
 8007898:	2b20      	cmp	r3, #32
 800789a:	f200 8088 	bhi.w	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d069      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x182>
 80078a2:	2b10      	cmp	r3, #16
 80078a4:	d06e      	beq.n	8007984 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 80078a6:	e082      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6899      	ldr	r1, [r3, #8]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b47      	ldr	r3, [pc, #284]	@ (80079d0 <HAL_TIM_ConfigClockSource+0x1dc>)
 80078b4:	400b      	ands	r3, r1
 80078b6:	6093      	str	r3, [r2, #8]
    break;
 80078b8:	e07a      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6899      	ldr	r1, [r3, #8]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f000 fb86 	bl	8007fda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4b3c      	ldr	r3, [pc, #240]	@ (80079cc <HAL_TIM_ConfigClockSource+0x1d8>)
 80078da:	4013      	ands	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	609a      	str	r2, [r3, #8]
    break;
 80078ee:	e05f      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6899      	ldr	r1, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f000 fb6b 	bl	8007fda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007912:	609a      	str	r2, [r3, #8]
    break;
 8007914:	e04c      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6859      	ldr	r1, [r3, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	461a      	mov	r2, r3
 8007924:	f000 fad2 	bl	8007ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2150      	movs	r1, #80	@ 0x50
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fb33 	bl	8007f9a <TIM_ITRx_SetConfig>
    break;
 8007934:	e03c      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6859      	ldr	r1, [r3, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	461a      	mov	r2, r3
 8007944:	f000 faf5 	bl	8007f32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2160      	movs	r1, #96	@ 0x60
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fb23 	bl	8007f9a <TIM_ITRx_SetConfig>
    break;
 8007954:	e02c      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6859      	ldr	r1, [r3, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	461a      	mov	r2, r3
 8007964:	f000 fab2 	bl	8007ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2140      	movs	r1, #64	@ 0x40
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fb13 	bl	8007f9a <TIM_ITRx_SetConfig>
    break;
 8007974:	e01c      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2100      	movs	r1, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fb0c 	bl	8007f9a <TIM_ITRx_SetConfig>
    break;
 8007982:	e015      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2110      	movs	r1, #16
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fb05 	bl	8007f9a <TIM_ITRx_SetConfig>
    break;
 8007990:	e00e      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2120      	movs	r1, #32
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fafe 	bl	8007f9a <TIM_ITRx_SetConfig>
    break;
 800799e:	e007      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2130      	movs	r1, #48	@ 0x30
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 faf7 	bl	8007f9a <TIM_ITRx_SetConfig>
    break;
 80079ac:	e000      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x1bc>
    break;    
 80079ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  __HAL_UNLOCK(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	fffeff88 	.word	0xfffeff88
 80079d0:	fffefff8 	.word	0xfffefff8

080079d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a47      	ldr	r2, [pc, #284]	@ (8007b08 <TIM_Base_SetConfig+0x134>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <TIM_Base_SetConfig+0x44>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f6:	d00f      	beq.n	8007a18 <TIM_Base_SetConfig+0x44>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a44      	ldr	r2, [pc, #272]	@ (8007b0c <TIM_Base_SetConfig+0x138>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00b      	beq.n	8007a18 <TIM_Base_SetConfig+0x44>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a43      	ldr	r2, [pc, #268]	@ (8007b10 <TIM_Base_SetConfig+0x13c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d007      	beq.n	8007a18 <TIM_Base_SetConfig+0x44>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a42      	ldr	r2, [pc, #264]	@ (8007b14 <TIM_Base_SetConfig+0x140>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_Base_SetConfig+0x44>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a41      	ldr	r2, [pc, #260]	@ (8007b18 <TIM_Base_SetConfig+0x144>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d101      	bne.n	8007a1c <TIM_Base_SetConfig+0x48>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <TIM_Base_SetConfig+0x4a>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d008      	beq.n	8007a34 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a34      	ldr	r2, [pc, #208]	@ (8007b08 <TIM_Base_SetConfig+0x134>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d02b      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a42:	d027      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a31      	ldr	r2, [pc, #196]	@ (8007b0c <TIM_Base_SetConfig+0x138>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d023      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a30      	ldr	r2, [pc, #192]	@ (8007b10 <TIM_Base_SetConfig+0x13c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d01f      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a2f      	ldr	r2, [pc, #188]	@ (8007b14 <TIM_Base_SetConfig+0x140>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d01b      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8007b18 <TIM_Base_SetConfig+0x144>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d017      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a2d      	ldr	r2, [pc, #180]	@ (8007b1c <TIM_Base_SetConfig+0x148>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d013      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b20 <TIM_Base_SetConfig+0x14c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00f      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a2b      	ldr	r2, [pc, #172]	@ (8007b24 <TIM_Base_SetConfig+0x150>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00b      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b28 <TIM_Base_SetConfig+0x154>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d007      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a29      	ldr	r2, [pc, #164]	@ (8007b2c <TIM_Base_SetConfig+0x158>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_Base_SetConfig+0xc0>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a28      	ldr	r2, [pc, #160]	@ (8007b30 <TIM_Base_SetConfig+0x15c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d101      	bne.n	8007a98 <TIM_Base_SetConfig+0xc4>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <TIM_Base_SetConfig+0xc6>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d008      	beq.n	8007ab0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	62da      	str	r2, [r3, #44]	@ 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	629a      	str	r2, [r3, #40]	@ 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8007b08 <TIM_Base_SetConfig+0x134>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_Base_SetConfig+0x110>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a0e      	ldr	r2, [pc, #56]	@ (8007b18 <TIM_Base_SetConfig+0x144>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d101      	bne.n	8007ae8 <TIM_Base_SetConfig+0x114>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <TIM_Base_SetConfig+0x116>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691a      	ldr	r2, [r3, #16]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	615a      	str	r2, [r3, #20]
}
 8007afc:	bf00      	nop
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40010400 	.word	0x40010400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800
 8007b28:	40001800 	.word	0x40001800
 8007b2c:	40001c00 	.word	0x40001c00
 8007b30:	40002000 	.word	0x40002000

08007b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;  
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f023 0201 	bic.w	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8007c14 <TIM_OC1_SetConfig+0xe0>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f023 0302 	bic.w	r3, r3, #2
 8007b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a20      	ldr	r2, [pc, #128]	@ (8007c18 <TIM_OC1_SetConfig+0xe4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC1_SetConfig+0x70>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007c1c <TIM_OC1_SetConfig+0xe8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d101      	bne.n	8007ba8 <TIM_OC1_SetConfig+0x74>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <TIM_OC1_SetConfig+0x76>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d01e      	beq.n	8007bec <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f023 0308 	bic.w	r3, r3, #8
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0304 	bic.w	r3, r3, #4
 8007bc6:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	621a      	str	r2, [r3, #32]
} 
 8007c06:	bf00      	nop
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	fffeff8f 	.word	0xfffeff8f
 8007c18:	40010000 	.word	0x40010000
 8007c1c:	40010400 	.word	0x40010400

08007c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	f023 0210 	bic.w	r2, r3, #16
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4b2c      	ldr	r3, [pc, #176]	@ (8007d08 <TIM_OC2_SetConfig+0xe8>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c62:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f023 0320 	bic.w	r3, r3, #32
 8007c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a21      	ldr	r2, [pc, #132]	@ (8007d0c <TIM_OC2_SetConfig+0xec>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC2_SetConfig+0x74>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a20      	ldr	r2, [pc, #128]	@ (8007d10 <TIM_OC2_SetConfig+0xf0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d101      	bne.n	8007c98 <TIM_OC2_SetConfig+0x78>
 8007c94:	2301      	movs	r3, #1
 8007c96:	e000      	b.n	8007c9a <TIM_OC2_SetConfig+0x7a>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d021      	beq.n	8007ce2 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cb8:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	621a      	str	r2, [r3, #32]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	feff8fff 	.word	0xfeff8fff
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40010400 	.word	0x40010400

08007d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;   
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8007dfc <TIM_OC3_SetConfig+0xe8>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a21      	ldr	r2, [pc, #132]	@ (8007e00 <TIM_OC3_SetConfig+0xec>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d003      	beq.n	8007d86 <TIM_OC3_SetConfig+0x72>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a20      	ldr	r2, [pc, #128]	@ (8007e04 <TIM_OC3_SetConfig+0xf0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d101      	bne.n	8007d8a <TIM_OC3_SetConfig+0x76>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <TIM_OC3_SetConfig+0x78>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d021      	beq.n	8007dd4 <TIM_OC3_SetConfig+0xc0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007daa:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	fffeff8f 	.word	0xfffeff8f
 8007e00:	40010000 	.word	0x40010000
 8007e04:	40010400 	.word	0x40010400

08007e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4b20      	ldr	r3, [pc, #128]	@ (8007ec0 <TIM_OC4_SetConfig+0xb8>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e4a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	031b      	lsls	r3, r3, #12
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a15      	ldr	r2, [pc, #84]	@ (8007ec4 <TIM_OC4_SetConfig+0xbc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_OC4_SetConfig+0x74>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a14      	ldr	r2, [pc, #80]	@ (8007ec8 <TIM_OC4_SetConfig+0xc0>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d101      	bne.n	8007e80 <TIM_OC4_SetConfig+0x78>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <TIM_OC4_SetConfig+0x7a>
 8007e80:	2300      	movs	r3, #0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	019b      	lsls	r3, r3, #6
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	feff8fff 	.word	0xfeff8fff
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40010400 	.word	0x40010400

08007ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007efe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f023 030a 	bic.w	r3, r3, #10
 8007f10:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f023 0210 	bic.w	r2, r3, #16
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	031b      	lsls	r3, r3, #12
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	621a      	str	r2, [r3, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8007fb8:	887b      	ldrh	r3, [r7, #2]
 8007fba:	f043 0307 	orr.w	r3, r3, #7
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	609a      	str	r2, [r3, #8]
}
 8007fce:	bf00      	nop
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b087      	sub	sp, #28
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	021a      	lsls	r2, r3, #8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	431a      	orrs	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4313      	orrs	r3, r2
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	609a      	str	r2, [r3, #8]
} 
 8008012:	bf00      	nop
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008034:	2302      	movs	r3, #2
 8008036:	e03d      	b.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1a      	ldr	r2, [pc, #104]	@ (80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d004      	beq.n	8008064 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a19      	ldr	r2, [pc, #100]	@ (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d108      	bne.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800806a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800808e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	4313      	orrs	r3, r2
 8008098:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
} 
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40010400 	.word	0x40010400

080080c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80080de:	2302      	movs	r3, #2
 80080e0:	e105      	b.n	80082ee <HAL_TIM_PWM_ConfigChannel+0x226>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    
  switch (Channel)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b14      	cmp	r3, #20
 80080f6:	f200 80f0 	bhi.w	80082da <HAL_TIM_PWM_ConfigChannel+0x212>
 80080fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008100 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008155 	.word	0x08008155
 8008104:	080082db 	.word	0x080082db
 8008108:	080082db 	.word	0x080082db
 800810c:	080082db 	.word	0x080082db
 8008110:	08008195 	.word	0x08008195
 8008114:	080082db 	.word	0x080082db
 8008118:	080082db 	.word	0x080082db
 800811c:	080082db 	.word	0x080082db
 8008120:	080081d7 	.word	0x080081d7
 8008124:	080082db 	.word	0x080082db
 8008128:	080082db 	.word	0x080082db
 800812c:	080082db 	.word	0x080082db
 8008130:	08008217 	.word	0x08008217
 8008134:	080082db 	.word	0x080082db
 8008138:	080082db 	.word	0x080082db
 800813c:	080082db 	.word	0x080082db
 8008140:	08008259 	.word	0x08008259
 8008144:	080082db 	.word	0x080082db
 8008148:	080082db 	.word	0x080082db
 800814c:	080082db 	.word	0x080082db
 8008150:	08008299 	.word	0x08008299
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fcea 	bl	8007b34 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0208 	orr.w	r2, r2, #8
 800816e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0204 	bic.w	r2, r2, #4
 800817e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6999      	ldr	r1, [r3, #24]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	691a      	ldr	r2, [r3, #16]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	619a      	str	r2, [r3, #24]
    }
    break;
 8008192:	e0a3      	b.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fd40 	bl	8007c20 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081ae:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6999      	ldr	r1, [r3, #24]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	021a      	lsls	r2, r3, #8
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	619a      	str	r2, [r3, #24]
    }
    break;
 80081d4:	e082      	b.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff fd99 	bl	8007d14 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0208 	orr.w	r2, r2, #8
 80081f0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69da      	ldr	r2, [r3, #28]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0204 	bic.w	r2, r2, #4
 8008200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69d9      	ldr	r1, [r3, #28]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	691a      	ldr	r2, [r3, #16]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	61da      	str	r2, [r3, #28]
    }
    break;
 8008214:	e062      	b.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fdf3 	bl	8007e08 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008230:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69d9      	ldr	r1, [r3, #28]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	021a      	lsls	r2, r3, #8
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	61da      	str	r2, [r3, #28]
    }
    break;
 8008256:	e041      	b.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	4618      	mov	r0, r3
 8008260:	f000 f84a 	bl	80082f8 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f042 0208 	orr.w	r2, r2, #8
 8008272:	655a      	str	r2, [r3, #84]	@ 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0204 	bic.w	r2, r2, #4
 8008282:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    break;
 8008296:	e021      	b.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f882 	bl	80083a8 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082b2:	655a      	str	r2, [r3, #84]	@ 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	021a      	lsls	r2, r3, #8
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    break;
 80082d8:	e000      	b.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80082da:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    
  __HAL_UNLOCK(htim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop

080082f8 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800832a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4b1b      	ldr	r3, [pc, #108]	@ (800839c <TIM_OC5_SetConfig+0xa4>)
 8008330:	4013      	ands	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008344:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	041b      	lsls	r3, r3, #16
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a12      	ldr	r2, [pc, #72]	@ (80083a0 <TIM_OC5_SetConfig+0xa8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_OC5_SetConfig+0x6a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a11      	ldr	r2, [pc, #68]	@ (80083a4 <TIM_OC5_SetConfig+0xac>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d109      	bne.n	8008376 <TIM_OC5_SetConfig+0x7e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008368:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	659a      	str	r2, [r3, #88]	@ 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	621a      	str	r2, [r3, #32]
}
 8008390:	bf00      	nop
 8008392:	371c      	adds	r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	fffeff8f 	.word	0xfffeff8f
 80083a0:	40010000 	.word	0x40010000
 80083a4:	40010400 	.word	0x40010400

080083a8 <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083da:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4b1c      	ldr	r3, [pc, #112]	@ (8008450 <TIM_OC6_SetConfig+0xa8>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083f6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	051b      	lsls	r3, r3, #20
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a13      	ldr	r2, [pc, #76]	@ (8008454 <TIM_OC6_SetConfig+0xac>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_OC6_SetConfig+0x6c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a12      	ldr	r2, [pc, #72]	@ (8008458 <TIM_OC6_SetConfig+0xb0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d109      	bne.n	8008428 <TIM_OC6_SetConfig+0x80>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800841a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	029b      	lsls	r3, r3, #10
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	feff8fff 	.word	0xfeff8fff
 8008454:	40010000 	.word	0x40010000
 8008458:	40010400 	.word	0x40010400

0800845c <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e043      	b.n	80084f6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f002 faea 	bl	800aa5c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2224      	movs	r2, #36	@ 0x24
 800848c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f877 	bl	8008594 <UART_SetConfig>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e022      	b.n	80084f6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fae9 	bl	8008a90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084dc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0201 	orr.w	r2, r2, #1
 80084ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb70 	bl	8008bd4 <UART_CheckIdleState>
 80084f4:	4603      	mov	r3, r0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	603b      	str	r3, [r7, #0]
 800850a:	4613      	mov	r3, r2
 800850c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800850e:	e02c      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d028      	beq.n	800856a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <UART_WaitOnFlagUntilTimeout+0x30>
 800851e:	f7fb f9b5 	bl	800388c <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	429a      	cmp	r2, r3
 800852c:	d81d      	bhi.n	800856a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800853c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2220      	movs	r2, #32
 8008552:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e00f      	b.n	800858a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69da      	ldr	r2, [r3, #28]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4013      	ands	r3, r2
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	bf0c      	ite	eq
 800857a:	2301      	moveq	r3, #1
 800857c:	2300      	movne	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	429a      	cmp	r2, r3
 8008586:	d0c3      	beq.n	8008510 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80085a0:	2310      	movs	r3, #16
 80085a2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4ba0      	ldr	r3, [pc, #640]	@ (8008850 <UART_SetConfig+0x2bc>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	430b      	orrs	r3, r1
 80085da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	430a      	orrs	r2, r1
 8008610:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a8f      	ldr	r2, [pc, #572]	@ (8008854 <UART_SetConfig+0x2c0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d11f      	bne.n	800865c <UART_SetConfig+0xc8>
 800861c:	4b8e      	ldr	r3, [pc, #568]	@ (8008858 <UART_SetConfig+0x2c4>)
 800861e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	2b03      	cmp	r3, #3
 8008628:	f200 814b 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 800862c:	a201      	add	r2, pc, #4	@ (adr r2, 8008634 <UART_SetConfig+0xa0>)
 800862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008632:	bf00      	nop
 8008634:	08008645 	.word	0x08008645
 8008638:	08008651 	.word	0x08008651
 800863c:	0800864b 	.word	0x0800864b
 8008640:	08008657 	.word	0x08008657
 8008644:	2301      	movs	r3, #1
 8008646:	75fb      	strb	r3, [r7, #23]
 8008648:	e13b      	b.n	80088c2 <UART_SetConfig+0x32e>
 800864a:	2302      	movs	r3, #2
 800864c:	75fb      	strb	r3, [r7, #23]
 800864e:	e138      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008650:	2304      	movs	r3, #4
 8008652:	75fb      	strb	r3, [r7, #23]
 8008654:	e135      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008656:	2308      	movs	r3, #8
 8008658:	75fb      	strb	r3, [r7, #23]
 800865a:	e132      	b.n	80088c2 <UART_SetConfig+0x32e>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a7e      	ldr	r2, [pc, #504]	@ (800885c <UART_SetConfig+0x2c8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d130      	bne.n	80086c8 <UART_SetConfig+0x134>
 8008666:	4b7c      	ldr	r3, [pc, #496]	@ (8008858 <UART_SetConfig+0x2c4>)
 8008668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866c:	f003 030c 	and.w	r3, r3, #12
 8008670:	2b0c      	cmp	r3, #12
 8008672:	f200 8126 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 8008676:	a201      	add	r2, pc, #4	@ (adr r2, 800867c <UART_SetConfig+0xe8>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	080086b1 	.word	0x080086b1
 8008680:	080088c3 	.word	0x080088c3
 8008684:	080088c3 	.word	0x080088c3
 8008688:	080088c3 	.word	0x080088c3
 800868c:	080086bd 	.word	0x080086bd
 8008690:	080088c3 	.word	0x080088c3
 8008694:	080088c3 	.word	0x080088c3
 8008698:	080088c3 	.word	0x080088c3
 800869c:	080086b7 	.word	0x080086b7
 80086a0:	080088c3 	.word	0x080088c3
 80086a4:	080088c3 	.word	0x080088c3
 80086a8:	080088c3 	.word	0x080088c3
 80086ac:	080086c3 	.word	0x080086c3
 80086b0:	2300      	movs	r3, #0
 80086b2:	75fb      	strb	r3, [r7, #23]
 80086b4:	e105      	b.n	80088c2 <UART_SetConfig+0x32e>
 80086b6:	2302      	movs	r3, #2
 80086b8:	75fb      	strb	r3, [r7, #23]
 80086ba:	e102      	b.n	80088c2 <UART_SetConfig+0x32e>
 80086bc:	2304      	movs	r3, #4
 80086be:	75fb      	strb	r3, [r7, #23]
 80086c0:	e0ff      	b.n	80088c2 <UART_SetConfig+0x32e>
 80086c2:	2308      	movs	r3, #8
 80086c4:	75fb      	strb	r3, [r7, #23]
 80086c6:	e0fc      	b.n	80088c2 <UART_SetConfig+0x32e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a64      	ldr	r2, [pc, #400]	@ (8008860 <UART_SetConfig+0x2cc>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d11f      	bne.n	8008712 <UART_SetConfig+0x17e>
 80086d2:	4b61      	ldr	r3, [pc, #388]	@ (8008858 <UART_SetConfig+0x2c4>)
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086dc:	2b30      	cmp	r3, #48	@ 0x30
 80086de:	d015      	beq.n	800870c <UART_SetConfig+0x178>
 80086e0:	2b30      	cmp	r3, #48	@ 0x30
 80086e2:	f200 80ee 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d00a      	beq.n	8008700 <UART_SetConfig+0x16c>
 80086ea:	2b20      	cmp	r3, #32
 80086ec:	f200 80e9 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <UART_SetConfig+0x166>
 80086f4:	2b10      	cmp	r3, #16
 80086f6:	d006      	beq.n	8008706 <UART_SetConfig+0x172>
 80086f8:	e0e3      	b.n	80088c2 <UART_SetConfig+0x32e>
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
 80086fe:	e0e0      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008700:	2302      	movs	r3, #2
 8008702:	75fb      	strb	r3, [r7, #23]
 8008704:	e0dd      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008706:	2304      	movs	r3, #4
 8008708:	75fb      	strb	r3, [r7, #23]
 800870a:	e0da      	b.n	80088c2 <UART_SetConfig+0x32e>
 800870c:	2308      	movs	r3, #8
 800870e:	75fb      	strb	r3, [r7, #23]
 8008710:	e0d7      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a53      	ldr	r2, [pc, #332]	@ (8008864 <UART_SetConfig+0x2d0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d11f      	bne.n	800875c <UART_SetConfig+0x1c8>
 800871c:	4b4e      	ldr	r3, [pc, #312]	@ (8008858 <UART_SetConfig+0x2c4>)
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008722:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008726:	2bc0      	cmp	r3, #192	@ 0xc0
 8008728:	d015      	beq.n	8008756 <UART_SetConfig+0x1c2>
 800872a:	2bc0      	cmp	r3, #192	@ 0xc0
 800872c:	f200 80c9 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 8008730:	2b80      	cmp	r3, #128	@ 0x80
 8008732:	d00a      	beq.n	800874a <UART_SetConfig+0x1b6>
 8008734:	2b80      	cmp	r3, #128	@ 0x80
 8008736:	f200 80c4 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <UART_SetConfig+0x1b0>
 800873e:	2b40      	cmp	r3, #64	@ 0x40
 8008740:	d006      	beq.n	8008750 <UART_SetConfig+0x1bc>
 8008742:	e0be      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008744:	2300      	movs	r3, #0
 8008746:	75fb      	strb	r3, [r7, #23]
 8008748:	e0bb      	b.n	80088c2 <UART_SetConfig+0x32e>
 800874a:	2302      	movs	r3, #2
 800874c:	75fb      	strb	r3, [r7, #23]
 800874e:	e0b8      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008750:	2304      	movs	r3, #4
 8008752:	75fb      	strb	r3, [r7, #23]
 8008754:	e0b5      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008756:	2308      	movs	r3, #8
 8008758:	75fb      	strb	r3, [r7, #23]
 800875a:	e0b2      	b.n	80088c2 <UART_SetConfig+0x32e>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a41      	ldr	r2, [pc, #260]	@ (8008868 <UART_SetConfig+0x2d4>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d124      	bne.n	80087b0 <UART_SetConfig+0x21c>
 8008766:	4b3c      	ldr	r3, [pc, #240]	@ (8008858 <UART_SetConfig+0x2c4>)
 8008768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008774:	d019      	beq.n	80087aa <UART_SetConfig+0x216>
 8008776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800877a:	f200 80a2 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 800877e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008782:	d00c      	beq.n	800879e <UART_SetConfig+0x20a>
 8008784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008788:	f200 809b 	bhi.w	80088c2 <UART_SetConfig+0x32e>
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <UART_SetConfig+0x204>
 8008790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008794:	d006      	beq.n	80087a4 <UART_SetConfig+0x210>
 8008796:	e094      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008798:	2300      	movs	r3, #0
 800879a:	75fb      	strb	r3, [r7, #23]
 800879c:	e091      	b.n	80088c2 <UART_SetConfig+0x32e>
 800879e:	2302      	movs	r3, #2
 80087a0:	75fb      	strb	r3, [r7, #23]
 80087a2:	e08e      	b.n	80088c2 <UART_SetConfig+0x32e>
 80087a4:	2304      	movs	r3, #4
 80087a6:	75fb      	strb	r3, [r7, #23]
 80087a8:	e08b      	b.n	80088c2 <UART_SetConfig+0x32e>
 80087aa:	2308      	movs	r3, #8
 80087ac:	75fb      	strb	r3, [r7, #23]
 80087ae:	e088      	b.n	80088c2 <UART_SetConfig+0x32e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a2d      	ldr	r2, [pc, #180]	@ (800886c <UART_SetConfig+0x2d8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d122      	bne.n	8008800 <UART_SetConfig+0x26c>
 80087ba:	4b27      	ldr	r3, [pc, #156]	@ (8008858 <UART_SetConfig+0x2c4>)
 80087bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087c8:	d017      	beq.n	80087fa <UART_SetConfig+0x266>
 80087ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087ce:	d878      	bhi.n	80088c2 <UART_SetConfig+0x32e>
 80087d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d4:	d00b      	beq.n	80087ee <UART_SetConfig+0x25a>
 80087d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087da:	d872      	bhi.n	80088c2 <UART_SetConfig+0x32e>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <UART_SetConfig+0x254>
 80087e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087e4:	d006      	beq.n	80087f4 <UART_SetConfig+0x260>
 80087e6:	e06c      	b.n	80088c2 <UART_SetConfig+0x32e>
 80087e8:	2301      	movs	r3, #1
 80087ea:	75fb      	strb	r3, [r7, #23]
 80087ec:	e069      	b.n	80088c2 <UART_SetConfig+0x32e>
 80087ee:	2302      	movs	r3, #2
 80087f0:	75fb      	strb	r3, [r7, #23]
 80087f2:	e066      	b.n	80088c2 <UART_SetConfig+0x32e>
 80087f4:	2304      	movs	r3, #4
 80087f6:	75fb      	strb	r3, [r7, #23]
 80087f8:	e063      	b.n	80088c2 <UART_SetConfig+0x32e>
 80087fa:	2308      	movs	r3, #8
 80087fc:	75fb      	strb	r3, [r7, #23]
 80087fe:	e060      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1a      	ldr	r2, [pc, #104]	@ (8008870 <UART_SetConfig+0x2dc>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d134      	bne.n	8008874 <UART_SetConfig+0x2e0>
 800880a:	4b13      	ldr	r3, [pc, #76]	@ (8008858 <UART_SetConfig+0x2c4>)
 800880c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008810:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008814:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008818:	d017      	beq.n	800884a <UART_SetConfig+0x2b6>
 800881a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800881e:	d850      	bhi.n	80088c2 <UART_SetConfig+0x32e>
 8008820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008824:	d00b      	beq.n	800883e <UART_SetConfig+0x2aa>
 8008826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800882a:	d84a      	bhi.n	80088c2 <UART_SetConfig+0x32e>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <UART_SetConfig+0x2a4>
 8008830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008834:	d006      	beq.n	8008844 <UART_SetConfig+0x2b0>
 8008836:	e044      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008838:	2300      	movs	r3, #0
 800883a:	75fb      	strb	r3, [r7, #23]
 800883c:	e041      	b.n	80088c2 <UART_SetConfig+0x32e>
 800883e:	2302      	movs	r3, #2
 8008840:	75fb      	strb	r3, [r7, #23]
 8008842:	e03e      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008844:	2304      	movs	r3, #4
 8008846:	75fb      	strb	r3, [r7, #23]
 8008848:	e03b      	b.n	80088c2 <UART_SetConfig+0x32e>
 800884a:	2308      	movs	r3, #8
 800884c:	75fb      	strb	r3, [r7, #23]
 800884e:	e038      	b.n	80088c2 <UART_SetConfig+0x32e>
 8008850:	efff69f3 	.word	0xefff69f3
 8008854:	40011000 	.word	0x40011000
 8008858:	40023800 	.word	0x40023800
 800885c:	40004400 	.word	0x40004400
 8008860:	40004800 	.word	0x40004800
 8008864:	40004c00 	.word	0x40004c00
 8008868:	40005000 	.word	0x40005000
 800886c:	40011400 	.word	0x40011400
 8008870:	40007800 	.word	0x40007800
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a81      	ldr	r2, [pc, #516]	@ (8008a80 <UART_SetConfig+0x4ec>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d121      	bne.n	80088c2 <UART_SetConfig+0x32e>
 800887e:	4b81      	ldr	r3, [pc, #516]	@ (8008a84 <UART_SetConfig+0x4f0>)
 8008880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008888:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800888c:	d017      	beq.n	80088be <UART_SetConfig+0x32a>
 800888e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008892:	d816      	bhi.n	80088c2 <UART_SetConfig+0x32e>
 8008894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008898:	d00b      	beq.n	80088b2 <UART_SetConfig+0x31e>
 800889a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800889e:	d810      	bhi.n	80088c2 <UART_SetConfig+0x32e>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <UART_SetConfig+0x318>
 80088a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088a8:	d006      	beq.n	80088b8 <UART_SetConfig+0x324>
 80088aa:	e00a      	b.n	80088c2 <UART_SetConfig+0x32e>
 80088ac:	2300      	movs	r3, #0
 80088ae:	75fb      	strb	r3, [r7, #23]
 80088b0:	e007      	b.n	80088c2 <UART_SetConfig+0x32e>
 80088b2:	2302      	movs	r3, #2
 80088b4:	75fb      	strb	r3, [r7, #23]
 80088b6:	e004      	b.n	80088c2 <UART_SetConfig+0x32e>
 80088b8:	2304      	movs	r3, #4
 80088ba:	75fb      	strb	r3, [r7, #23]
 80088bc:	e001      	b.n	80088c2 <UART_SetConfig+0x32e>
 80088be:	2308      	movs	r3, #8
 80088c0:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088ca:	d16c      	bne.n	80089a6 <UART_SetConfig+0x412>
  {
    switch (clocksource)
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d854      	bhi.n	800897c <UART_SetConfig+0x3e8>
 80088d2:	a201      	add	r2, pc, #4	@ (adr r2, 80088d8 <UART_SetConfig+0x344>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	08008919 	.word	0x08008919
 80088e0:	08008935 	.word	0x08008935
 80088e4:	0800897d 	.word	0x0800897d
 80088e8:	0800894b 	.word	0x0800894b
 80088ec:	0800897d 	.word	0x0800897d
 80088f0:	0800897d 	.word	0x0800897d
 80088f4:	0800897d 	.word	0x0800897d
 80088f8:	08008967 	.word	0x08008967
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80088fc:	f7fd fe6a 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8008900:	4603      	mov	r3, r0
 8008902:	005a      	lsls	r2, r3, #1
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	441a      	add	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	fbb2 f3f3 	udiv	r3, r2, r3
 8008914:	82bb      	strh	r3, [r7, #20]
      break;
 8008916:	e034      	b.n	8008982 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008918:	f7fd fe70 	bl	80065fc <HAL_RCC_GetPCLK2Freq>
 800891c:	4603      	mov	r3, r0
 800891e:	005a      	lsls	r2, r3, #1
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	441a      	add	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008930:	82bb      	strh	r3, [r7, #20]
      break;
 8008932:	e026      	b.n	8008982 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	085a      	lsrs	r2, r3, #1
 800893a:	4b53      	ldr	r3, [pc, #332]	@ (8008a88 <UART_SetConfig+0x4f4>)
 800893c:	4413      	add	r3, r2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6852      	ldr	r2, [r2, #4]
 8008942:	fbb3 f3f2 	udiv	r3, r3, r2
 8008946:	82bb      	strh	r3, [r7, #20]
      break;
 8008948:	e01b      	b.n	8008982 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800894a:	f7fd fd71 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 800894e:	4603      	mov	r3, r0
 8008950:	005a      	lsls	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	441a      	add	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	82bb      	strh	r3, [r7, #20]
      break;
 8008964:	e00d      	b.n	8008982 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	fbb2 f3f3 	udiv	r3, r2, r3
 8008978:	82bb      	strh	r3, [r7, #20]
      break;
 800897a:	e002      	b.n	8008982 <UART_SetConfig+0x3ee>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	74fb      	strb	r3, [r7, #19]
      break;
 8008980:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008982:	8abb      	ldrh	r3, [r7, #20]
 8008984:	f023 030f 	bic.w	r3, r3, #15
 8008988:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800898a:	8abb      	ldrh	r3, [r7, #20]
 800898c:	105b      	asrs	r3, r3, #1
 800898e:	b29b      	uxth	r3, r3
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	b29a      	uxth	r2, r3
 8008996:	897b      	ldrh	r3, [r7, #10]
 8008998:	4313      	orrs	r3, r2
 800899a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	897a      	ldrh	r2, [r7, #10]
 80089a2:	60da      	str	r2, [r3, #12]
 80089a4:	e067      	b.n	8008a76 <UART_SetConfig+0x4e2>
  }
  else
  {
    switch (clocksource)
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d861      	bhi.n	8008a70 <UART_SetConfig+0x4dc>
 80089ac:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <UART_SetConfig+0x420>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	080089d9 	.word	0x080089d9
 80089b8:	080089f9 	.word	0x080089f9
 80089bc:	08008a19 	.word	0x08008a19
 80089c0:	08008a71 	.word	0x08008a71
 80089c4:	08008a35 	.word	0x08008a35
 80089c8:	08008a71 	.word	0x08008a71
 80089cc:	08008a71 	.word	0x08008a71
 80089d0:	08008a71 	.word	0x08008a71
 80089d4:	08008a55 	.word	0x08008a55
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80089d8:	f7fd fdfc 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 80089dc:	4602      	mov	r2, r0
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	441a      	add	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60da      	str	r2, [r3, #12]
      break;
 80089f6:	e03e      	b.n	8008a76 <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80089f8:	f7fd fe00 	bl	80065fc <HAL_RCC_GetPCLK2Freq>
 80089fc:	4602      	mov	r2, r0
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	085b      	lsrs	r3, r3, #1
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60da      	str	r2, [r3, #12]
      break;
 8008a16:	e02e      	b.n	8008a76 <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	085a      	lsrs	r2, r3, #1
 8008a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8008a8c <UART_SetConfig+0x4f8>)
 8008a20:	4413      	add	r3, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6852      	ldr	r2, [r2, #4]
 8008a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	60da      	str	r2, [r3, #12]
      break;
 8008a32:	e020      	b.n	8008a76 <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008a34:	f7fd fcfc 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	441a      	add	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	60da      	str	r2, [r3, #12]
      break;
 8008a52:	e010      	b.n	8008a76 <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	085b      	lsrs	r3, r3, #1
 8008a5a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60da      	str	r2, [r3, #12]
      break;
 8008a6e:	e002      	b.n	8008a76 <UART_SetConfig+0x4e2>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	74fb      	strb	r3, [r7, #19]
      break;
 8008a74:	bf00      	nop
    }
  }

  return ret;
 8008a76:	7cfb      	ldrb	r3, [r7, #19]

}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	40007c00 	.word	0x40007c00
 8008a84:	40023800 	.word	0x40023800
 8008a88:	01e84800 	.word	0x01e84800
 8008a8c:	00f42400 	.word	0x00f42400

08008a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00a      	beq.n	8008afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	f003 0310 	and.w	r3, r3, #16
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d01a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b8e:	d10a      	bne.n	8008ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	605a      	str	r2, [r3, #4]
  }
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008be6:	f7fa fe51 	bl	800388c <HAL_GetTick>
 8008bea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d10e      	bne.n	8008c18 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bfa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff fc78 	bl	80084fe <UART_WaitOnFlagUntilTimeout>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e00c      	b.n	8008c32 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d027      	beq.n	8008ca6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d1c <FMC_SDRAM_Init+0xe0>)
 8008c60:	4013      	ands	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c6c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008c72:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008c78:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008c7e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008c84:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008c8a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008c90:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8008c96:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e032      	b.n	8008d0c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008cb2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008cbc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8008cc2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <FMC_SDRAM_Init+0xe0>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ce0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008ce6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008cec:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008cf2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008cf8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	ffff8000 	.word	0xffff8000

08008d20 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d02e      	beq.n	8008d98 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008d46:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008d56:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008d60:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008d6a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008d74:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008d7e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	609a      	str	r2, [r3, #8]
 8008d96:	e039      	b.n	8008e0c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4b1e      	ldr	r3, [pc, #120]	@ (8008e1c <FMC_SDRAM_Timing_Init+0xfc>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008db6:	4313      	orrs	r3, r2
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008dca:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008dda:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008de4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008dee:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	ff0f0fff 	.word	0xff0f0fff

08008e20 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008e38:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008e42:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695a      	ldr	r2, [r3, #20]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <lcd_start_page>:
#include "stm32746g_discovery_audio.h"
#include "stlogo.h"

void lcd_start_page(void);

void lcd_start_page(void){
 8008e88:	b598      	push	{r3, r4, r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
 	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8008e8c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8008e90:	2001      	movs	r0, #1
 8008e92:	f7f9 fd43 	bl	800291c <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8008e96:	2001      	movs	r0, #1
 8008e98:	f7f9 fda0 	bl	80029dc <BSP_LCD_SelectLayer>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008e9c:	4828      	ldr	r0, [pc, #160]	@ (8008f40 <lcd_start_page+0xb8>)
 8008e9e:	f7f9 fddf 	bl	8002a60 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	f7f9 fdc1 	bl	8002a2c <BSP_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	f7f9 fdf1 	bl	8002a94 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008eb2:	4824      	ldr	r0, [pc, #144]	@ (8008f44 <lcd_start_page+0xbc>)
 8008eb4:	f7f9 fda2 	bl	80029fc <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G DSP", CENTER_MODE);
 8008eb8:	2301      	movs	r3, #1
 8008eba:	4a23      	ldr	r2, [pc, #140]	@ (8008f48 <lcd_start_page+0xc0>)
 8008ebc:	210a      	movs	r1, #10
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7f9 fe54 	bl	8002b6c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Master ESET", CENTER_MODE);
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	4a21      	ldr	r2, [pc, #132]	@ (8008f4c <lcd_start_page+0xc4>)
 8008ec8:	2123      	movs	r1, #35	@ 0x23
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f7f9 fe4e 	bl	8002b6c <BSP_LCD_DisplayStringAt>

    /* Draw Bitmap */
     //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)logo_usmb);
     BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 8008ed0:	f7f9 fcfc 	bl	80028cc <BSP_LCD_GetXSize>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	3b50      	subs	r3, #80	@ 0x50
 8008ed8:	085b      	lsrs	r3, r3, #1
 8008eda:	4a1d      	ldr	r2, [pc, #116]	@ (8008f50 <lcd_start_page+0xc8>)
 8008edc:	2141      	movs	r1, #65	@ 0x41
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f9 ff54 	bl	8002d8c <BSP_LCD_DrawBitmap>
     BSP_LCD_SetFont(&Font12);
 8008ee4:	481b      	ldr	r0, [pc, #108]	@ (8008f54 <lcd_start_page+0xcc>)
 8008ee6:	f7f9 fdbb 	bl	8002a60 <BSP_LCD_SetFont>
     BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) Master ESET", CENTER_MODE);
 8008eea:	f7f9 fd03 	bl	80028f4 <BSP_LCD_GetYSize>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b14      	subs	r3, #20
 8008ef4:	b299      	uxth	r1, r3
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	4a17      	ldr	r2, [pc, #92]	@ (8008f58 <lcd_start_page+0xd0>)
 8008efa:	2000      	movs	r0, #0
 8008efc:	f7f9 fe36 	bl	8002b6c <BSP_LCD_DisplayStringAt>

     BSP_LCD_SetFont(&Font16);
 8008f00:	4816      	ldr	r0, [pc, #88]	@ (8008f5c <lcd_start_page+0xd4>)
 8008f02:	f7f9 fdad 	bl	8002a60 <BSP_LCD_SetFont>
     BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008f06:	4816      	ldr	r0, [pc, #88]	@ (8008f60 <lcd_start_page+0xd8>)
 8008f08:	f7f9 fd78 	bl	80029fc <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 8008f0c:	f7f9 fcf2 	bl	80028f4 <BSP_LCD_GetYSize>
 8008f10:	4603      	mov	r3, r0
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	330f      	adds	r3, #15
 8008f18:	b29c      	uxth	r4, r3
 8008f1a:	f7f9 fcd7 	bl	80028cc <BSP_LCD_GetXSize>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	233c      	movs	r3, #60	@ 0x3c
 8008f24:	4621      	mov	r1, r4
 8008f26:	2000      	movs	r0, #0
 8008f28:	f7f9 ffe2 	bl	8002ef0 <BSP_LCD_FillRect>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	f7f9 fd64 	bl	80029fc <BSP_LCD_SetTextColor>
     BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008f34:	480a      	ldr	r0, [pc, #40]	@ (8008f60 <lcd_start_page+0xd8>)
 8008f36:	f7f9 fd79 	bl	8002a2c <BSP_LCD_SetBackColor>
     //BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
}
 8008f3a:	bf00      	nop
 8008f3c:	bd98      	pop	{r3, r4, r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000034 	.word	0x20000034
 8008f44:	ff000080 	.word	0xff000080
 8008f48:	0800bf88 	.word	0x0800bf88
 8008f4c:	0800bf98 	.word	0x0800bf98
 8008f50:	0800ead4 	.word	0x0800ead4
 8008f54:	20000044 	.word	0x20000044
 8008f58:	0800bfa4 	.word	0x0800bfa4
 8008f5c:	2000003c 	.word	0x2000003c
 8008f60:	ff0000ff 	.word	0xff0000ff

08008f64 <SCB_EnableICache>:
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f68:	f3bf 8f4f 	dsb	sy
}
 8008f6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008f6e:	f3bf 8f6f 	isb	sy
}
 8008f72:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008f74:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa0 <SCB_EnableICache+0x3c>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008f7c:	4b08      	ldr	r3, [pc, #32]	@ (8008fa0 <SCB_EnableICache+0x3c>)
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	4a07      	ldr	r2, [pc, #28]	@ (8008fa0 <SCB_EnableICache+0x3c>)
 8008f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f88:	f3bf 8f4f 	dsb	sy
}
 8008f8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008f8e:	f3bf 8f6f 	isb	sy
}
 8008f92:	bf00      	nop
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000ed00 	.word	0xe000ed00

08008fa4 <SCB_EnableDCache>:
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8008faa:	4b1f      	ldr	r3, [pc, #124]	@ (8009028 <SCB_EnableDCache+0x84>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008fb2:	f3bf 8f4f 	dsb	sy
}
 8008fb6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009028 <SCB_EnableDCache+0x84>)
 8008fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fbe:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	0b5b      	lsrs	r3, r3, #13
 8008fc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008fc8:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	08db      	lsrs	r3, r3, #3
 8008fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fd2:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8008fdc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008fe2:	4911      	ldr	r1, [pc, #68]	@ (8009028 <SCB_EnableDCache+0x84>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways--);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	1e5a      	subs	r2, r3, #1
 8008fee:	60ba      	str	r2, [r7, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1ef      	bne.n	8008fd4 <SCB_EnableDCache+0x30>
    } while(sets--);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	1e5a      	subs	r2, r3, #1
 8008ff8:	60fa      	str	r2, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e5      	bne.n	8008fca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8008ffe:	f3bf 8f4f 	dsb	sy
}
 8009002:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009004:	4b08      	ldr	r3, [pc, #32]	@ (8009028 <SCB_EnableDCache+0x84>)
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	4a07      	ldr	r2, [pc, #28]	@ (8009028 <SCB_EnableDCache+0x84>)
 800900a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800900e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009010:	f3bf 8f4f 	dsb	sy
}
 8009014:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009016:	f3bf 8f6f 	isb	sy
}
 800901a:	bf00      	nop
}
 800901c:	bf00      	nop
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	e000ed00 	.word	0xe000ed00

0800902c <calculNbEchPeriod>:
			 HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputRight,1,SAI_WAIT);	// Right
	}



uint32_t calculNbEchPeriod (uint32_t frequence){
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]


		return  AUDIOFREQ_16K  /frequence;    //NbEchPerio = Fech /Fnote
 8009034:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800903e:	4618      	mov	r0, r3
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	0000      	movs	r0, r0
 800904c:	0000      	movs	r0, r0
	...

08009050 <initSinusTable>:


}


void initSinusTable(void){
 8009050:	b590      	push	{r4, r7, lr}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
	for (uint16_t i=0; i<BUFFER_SIZE_SINUS;i++){
 8009056:	2300      	movs	r3, #0
 8009058:	80fb      	strh	r3, [r7, #6]
 800905a:	e031      	b.n	80090c0 <initSinusTable+0x70>


	 sinusTable[i]= AMPLITUDE * sin( (2*PI*i) / BUFFER_SIZE_SINUS) ;
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	4618      	mov	r0, r3
 8009060:	f7f7 fa24 	bl	80004ac <__aeabi_i2d>
 8009064:	a320      	add	r3, pc, #128	@ (adr r3, 80090e8 <initSinusTable+0x98>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 fa89 	bl	8000580 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	4b19      	ldr	r3, [pc, #100]	@ (80090e0 <initSinusTable+0x90>)
 800907c:	f7f7 fbaa 	bl	80007d4 <__aeabi_ddiv>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	ec43 2b17 	vmov	d7, r2, r3
 8009088:	eeb0 0a47 	vmov.f32	s0, s14
 800908c:	eef0 0a67 	vmov.f32	s1, s15
 8009090:	f001 ff3e 	bl	800af10 <sin>
 8009094:	ec51 0b10 	vmov	r0, r1, d0
 8009098:	a30f      	add	r3, pc, #60	@ (adr r3, 80090d8 <initSinusTable+0x88>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 fa6f 	bl	8000580 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	88fc      	ldrh	r4, [r7, #6]
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	f7f7 fd02 	bl	8000ab4 <__aeabi_d2iz>
 80090b0:	4603      	mov	r3, r0
 80090b2:	b21a      	sxth	r2, r3
 80090b4:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <initSinusTable+0x94>)
 80090b6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint16_t i=0; i<BUFFER_SIZE_SINUS;i++){
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	3301      	adds	r3, #1
 80090be:	80fb      	strh	r3, [r7, #6]
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80090c6:	d3c9      	bcc.n	800905c <initSinusTable+0xc>

	}
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd90      	pop	{r4, r7, pc}
 80090d2:	bf00      	nop
 80090d4:	f3af 8000 	nop.w
 80090d8:	00000000 	.word	0x00000000
 80090dc:	4072c000 	.word	0x4072c000
 80090e0:	40cf4000 	.word	0x40cf4000
 80090e4:	2000031c 	.word	0x2000031c
 80090e8:	fc8b007a 	.word	0xfc8b007a
 80090ec:	401921fa 	.word	0x401921fa

080090f0 <audioCreate>:



 }

 void audioCreate(void) {
 80090f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80090f4:	b08c      	sub	sp, #48	@ 0x30
 80090f6:	af00      	add	r7, sp, #0
     uint32_t sampleRate = AUDIOFREQ_16K;  // 16 kHz
 80090f8:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 80090fc:	61bb      	str	r3, [r7, #24]
     float duration = 1.0;  // 1 second duration
 80090fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009102:	617b      	str	r3, [r7, #20]
     uint32_t nbrSamples = (uint32_t)(duration * sampleRate);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	ee07 3a90 	vmov	s15, r3
 800910a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800910e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911a:	ee17 3a90 	vmov	r3, s15
 800911e:	613b      	str	r3, [r7, #16]

     // Initialisation des variables d'index
     uint32_t index = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	62fb      	str	r3, [r7, #44]	@ 0x2c

     // Générer le signal 350 Hz avec la méthode classique
     NBR_ECH_PERIO = calculNbEchPeriod(350);
 8009124:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8009128:	f7ff ff80 	bl	800902c <calculNbEchPeriod>
 800912c:	4603      	mov	r3, r0
 800912e:	4a76      	ldr	r2, [pc, #472]	@ (8009308 <audioCreate+0x218>)
 8009130:	6013      	str	r3, [r2, #0]
     for (uint32_t i = 0; i < nbrSamples; i++) {
 8009132:	2300      	movs	r3, #0
 8009134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009136:	e040      	b.n	80091ba <audioCreate+0xca>
         int16_t sample = AMPLITUDE * sin((2 * PI * i) / NBR_ECH_PERIO);
 8009138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800913a:	f7f7 f9a7 	bl	800048c <__aeabi_ui2d>
 800913e:	a36c      	add	r3, pc, #432	@ (adr r3, 80092f0 <audioCreate+0x200>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fa1c 	bl	8000580 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4614      	mov	r4, r2
 800914e:	461d      	mov	r5, r3
 8009150:	4b6d      	ldr	r3, [pc, #436]	@ (8009308 <audioCreate+0x218>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f7f7 f999 	bl	800048c <__aeabi_ui2d>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 fb37 	bl	80007d4 <__aeabi_ddiv>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	ec43 2b17 	vmov	d7, r2, r3
 800916e:	eeb0 0a47 	vmov.f32	s0, s14
 8009172:	eef0 0a67 	vmov.f32	s1, s15
 8009176:	f001 fecb 	bl	800af10 <sin>
 800917a:	ec51 0b10 	vmov	r0, r1, d0
 800917e:	a35e      	add	r3, pc, #376	@ (adr r3, 80092f8 <audioCreate+0x208>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 f9fc 	bl	8000580 <__aeabi_dmul>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4610      	mov	r0, r2
 800918e:	4619      	mov	r1, r3
 8009190:	f7f7 fc90 	bl	8000ab4 <__aeabi_d2iz>
 8009194:	4603      	mov	r3, r0
 8009196:	80fb      	strh	r3, [r7, #6]
         audioTable[index++] += sample;  // Ajouter au tableau audioTable
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800919e:	4a5b      	ldr	r2, [pc, #364]	@ (800930c <audioCreate+0x21c>)
 80091a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80091a4:	b291      	uxth	r1, r2
 80091a6:	88fa      	ldrh	r2, [r7, #6]
 80091a8:	440a      	add	r2, r1
 80091aa:	b292      	uxth	r2, r2
 80091ac:	b211      	sxth	r1, r2
 80091ae:	4a57      	ldr	r2, [pc, #348]	@ (800930c <audioCreate+0x21c>)
 80091b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
     for (uint32_t i = 0; i < nbrSamples; i++) {
 80091b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b6:	3301      	adds	r3, #1
 80091b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d3ba      	bcc.n	8009138 <audioCreate+0x48>
     }

    // Générer le signal 587 Hz avec DDS
     index = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
     for (uint32_t i = 0; i < nbrSamples; i++) {
 80091c6:	2300      	movs	r3, #0
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ca:	e022      	b.n	8009212 <audioCreate+0x122>
         int16_t sample = sinusTable[(i * 587) % BUFFER_SIZE_SINUS];
 80091cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ce:	f240 224b 	movw	r2, #587	@ 0x24b
 80091d2:	fb03 f202 	mul.w	r2, r3, r2
 80091d6:	4b4e      	ldr	r3, [pc, #312]	@ (8009310 <audioCreate+0x220>)
 80091d8:	fba3 1302 	umull	r1, r3, r3, r2
 80091dc:	0a9b      	lsrs	r3, r3, #10
 80091de:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	4a4a      	ldr	r2, [pc, #296]	@ (8009314 <audioCreate+0x224>)
 80091ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ee:	813b      	strh	r3, [r7, #8]
         audioTable[index++] += sample;  // Ajouter au tableau audioTable
 80091f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091f6:	4a45      	ldr	r2, [pc, #276]	@ (800930c <audioCreate+0x21c>)
 80091f8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80091fc:	b291      	uxth	r1, r2
 80091fe:	893a      	ldrh	r2, [r7, #8]
 8009200:	440a      	add	r2, r1
 8009202:	b292      	uxth	r2, r2
 8009204:	b211      	sxth	r1, r2
 8009206:	4a41      	ldr	r2, [pc, #260]	@ (800930c <audioCreate+0x21c>)
 8009208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
     for (uint32_t i = 0; i < nbrSamples; i++) {
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	3301      	adds	r3, #1
 8009210:	627b      	str	r3, [r7, #36]	@ 0x24
 8009212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d3d8      	bcc.n	80091cc <audioCreate+0xdc>
     }

     // Génération du signal 1500 Hz avec une approche IIR (par exemple, un simple oscillateur IIR)
     index = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	62fb      	str	r3, [r7, #44]	@ 0x2c
     float alpha = 0.5;  // Paramètre de contrôle pour le filtre IIR
 800921e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8009222:	60fb      	str	r3, [r7, #12]
     int16_t prevSample = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	847b      	strh	r3, [r7, #34]	@ 0x22
     for (uint32_t i = 0; i < nbrSamples; i++) {
 8009228:	2300      	movs	r3, #0
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	e056      	b.n	80092dc <audioCreate+0x1ec>
         int16_t sample = alpha * prevSample + AMPLITUDE * sin(2 * PI * 1500 * i / sampleRate);
 800922e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800923a:	edd7 7a03 	vldr	s15, [r7, #12]
 800923e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009242:	ee17 0a90 	vmov	r0, s15
 8009246:	f7f7 f943 	bl	80004d0 <__aeabi_f2d>
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	69f8      	ldr	r0, [r7, #28]
 8009250:	f7f7 f91c 	bl	800048c <__aeabi_ui2d>
 8009254:	a32a      	add	r3, pc, #168	@ (adr r3, 8009300 <audioCreate+0x210>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f991 	bl	8000580 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4690      	mov	r8, r2
 8009264:	4699      	mov	r9, r3
 8009266:	69b8      	ldr	r0, [r7, #24]
 8009268:	f7f7 f910 	bl	800048c <__aeabi_ui2d>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4640      	mov	r0, r8
 8009272:	4649      	mov	r1, r9
 8009274:	f7f7 faae 	bl	80007d4 <__aeabi_ddiv>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	ec43 2b17 	vmov	d7, r2, r3
 8009280:	eeb0 0a47 	vmov.f32	s0, s14
 8009284:	eef0 0a67 	vmov.f32	s1, s15
 8009288:	f001 fe42 	bl	800af10 <sin>
 800928c:	ec51 0b10 	vmov	r0, r1, d0
 8009290:	a319      	add	r3, pc, #100	@ (adr r3, 80092f8 <audioCreate+0x208>)
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f7f7 f973 	bl	8000580 <__aeabi_dmul>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4620      	mov	r0, r4
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7f6 ffb7 	bl	8000214 <__adddf3>
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	4610      	mov	r0, r2
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7f7 fc01 	bl	8000ab4 <__aeabi_d2iz>
 80092b2:	4603      	mov	r3, r0
 80092b4:	817b      	strh	r3, [r7, #10]
         audioTable[index++] += sample;
 80092b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092bc:	4a13      	ldr	r2, [pc, #76]	@ (800930c <audioCreate+0x21c>)
 80092be:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80092c2:	b291      	uxth	r1, r2
 80092c4:	897a      	ldrh	r2, [r7, #10]
 80092c6:	440a      	add	r2, r1
 80092c8:	b292      	uxth	r2, r2
 80092ca:	b211      	sxth	r1, r2
 80092cc:	4a0f      	ldr	r2, [pc, #60]	@ (800930c <audioCreate+0x21c>)
 80092ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         prevSample = sample;
 80092d2:	897b      	ldrh	r3, [r7, #10]
 80092d4:	847b      	strh	r3, [r7, #34]	@ 0x22
     for (uint32_t i = 0; i < nbrSamples; i++) {
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	3301      	adds	r3, #1
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d3a4      	bcc.n	800922e <audioCreate+0x13e>
     }
 }
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	3730      	adds	r7, #48	@ 0x30
 80092ea:	46bd      	mov	sp, r7
 80092ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80092f0:	fc8b007a 	.word	0xfc8b007a
 80092f4:	401921fa 	.word	0x401921fa
 80092f8:	00000000 	.word	0x00000000
 80092fc:	4072c000 	.word	0x4072c000
 8009300:	53f7ced9 	.word	0x53f7ced9
 8009304:	40c26863 	.word	0x40c26863
 8009308:	2000fd1c 	.word	0x2000fd1c
 800930c:	2000801c 	.word	0x2000801c
 8009310:	10624dd3 	.word	0x10624dd3
 8009314:	2000031c 	.word	0x2000031c

08009318 <audioTablePlay>:

 void audioTablePlay(void) {
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
	 // jouer l'enssenble du tableau audioTable
     for (uint32_t i = 0; i < BUFFER_SIZE_AUDIO; i++) {
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
 8009322:	e013      	b.n	800934c <audioTablePlay+0x34>
         int16_t sample = audioTable[i];
 8009324:	4a0e      	ldr	r2, [pc, #56]	@ (8009360 <audioTablePlay+0x48>)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800932c:	807b      	strh	r3, [r7, #2]

         // Transmission des echantillions
         HAL_SAI_Transmit(&hsai_BlockA2, (uint8_t *)&sample, 1, SAI_WAIT);  // Left
 800932e:	1cb9      	adds	r1, r7, #2
 8009330:	2364      	movs	r3, #100	@ 0x64
 8009332:	2201      	movs	r2, #1
 8009334:	480b      	ldr	r0, [pc, #44]	@ (8009364 <audioTablePlay+0x4c>)
 8009336:	f7fe f81b 	bl	8007370 <HAL_SAI_Transmit>
         HAL_SAI_Transmit(&hsai_BlockA2, (uint8_t *)&sample, 1, SAI_WAIT);  // Right
 800933a:	1cb9      	adds	r1, r7, #2
 800933c:	2364      	movs	r3, #100	@ 0x64
 800933e:	2201      	movs	r2, #1
 8009340:	4808      	ldr	r0, [pc, #32]	@ (8009364 <audioTablePlay+0x4c>)
 8009342:	f7fe f815 	bl	8007370 <HAL_SAI_Transmit>
     for (uint32_t i = 0; i < BUFFER_SIZE_AUDIO; i++) {
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	3301      	adds	r3, #1
 800934a:	607b      	str	r3, [r7, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009352:	d3e7      	bcc.n	8009324 <audioTablePlay+0xc>
     }
 }
 8009354:	bf00      	nop
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	2000801c 	.word	0x2000801c
 8009364:	2000fe54 	.word	0x2000fe54

08009368 <main>:




int main(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
	SCB_EnableICache();
 800936c:	f7ff fdfa 	bl	8008f64 <SCB_EnableICache>
	SCB_EnableDCache();
 8009370:	f7ff fe18 	bl	8008fa4 <SCB_EnableDCache>
	HAL_Init();
 8009374:	f7fa fa2a 	bl	80037cc <HAL_Init>
	BOARD_Init();
 8009378:	f000 f808 	bl	800938c <BOARD_Init>
	 initSinusTable();
 800937c:	f7ff fe68 	bl	8009050 <initSinusTable>
		//echo();
		//reverberation ();
		//notePlayClassic (300,10);
		//musicPlay(musique);
		//notePlayDDS(300,10);
		audioCreate();
 8009380:	f7ff feb6 	bl	80090f0 <audioCreate>
		audioTablePlay();
 8009384:	f7ff ffc8 	bl	8009318 <audioTablePlay>
		audioCreate();
 8009388:	bf00      	nop
 800938a:	e7f9      	b.n	8009380 <main+0x18>

0800938c <BOARD_Init>:
SDRAM_HandleTypeDef hsdram1;

/***************************  STM32 Configuration  **********************************/
/************************************************************************************/

void BOARD_Init(void){
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8009390:	f000 f840 	bl	8009414 <SystemClock_Config>
	MX_GPIO_Init();
 8009394:	f000 fd42 	bl	8009e1c <MX_GPIO_Init>
	MX_I2C3_Init();
 8009398:	f000 f922 	bl	80095e0 <MX_I2C3_Init>
	MX_SAI2_Init();
 800939c:	f000 f9f0 	bl	8009780 <MX_SAI2_Init>
	MX_TIM1_Init();
 80093a0:	f000 fa9a 	bl	80098d8 <MX_TIM1_Init>
	MX_TIM2_Init();
 80093a4:	f000 faea 	bl	800997c <MX_TIM2_Init>
	MX_TIM5_Init();
 80093a8:	f000 fb84 	bl	8009ab4 <MX_TIM5_Init>
	MX_TIM8_Init();
 80093ac:	f000 fbf8 	bl	8009ba0 <MX_TIM8_Init>
	MX_TIM12_Init();
 80093b0:	f000 fc48 	bl	8009c44 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80093b4:	f000 fc8a 	bl	8009ccc <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80093b8:	f000 fcb8 	bl	8009d2c <MX_USART6_UART_Init>
	MX_FMC_Init();
 80093bc:	f000 fce6 	bl	8009d8c <MX_FMC_Init>
	MX_LTDC_Init();
 80093c0:	f000 f94e 	bl	8009660 <MX_LTDC_Init>
	MX_DMA2D_Init();
 80093c4:	f000 f8da 	bl	800957c <MX_DMA2D_Init>
	MX_TIM3_Init();
 80093c8:	f000 fb26 	bl	8009a18 <MX_TIM3_Init>

	__HAL_SAI_ENABLE(&hsai_BlockA2); // Must be before Initialisation of WM8994
 80093cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009408 <BOARD_Init+0x7c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <BOARD_Init+0x7c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80093da:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2); // Must be before Initialisation of WM8994
 80093dc:	4b0b      	ldr	r3, [pc, #44]	@ (800940c <BOARD_Init+0x80>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	4b0a      	ldr	r3, [pc, #40]	@ (800940c <BOARD_Init+0x80>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80093ea:	601a      	str	r2, [r3, #0]
	wm8994Init();
 80093ec:	f001 f84a 	bl	800a484 <wm8994Init>
	BSP_LCD_Init();
 80093f0:	f7f9 f9fc 	bl	80027ec <BSP_LCD_Init>
	lcd_start_page();
 80093f4:	f7ff fd48 	bl	8008e88 <lcd_start_page>
	HAL_TIM_Base_Start(&htim3);
 80093f8:	4805      	ldr	r0, [pc, #20]	@ (8009410 <BOARD_Init+0x84>)
 80093fa:	f7fe f9b5 	bl	8007768 <HAL_TIM_Base_Start>
	initGpio();			// Toggle PA0 pour la mesure du temps de calcul
 80093fe:	f001 f81b 	bl	800a438 <initGpio>
}
 8009402:	bf00      	nop
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	2000fe54 	.word	0x2000fe54
 800940c:	2000fed8 	.word	0x2000fed8
 8009410:	2000ffdc 	.word	0x2000ffdc

08009414 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b0b4      	sub	sp, #208	@ 0xd0
 8009418:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800941a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800941e:	2230      	movs	r2, #48	@ 0x30
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f001 fd47 	bl	800aeb6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009428:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	2284      	movs	r2, #132	@ 0x84
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f001 fd38 	bl	800aeb6 <memset>


	HAL_PWR_EnableBkUpAccess();
 8009446:	f7fc fc3b 	bl	8005cc0 <HAL_PWR_EnableBkUpAccess>

	__HAL_RCC_PWR_CLK_ENABLE();
 800944a:	4b49      	ldr	r3, [pc, #292]	@ (8009570 <SystemClock_Config+0x15c>)
 800944c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944e:	4a48      	ldr	r2, [pc, #288]	@ (8009570 <SystemClock_Config+0x15c>)
 8009450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009454:	6413      	str	r3, [r2, #64]	@ 0x40
 8009456:	4b46      	ldr	r3, [pc, #280]	@ (8009570 <SystemClock_Config+0x15c>)
 8009458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800945a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800945e:	607b      	str	r3, [r7, #4]
 8009460:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009462:	4b44      	ldr	r3, [pc, #272]	@ (8009574 <SystemClock_Config+0x160>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a43      	ldr	r2, [pc, #268]	@ (8009574 <SystemClock_Config+0x160>)
 8009468:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	4b41      	ldr	r3, [pc, #260]	@ (8009574 <SystemClock_Config+0x160>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800947a:	2301      	movs	r3, #1
 800947c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009484:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009488:	2302      	movs	r3, #2
 800948a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800948e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009492:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8009496:	2319      	movs	r3, #25
 8009498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800949c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80094a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80094a4:	2302      	movs	r3, #2
 80094a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80094aa:	2309      	movs	r3, #9
 80094ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094b0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fc fc63 	bl	8005d80 <HAL_RCC_OscConfig>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 80094c0:	f000 ffdc 	bl	800a47c <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80094c4:	f7fc fc0c 	bl	8005ce0 <HAL_PWREx_EnableOverDrive>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 80094ce:	f000 ffd5 	bl	800a47c <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094d2:	230f      	movs	r3, #15
 80094d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094d8:	2302      	movs	r3, #2
 80094da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094de:	2300      	movs	r3, #0
 80094e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80094e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80094e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80094ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80094f4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80094f8:	2106      	movs	r1, #6
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fc feb0 	bl	8006260 <HAL_RCC_ClockConfig>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <SystemClock_Config+0xf6>
	{
		Error_Handler();
 8009506:	f000 ffb9 	bl	800a47c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800950a:	4b1b      	ldr	r3, [pc, #108]	@ (8009578 <SystemClock_Config+0x164>)
 800950c:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 800950e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8009512:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8009514:	2302      	movs	r3, #2
 8009516:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009518:	2302      	movs	r3, #2
 800951a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 800951c:	2307      	movs	r3, #7
 800951e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8009520:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8009524:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8009526:	2305      	movs	r3, #5
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800952a:	2302      	movs	r3, #2
 800952c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800952e:	2303      	movs	r3, #3
 8009530:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8009532:	2301      	movs	r3, #1
 8009534:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009536:	2301      	movs	r3, #1
 8009538:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800953a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8009540:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009544:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009546:	2300      	movs	r3, #0
 8009548:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800954a:	2300      	movs	r3, #0
 800954c:	663b      	str	r3, [r7, #96]	@ 0x60
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800954e:	2300      	movs	r3, #0
 8009550:	677b      	str	r3, [r7, #116]	@ 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009552:	f107 0308 	add.w	r3, r7, #8
 8009556:	4618      	mov	r0, r3
 8009558:	f7fd f864 	bl	8006624 <HAL_RCCEx_PeriphCLKConfig>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <SystemClock_Config+0x152>
	{
		Error_Handler();
 8009562:	f000 ff8b 	bl	800a47c <Error_Handler>
	}
}
 8009566:	bf00      	nop
 8009568:	37d0      	adds	r7, #208	@ 0xd0
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	40023800 	.word	0x40023800
 8009574:	40007000 	.word	0x40007000
 8009578:	00110848 	.word	0x00110848

0800957c <MX_DMA2D_Init>:


void MX_DMA2D_Init(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0

	hdma2d.Instance = DMA2D;
 8009580:	4b15      	ldr	r3, [pc, #84]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 8009582:	4a16      	ldr	r2, [pc, #88]	@ (80095dc <MX_DMA2D_Init+0x60>)
 8009584:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8009586:	4b14      	ldr	r3, [pc, #80]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 8009588:	2200      	movs	r2, #0
 800958a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800958c:	4b12      	ldr	r3, [pc, #72]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 800958e:	2200      	movs	r2, #0
 8009590:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8009592:	4b11      	ldr	r3, [pc, #68]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 8009594:	2200      	movs	r2, #0
 8009596:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8009598:	4b0f      	ldr	r3, [pc, #60]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 800959a:	2200      	movs	r2, #0
 800959c:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800959e:	4b0e      	ldr	r3, [pc, #56]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80095a4:	4b0c      	ldr	r3, [pc, #48]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80095aa:	4b0b      	ldr	r3, [pc, #44]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80095b0:	4809      	ldr	r0, [pc, #36]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 80095b2:	f7fa fc67 	bl	8003e84 <HAL_DMA2D_Init>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 80095bc:	f000 ff5e 	bl	800a47c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80095c0:	2101      	movs	r1, #1
 80095c2:	4805      	ldr	r0, [pc, #20]	@ (80095d8 <MX_DMA2D_Init+0x5c>)
 80095c4:	f7fa fecc 	bl	8004360 <HAL_DMA2D_ConfigLayer>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80095ce:	f000 ff55 	bl	800a47c <Error_Handler>
	}
}
 80095d2:	bf00      	nop
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	2000fd20 	.word	0x2000fd20
 80095dc:	4002b000 	.word	0x4002b000

080095e0 <MX_I2C3_Init>:


void MX_I2C3_Init(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0

	hi2c3.Instance = I2C3;
 80095e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009654 <MX_I2C3_Init+0x74>)
 80095e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009658 <MX_I2C3_Init+0x78>)
 80095e8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 80095ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009654 <MX_I2C3_Init+0x74>)
 80095ec:	4a1b      	ldr	r2, [pc, #108]	@ (800965c <MX_I2C3_Init+0x7c>)
 80095ee:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80095f0:	4b18      	ldr	r3, [pc, #96]	@ (8009654 <MX_I2C3_Init+0x74>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095f6:	4b17      	ldr	r3, [pc, #92]	@ (8009654 <MX_I2C3_Init+0x74>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095fc:	4b15      	ldr	r3, [pc, #84]	@ (8009654 <MX_I2C3_Init+0x74>)
 80095fe:	2200      	movs	r2, #0
 8009600:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8009602:	4b14      	ldr	r3, [pc, #80]	@ (8009654 <MX_I2C3_Init+0x74>)
 8009604:	2200      	movs	r2, #0
 8009606:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009608:	4b12      	ldr	r3, [pc, #72]	@ (8009654 <MX_I2C3_Init+0x74>)
 800960a:	2200      	movs	r2, #0
 800960c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800960e:	4b11      	ldr	r3, [pc, #68]	@ (8009654 <MX_I2C3_Init+0x74>)
 8009610:	2200      	movs	r2, #0
 8009612:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009614:	4b0f      	ldr	r3, [pc, #60]	@ (8009654 <MX_I2C3_Init+0x74>)
 8009616:	2200      	movs	r2, #0
 8009618:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800961a:	480e      	ldr	r0, [pc, #56]	@ (8009654 <MX_I2C3_Init+0x74>)
 800961c:	f7fb faae 	bl	8004b7c <HAL_I2C_Init>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8009626:	f000 ff29 	bl	800a47c <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800962a:	2100      	movs	r1, #0
 800962c:	4809      	ldr	r0, [pc, #36]	@ (8009654 <MX_I2C3_Init+0x74>)
 800962e:	f7fb ffe5 	bl	80055fc <HAL_I2CEx_ConfigAnalogFilter>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8009638:	f000 ff20 	bl	800a47c <Error_Handler>
	}

	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800963c:	2100      	movs	r1, #0
 800963e:	4805      	ldr	r0, [pc, #20]	@ (8009654 <MX_I2C3_Init+0x74>)
 8009640:	f7fc f827 	bl	8005692 <HAL_I2CEx_ConfigDigitalFilter>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 800964a:	f000 ff17 	bl	800a47c <Error_Handler>
	}

}
 800964e:	bf00      	nop
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	2000fd60 	.word	0x2000fd60
 8009658:	40005c00 	.word	0x40005c00
 800965c:	00c0eaff 	.word	0x00c0eaff

08009660 <MX_LTDC_Init>:


void MX_LTDC_Init(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08e      	sub	sp, #56	@ 0x38
 8009664:	af00      	add	r7, sp, #0

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009666:	1d3b      	adds	r3, r7, #4
 8009668:	2234      	movs	r2, #52	@ 0x34
 800966a:	2100      	movs	r1, #0
 800966c:	4618      	mov	r0, r3
 800966e:	f001 fc22 	bl	800aeb6 <memset>

	hltdc.Instance = LTDC;
 8009672:	4b40      	ldr	r3, [pc, #256]	@ (8009774 <MX_LTDC_Init+0x114>)
 8009674:	4a40      	ldr	r2, [pc, #256]	@ (8009778 <MX_LTDC_Init+0x118>)
 8009676:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009678:	4b3e      	ldr	r3, [pc, #248]	@ (8009774 <MX_LTDC_Init+0x114>)
 800967a:	2200      	movs	r2, #0
 800967c:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800967e:	4b3d      	ldr	r3, [pc, #244]	@ (8009774 <MX_LTDC_Init+0x114>)
 8009680:	2200      	movs	r2, #0
 8009682:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009684:	4b3b      	ldr	r3, [pc, #236]	@ (8009774 <MX_LTDC_Init+0x114>)
 8009686:	2200      	movs	r2, #0
 8009688:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800968a:	4b3a      	ldr	r3, [pc, #232]	@ (8009774 <MX_LTDC_Init+0x114>)
 800968c:	2200      	movs	r2, #0
 800968e:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8009690:	4b38      	ldr	r3, [pc, #224]	@ (8009774 <MX_LTDC_Init+0x114>)
 8009692:	2228      	movs	r2, #40	@ 0x28
 8009694:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8009696:	4b37      	ldr	r3, [pc, #220]	@ (8009774 <MX_LTDC_Init+0x114>)
 8009698:	2209      	movs	r2, #9
 800969a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800969c:	4b35      	ldr	r3, [pc, #212]	@ (8009774 <MX_LTDC_Init+0x114>)
 800969e:	2235      	movs	r2, #53	@ 0x35
 80096a0:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80096a2:	4b34      	ldr	r3, [pc, #208]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096a4:	220b      	movs	r2, #11
 80096a6:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 80096a8:	4b32      	ldr	r3, [pc, #200]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096aa:	f240 2215 	movw	r2, #533	@ 0x215
 80096ae:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 80096b0:	4b30      	ldr	r3, [pc, #192]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096b2:	f240 121b 	movw	r2, #283	@ 0x11b
 80096b6:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 565;
 80096b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096ba:	f240 2235 	movw	r2, #565	@ 0x235
 80096be:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 285;
 80096c0:	4b2c      	ldr	r3, [pc, #176]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096c2:	f240 121d 	movw	r2, #285	@ 0x11d
 80096c6:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80096c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80096d0:	4b28      	ldr	r3, [pc, #160]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80096d8:	4b26      	ldr	r3, [pc, #152]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80096e0:	4824      	ldr	r0, [pc, #144]	@ (8009774 <MX_LTDC_Init+0x114>)
 80096e2:	f7fc f825 	bl	8005730 <HAL_LTDC_Init>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 80096ec:	f000 fec6 	bl	800a47c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 80096f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80096f8:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 80096fe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009702:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8009704:	2302      	movs	r3, #2
 8009706:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8009708:	23ff      	movs	r3, #255	@ 0xff
 800970a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009710:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009714:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009716:	2307      	movs	r3, #7
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800971a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800971e:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 480;
 8009720:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8009724:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 272;
 8009726:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800972a:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	2200      	movs	r2, #0
 8009742:	4619      	mov	r1, r3
 8009744:	480b      	ldr	r0, [pc, #44]	@ (8009774 <MX_LTDC_Init+0x114>)
 8009746:	f7fc f8cf 	bl	80058e8 <HAL_LTDC_ConfigLayer>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8009750:	f000 fe94 	bl	800a47c <Error_Handler>
	}

	__HAL_RCC_LTDC_CLK_ENABLE();
 8009754:	4b09      	ldr	r3, [pc, #36]	@ (800977c <MX_LTDC_Init+0x11c>)
 8009756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009758:	4a08      	ldr	r2, [pc, #32]	@ (800977c <MX_LTDC_Init+0x11c>)
 800975a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800975e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009760:	4b06      	ldr	r3, [pc, #24]	@ (800977c <MX_LTDC_Init+0x11c>)
 8009762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	683b      	ldr	r3, [r7, #0]


}
 800976c:	bf00      	nop
 800976e:	3738      	adds	r7, #56	@ 0x38
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	2000fdac 	.word	0x2000fdac
 8009778:	40016800 	.word	0x40016800
 800977c:	40023800 	.word	0x40023800

08009780 <MX_SAI2_Init>:


void MX_SAI2_Init(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0

	hsai_BlockA2.Instance = SAI2_Block_A;
 8009784:	4b50      	ldr	r3, [pc, #320]	@ (80098c8 <MX_SAI2_Init+0x148>)
 8009786:	4a51      	ldr	r2, [pc, #324]	@ (80098cc <MX_SAI2_Init+0x14c>)
 8009788:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800978a:	4b4f      	ldr	r3, [pc, #316]	@ (80098c8 <MX_SAI2_Init+0x148>)
 800978c:	2200      	movs	r2, #0
 800978e:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8009790:	4b4d      	ldr	r3, [pc, #308]	@ (80098c8 <MX_SAI2_Init+0x148>)
 8009792:	2200      	movs	r2, #0
 8009794:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8009796:	4b4c      	ldr	r3, [pc, #304]	@ (80098c8 <MX_SAI2_Init+0x148>)
 8009798:	2280      	movs	r2, #128	@ 0x80
 800979a:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800979c:	4b4a      	ldr	r3, [pc, #296]	@ (80098c8 <MX_SAI2_Init+0x148>)
 800979e:	2200      	movs	r2, #0
 80097a0:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80097a2:	4b49      	ldr	r3, [pc, #292]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097a4:	2201      	movs	r2, #1
 80097a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80097a8:	4b47      	ldr	r3, [pc, #284]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80097ae:	4b46      	ldr	r3, [pc, #280]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80097b4:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80097b6:	4b44      	ldr	r3, [pc, #272]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80097bc:	4b42      	ldr	r3, [pc, #264]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097be:	2201      	movs	r2, #1
 80097c0:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80097c2:	4b41      	ldr	r3, [pc, #260]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097c4:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80097c8:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80097ca:	4b3f      	ldr	r3, [pc, #252]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80097d0:	4b3d      	ldr	r3, [pc, #244]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80097d6:	4b3c      	ldr	r3, [pc, #240]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097d8:	2200      	movs	r2, #0
 80097da:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80097dc:	4b3a      	ldr	r3, [pc, #232]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097de:	2200      	movs	r2, #0
 80097e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 80097e2:	4b39      	ldr	r3, [pc, #228]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097e4:	2240      	movs	r2, #64	@ 0x40
 80097e6:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80097e8:	4b37      	ldr	r3, [pc, #220]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097ea:	2220      	movs	r2, #32
 80097ec:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80097ee:	4b36      	ldr	r3, [pc, #216]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80097f4:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80097f6:	4b34      	ldr	r3, [pc, #208]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80097fc:	4b32      	ldr	r3, [pc, #200]	@ (80098c8 <MX_SAI2_Init+0x148>)
 80097fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009802:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8009804:	4b30      	ldr	r3, [pc, #192]	@ (80098c8 <MX_SAI2_Init+0x148>)
 8009806:	2200      	movs	r2, #0
 8009808:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800980a:	4b2f      	ldr	r3, [pc, #188]	@ (80098c8 <MX_SAI2_Init+0x148>)
 800980c:	2200      	movs	r2, #0
 800980e:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8009810:	4b2d      	ldr	r3, [pc, #180]	@ (80098c8 <MX_SAI2_Init+0x148>)
 8009812:	2204      	movs	r2, #4
 8009814:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8009816:	4b2c      	ldr	r3, [pc, #176]	@ (80098c8 <MX_SAI2_Init+0x148>)
 8009818:	2205      	movs	r2, #5
 800981a:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800981c:	482a      	ldr	r0, [pc, #168]	@ (80098c8 <MX_SAI2_Init+0x148>)
 800981e:	f7fd fc31 	bl	8007084 <HAL_SAI_Init>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8009828:	f000 fe28 	bl	800a47c <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 800982c:	4b28      	ldr	r3, [pc, #160]	@ (80098d0 <MX_SAI2_Init+0x150>)
 800982e:	4a29      	ldr	r2, [pc, #164]	@ (80098d4 <MX_SAI2_Init+0x154>)
 8009830:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009832:	4b27      	ldr	r3, [pc, #156]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8009838:	4b25      	ldr	r3, [pc, #148]	@ (80098d0 <MX_SAI2_Init+0x150>)
 800983a:	2203      	movs	r2, #3
 800983c:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800983e:	4b24      	ldr	r3, [pc, #144]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009840:	2280      	movs	r2, #128	@ 0x80
 8009842:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009844:	4b22      	ldr	r3, [pc, #136]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009846:	2200      	movs	r2, #0
 8009848:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800984a:	4b21      	ldr	r3, [pc, #132]	@ (80098d0 <MX_SAI2_Init+0x150>)
 800984c:	2201      	movs	r2, #1
 800984e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8009850:	4b1f      	ldr	r3, [pc, #124]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009852:	2201      	movs	r2, #1
 8009854:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009856:	4b1e      	ldr	r3, [pc, #120]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009858:	2200      	movs	r2, #0
 800985a:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800985c:	4b1c      	ldr	r3, [pc, #112]	@ (80098d0 <MX_SAI2_Init+0x150>)
 800985e:	2201      	movs	r2, #1
 8009860:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009862:	4b1b      	ldr	r3, [pc, #108]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009864:	2200      	movs	r2, #0
 8009866:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009868:	4b19      	ldr	r3, [pc, #100]	@ (80098d0 <MX_SAI2_Init+0x150>)
 800986a:	2200      	movs	r2, #0
 800986c:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800986e:	4b18      	ldr	r3, [pc, #96]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009870:	2200      	movs	r2, #0
 8009872:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009874:	4b16      	ldr	r3, [pc, #88]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009876:	2200      	movs	r2, #0
 8009878:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 800987a:	4b15      	ldr	r3, [pc, #84]	@ (80098d0 <MX_SAI2_Init+0x150>)
 800987c:	2240      	movs	r2, #64	@ 0x40
 800987e:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8009880:	4b13      	ldr	r3, [pc, #76]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009882:	2220      	movs	r2, #32
 8009884:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8009886:	4b12      	ldr	r3, [pc, #72]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009888:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800988c:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800988e:	4b10      	ldr	r3, [pc, #64]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009890:	2200      	movs	r2, #0
 8009892:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8009894:	4b0e      	ldr	r3, [pc, #56]	@ (80098d0 <MX_SAI2_Init+0x150>)
 8009896:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800989a:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800989c:	4b0c      	ldr	r3, [pc, #48]	@ (80098d0 <MX_SAI2_Init+0x150>)
 800989e:	2200      	movs	r2, #0
 80098a0:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80098a2:	4b0b      	ldr	r3, [pc, #44]	@ (80098d0 <MX_SAI2_Init+0x150>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 80098a8:	4b09      	ldr	r3, [pc, #36]	@ (80098d0 <MX_SAI2_Init+0x150>)
 80098aa:	2204      	movs	r2, #4
 80098ac:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 80098ae:	4b08      	ldr	r3, [pc, #32]	@ (80098d0 <MX_SAI2_Init+0x150>)
 80098b0:	220a      	movs	r2, #10
 80098b2:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80098b4:	4806      	ldr	r0, [pc, #24]	@ (80098d0 <MX_SAI2_Init+0x150>)
 80098b6:	f7fd fbe5 	bl	8007084 <HAL_SAI_Init>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 80098c0:	f000 fddc 	bl	800a47c <Error_Handler>
	}

}
 80098c4:	bf00      	nop
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	2000fe54 	.word	0x2000fe54
 80098cc:	40015c04 	.word	0x40015c04
 80098d0:	2000fed8 	.word	0x2000fed8
 80098d4:	40015c24 	.word	0x40015c24

080098d8 <MX_TIM1_Init>:


void MX_TIM1_Init(void)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098de:	f107 0310 	add.w	r3, r7, #16
 80098e2:	2200      	movs	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	605a      	str	r2, [r3, #4]
 80098e8:	609a      	str	r2, [r3, #8]
 80098ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098ec:	1d3b      	adds	r3, r7, #4
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	605a      	str	r2, [r3, #4]
 80098f4:	609a      	str	r2, [r3, #8]

	htim1.Instance = TIM1;
 80098f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009974 <MX_TIM1_Init+0x9c>)
 80098f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009978 <MX_TIM1_Init+0xa0>)
 80098fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80098fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <MX_TIM1_Init+0x9c>)
 80098fe:	2200      	movs	r2, #0
 8009900:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009902:	4b1c      	ldr	r3, [pc, #112]	@ (8009974 <MX_TIM1_Init+0x9c>)
 8009904:	2200      	movs	r2, #0
 8009906:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8009908:	4b1a      	ldr	r3, [pc, #104]	@ (8009974 <MX_TIM1_Init+0x9c>)
 800990a:	2200      	movs	r2, #0
 800990c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800990e:	4b19      	ldr	r3, [pc, #100]	@ (8009974 <MX_TIM1_Init+0x9c>)
 8009910:	2200      	movs	r2, #0
 8009912:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8009914:	4b17      	ldr	r3, [pc, #92]	@ (8009974 <MX_TIM1_Init+0x9c>)
 8009916:	2200      	movs	r2, #0
 8009918:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800991a:	4b16      	ldr	r3, [pc, #88]	@ (8009974 <MX_TIM1_Init+0x9c>)
 800991c:	2200      	movs	r2, #0
 800991e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009920:	4814      	ldr	r0, [pc, #80]	@ (8009974 <MX_TIM1_Init+0x9c>)
 8009922:	f7fd fef6 	bl	8007712 <HAL_TIM_Base_Init>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 800992c:	f000 fda6 	bl	800a47c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009934:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009936:	f107 0310 	add.w	r3, r7, #16
 800993a:	4619      	mov	r1, r3
 800993c:	480d      	ldr	r0, [pc, #52]	@ (8009974 <MX_TIM1_Init+0x9c>)
 800993e:	f7fd ff59 	bl	80077f4 <HAL_TIM_ConfigClockSource>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8009948:	f000 fd98 	bl	800a47c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800994c:	2300      	movs	r3, #0
 800994e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009950:	2300      	movs	r3, #0
 8009952:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009958:	1d3b      	adds	r3, r7, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4805      	ldr	r0, [pc, #20]	@ (8009974 <MX_TIM1_Init+0x9c>)
 800995e:	f7fe fb5f 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 8009968:	f000 fd88 	bl	800a47c <Error_Handler>
	}
}
 800996c:	bf00      	nop
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	2000ff5c 	.word	0x2000ff5c
 8009978:	40010000 	.word	0x40010000

0800997c <MX_TIM2_Init>:


void MX_TIM2_Init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009982:	f107 0310 	add.w	r3, r7, #16
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	605a      	str	r2, [r3, #4]
 800998c:	609a      	str	r2, [r3, #8]
 800998e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009990:	1d3b      	adds	r3, r7, #4
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	605a      	str	r2, [r3, #4]
 8009998:	609a      	str	r2, [r3, #8]

	htim2.Instance = TIM2;
 800999a:	4b1e      	ldr	r3, [pc, #120]	@ (8009a14 <MX_TIM2_Init+0x98>)
 800999c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80099a0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32000;
 80099a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099a4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80099a8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 80099b0:	4b18      	ldr	r3, [pc, #96]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099b6:	4b17      	ldr	r3, [pc, #92]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80099bc:	4b15      	ldr	r3, [pc, #84]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099be:	2280      	movs	r2, #128	@ 0x80
 80099c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80099c2:	4814      	ldr	r0, [pc, #80]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099c4:	f7fd fea5 	bl	8007712 <HAL_TIM_Base_Init>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80099ce:	f000 fd55 	bl	800a47c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099d6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80099d8:	f107 0310 	add.w	r3, r7, #16
 80099dc:	4619      	mov	r1, r3
 80099de:	480d      	ldr	r0, [pc, #52]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099e0:	f7fd ff08 	bl	80077f4 <HAL_TIM_ConfigClockSource>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80099ea:	f000 fd47 	bl	800a47c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099ee:	2300      	movs	r3, #0
 80099f0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80099f6:	1d3b      	adds	r3, r7, #4
 80099f8:	4619      	mov	r1, r3
 80099fa:	4806      	ldr	r0, [pc, #24]	@ (8009a14 <MX_TIM2_Init+0x98>)
 80099fc:	f7fe fb10 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8009a06:	f000 fd39 	bl	800a47c <Error_Handler>
	}

}
 8009a0a:	bf00      	nop
 8009a0c:	3720      	adds	r7, #32
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	2000ff9c 	.word	0x2000ff9c

08009a18 <MX_TIM3_Init>:


void MX_TIM3_Init(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a1e:	f107 0310 	add.w	r3, r7, #16
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	605a      	str	r2, [r3, #4]
 8009a28:	609a      	str	r2, [r3, #8]
 8009a2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a2c:	1d3b      	adds	r3, r7, #4
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	605a      	str	r2, [r3, #4]
 8009a34:	609a      	str	r2, [r3, #8]

	htim3.Instance = TIM3;
 8009a36:	4b1d      	ldr	r3, [pc, #116]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a38:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab0 <MX_TIM3_Init+0x98>)
 8009a3a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 8009a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a3e:	2263      	movs	r2, #99	@ 0x63
 8009a40:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a42:	4b1a      	ldr	r3, [pc, #104]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8009a48:	4b18      	ldr	r3, [pc, #96]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a4e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a50:	4b16      	ldr	r3, [pc, #88]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a56:	4b15      	ldr	r3, [pc, #84]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009a5c:	4813      	ldr	r0, [pc, #76]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a5e:	f7fd fe58 	bl	8007712 <HAL_TIM_Base_Init>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8009a68:	f000 fd08 	bl	800a47c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a70:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009a72:	f107 0310 	add.w	r3, r7, #16
 8009a76:	4619      	mov	r1, r3
 8009a78:	480c      	ldr	r0, [pc, #48]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a7a:	f7fd febb 	bl	80077f4 <HAL_TIM_ConfigClockSource>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8009a84:	f000 fcfa 	bl	800a47c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009a90:	1d3b      	adds	r3, r7, #4
 8009a92:	4619      	mov	r1, r3
 8009a94:	4805      	ldr	r0, [pc, #20]	@ (8009aac <MX_TIM3_Init+0x94>)
 8009a96:	f7fe fac3 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8009aa0:	f000 fcec 	bl	800a47c <Error_Handler>
	}

}
 8009aa4:	bf00      	nop
 8009aa6:	3720      	adds	r7, #32
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	2000ffdc 	.word	0x2000ffdc
 8009ab0:	40000400 	.word	0x40000400

08009ab4 <MX_TIM5_Init>:


void MX_TIM5_Init(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08e      	sub	sp, #56	@ 0x38
 8009ab8:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
 8009ac4:	609a      	str	r2, [r3, #8]
 8009ac6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ac8:	f107 031c 	add.w	r3, r7, #28
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	605a      	str	r2, [r3, #4]
 8009adc:	609a      	str	r2, [r3, #8]
 8009ade:	60da      	str	r2, [r3, #12]
 8009ae0:	611a      	str	r2, [r3, #16]
 8009ae2:	615a      	str	r2, [r3, #20]
 8009ae4:	619a      	str	r2, [r3, #24]


	htim5.Instance = TIM5;
 8009ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8009b9c <MX_TIM5_Init+0xe8>)
 8009aea:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8009aec:	4b2a      	ldr	r3, [pc, #168]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009af2:	4b29      	ldr	r3, [pc, #164]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0;
 8009af8:	4b27      	ldr	r3, [pc, #156]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009afe:	4b26      	ldr	r3, [pc, #152]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b04:	4b24      	ldr	r3, [pc, #144]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009b0a:	4823      	ldr	r0, [pc, #140]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b0c:	f7fd fe01 	bl	8007712 <HAL_TIM_Base_Init>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <MX_TIM5_Init+0x66>
	{
		Error_Handler();
 8009b16:	f000 fcb1 	bl	800a47c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009b20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009b24:	4619      	mov	r1, r3
 8009b26:	481c      	ldr	r0, [pc, #112]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b28:	f7fd fe64 	bl	80077f4 <HAL_TIM_ConfigClockSource>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 8009b32:	f000 fca3 	bl	800a47c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8009b36:	4818      	ldr	r0, [pc, #96]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b38:	f7fd fe31 	bl	800779e <HAL_TIM_PWM_Init>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <MX_TIM5_Init+0x92>
	{
		Error_Handler();
 8009b42:	f000 fc9b 	bl	800a47c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009b4e:	f107 031c 	add.w	r3, r7, #28
 8009b52:	4619      	mov	r1, r3
 8009b54:	4810      	ldr	r0, [pc, #64]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b56:	f7fe fa63 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <MX_TIM5_Init+0xb0>
	{
		Error_Handler();
 8009b60:	f000 fc8c 	bl	800a47c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b64:	2360      	movs	r3, #96	@ 0x60
 8009b66:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b70:	2300      	movs	r3, #0
 8009b72:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009b74:	463b      	mov	r3, r7
 8009b76:	220c      	movs	r2, #12
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4807      	ldr	r0, [pc, #28]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b7c:	f7fe faa4 	bl	80080c8 <HAL_TIM_PWM_ConfigChannel>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <MX_TIM5_Init+0xd6>
	{
		Error_Handler();
 8009b86:	f000 fc79 	bl	800a47c <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim5);
 8009b8a:	4803      	ldr	r0, [pc, #12]	@ (8009b98 <MX_TIM5_Init+0xe4>)
 8009b8c:	f000 ff08 	bl	800a9a0 <HAL_TIM_MspPostInit>

}
 8009b90:	bf00      	nop
 8009b92:	3738      	adds	r7, #56	@ 0x38
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	2001001c 	.word	0x2001001c
 8009b9c:	40000c00 	.word	0x40000c00

08009ba0 <MX_TIM8_Init>:


void MX_TIM8_Init(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ba6:	f107 0310 	add.w	r3, r7, #16
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	605a      	str	r2, [r3, #4]
 8009bb0:	609a      	str	r2, [r3, #8]
 8009bb2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bb4:	1d3b      	adds	r3, r7, #4
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	605a      	str	r2, [r3, #4]
 8009bbc:	609a      	str	r2, [r3, #8]

	htim8.Instance = TIM8;
 8009bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009c40 <MX_TIM8_Init+0xa0>)
 8009bc2:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8009bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bca:	4b1c      	ldr	r3, [pc, #112]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 0;
 8009bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bd6:	4b19      	ldr	r3, [pc, #100]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8009bdc:	4b17      	ldr	r3, [pc, #92]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009be2:	4b16      	ldr	r3, [pc, #88]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009be8:	4814      	ldr	r0, [pc, #80]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009bea:	f7fd fd92 	bl	8007712 <HAL_TIM_Base_Init>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_TIM8_Init+0x58>
	{
		Error_Handler();
 8009bf4:	f000 fc42 	bl	800a47c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bfc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009bfe:	f107 0310 	add.w	r3, r7, #16
 8009c02:	4619      	mov	r1, r3
 8009c04:	480d      	ldr	r0, [pc, #52]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009c06:	f7fd fdf5 	bl	80077f4 <HAL_TIM_ConfigClockSource>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <MX_TIM8_Init+0x74>
	{
		Error_Handler();
 8009c10:	f000 fc34 	bl	800a47c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c14:	2300      	movs	r3, #0
 8009c16:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009c20:	1d3b      	adds	r3, r7, #4
 8009c22:	4619      	mov	r1, r3
 8009c24:	4805      	ldr	r0, [pc, #20]	@ (8009c3c <MX_TIM8_Init+0x9c>)
 8009c26:	f7fe f9fb 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <MX_TIM8_Init+0x94>
	{
		Error_Handler();
 8009c30:	f000 fc24 	bl	800a47c <Error_Handler>
	}

}
 8009c34:	bf00      	nop
 8009c36:	3720      	adds	r7, #32
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	2001005c 	.word	0x2001005c
 8009c40:	40010400 	.word	0x40010400

08009c44 <MX_TIM12_Init>:


void MX_TIM12_Init(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af00      	add	r7, sp, #0

	TIM_OC_InitTypeDef sConfigOC = {0};
 8009c4a:	1d3b      	adds	r3, r7, #4
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	609a      	str	r2, [r3, #8]
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	611a      	str	r2, [r3, #16]
 8009c58:	615a      	str	r2, [r3, #20]
 8009c5a:	619a      	str	r2, [r3, #24]

	htim12.Instance = TIM12;
 8009c5c:	4b19      	ldr	r3, [pc, #100]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009cc8 <MX_TIM12_Init+0x84>)
 8009c60:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8009c62:	4b18      	ldr	r3, [pc, #96]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c68:	4b16      	ldr	r3, [pc, #88]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 0;
 8009c6e:	4b15      	ldr	r3, [pc, #84]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c74:	4b13      	ldr	r3, [pc, #76]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c7a:	4b12      	ldr	r3, [pc, #72]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8009c80:	4810      	ldr	r0, [pc, #64]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009c82:	f7fd fd8c 	bl	800779e <HAL_TIM_PWM_Init>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 8009c8c:	f000 fbf6 	bl	800a47c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c90:	2360      	movs	r3, #96	@ 0x60
 8009c92:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ca0:	1d3b      	adds	r3, r7, #4
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4807      	ldr	r0, [pc, #28]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009ca8:	f7fe fa0e 	bl	80080c8 <HAL_TIM_PWM_ConfigChannel>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 8009cb2:	f000 fbe3 	bl	800a47c <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim12);
 8009cb6:	4803      	ldr	r0, [pc, #12]	@ (8009cc4 <MX_TIM12_Init+0x80>)
 8009cb8:	f000 fe72 	bl	800a9a0 <HAL_TIM_MspPostInit>

}
 8009cbc:	bf00      	nop
 8009cbe:	3720      	adds	r7, #32
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	2001009c 	.word	0x2001009c
 8009cc8:	40001800 	.word	0x40001800

08009ccc <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8009cd0:	4b14      	ldr	r3, [pc, #80]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009cd2:	4a15      	ldr	r2, [pc, #84]	@ (8009d28 <MX_USART1_UART_Init+0x5c>)
 8009cd4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8009cd6:	4b13      	ldr	r3, [pc, #76]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009cdc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009cde:	4b11      	ldr	r3, [pc, #68]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8009ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8009cea:	4b0e      	ldr	r3, [pc, #56]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009cf2:	220c      	movs	r2, #12
 8009cf4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009cfc:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009d02:	4b08      	ldr	r3, [pc, #32]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009d08:	4b06      	ldr	r3, [pc, #24]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009d0e:	4805      	ldr	r0, [pc, #20]	@ (8009d24 <MX_USART1_UART_Init+0x58>)
 8009d10:	f7fe fba4 	bl	800845c <HAL_UART_Init>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8009d1a:	f000 fbaf 	bl	800a47c <Error_Handler>
	}


}
 8009d1e:	bf00      	nop
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200100dc 	.word	0x200100dc
 8009d28:	40011000 	.word	0x40011000

08009d2c <MX_USART6_UART_Init>:


void MX_USART6_UART_Init(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 8009d30:	4b14      	ldr	r3, [pc, #80]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d32:	4a15      	ldr	r2, [pc, #84]	@ (8009d88 <MX_USART6_UART_Init+0x5c>)
 8009d34:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8009d36:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009d3c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009d3e:	4b11      	ldr	r3, [pc, #68]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8009d44:	4b0f      	ldr	r3, [pc, #60]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8009d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8009d50:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d52:	220c      	movs	r2, #12
 8009d54:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d56:	4b0b      	ldr	r3, [pc, #44]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d5c:	4b09      	ldr	r3, [pc, #36]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009d62:	4b08      	ldr	r3, [pc, #32]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009d68:	4b06      	ldr	r3, [pc, #24]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8009d6e:	4805      	ldr	r0, [pc, #20]	@ (8009d84 <MX_USART6_UART_Init+0x58>)
 8009d70:	f7fe fb74 	bl	800845c <HAL_UART_Init>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8009d7a:	f000 fb7f 	bl	800a47c <Error_Handler>
	}


}
 8009d7e:	bf00      	nop
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2001014c 	.word	0x2001014c
 8009d88:	40011400 	.word	0x40011400

08009d8c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming;

	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009d92:	4b20      	ldr	r3, [pc, #128]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009d94:	4a20      	ldr	r2, [pc, #128]	@ (8009e18 <MX_FMC_Init+0x8c>)
 8009d96:	601a      	str	r2, [r3, #0]

	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8009d98:	4b1e      	ldr	r3, [pc, #120]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8009da4:	4b1b      	ldr	r3, [pc, #108]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009da6:	2204      	movs	r2, #4
 8009da8:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8009daa:	4b1a      	ldr	r3, [pc, #104]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009dac:	2210      	movs	r2, #16
 8009dae:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009db0:	4b18      	ldr	r3, [pc, #96]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009db2:	2240      	movs	r2, #64	@ 0x40
 8009db4:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8009db6:	4b17      	ldr	r3, [pc, #92]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009db8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009dbc:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009dbe:	4b15      	ldr	r3, [pc, #84]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8009dc4:	4b13      	ldr	r3, [pc, #76]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dca:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8009dcc:	4b11      	ldr	r3, [pc, #68]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009dce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009dd2:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8009dde:	2307      	movs	r3, #7
 8009de0:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8009de2:	2304      	movs	r3, #4
 8009de4:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8009de6:	2307      	movs	r3, #7
 8009de8:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8009dea:	2303      	movs	r3, #3
 8009dec:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8009dee:	2302      	movs	r3, #2
 8009df0:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8009df2:	2302      	movs	r3, #2
 8009df4:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009df6:	1d3b      	adds	r3, r7, #4
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4806      	ldr	r0, [pc, #24]	@ (8009e14 <MX_FMC_Init+0x88>)
 8009dfc:	f7fd fc0a 	bl	8007614 <HAL_SDRAM_Init>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <MX_FMC_Init+0x7e>
	{
		Error_Handler( );
 8009e06:	f000 fb39 	bl	800a47c <Error_Handler>
	}

}
 8009e0a:	bf00      	nop
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200101bc 	.word	0x200101bc
 8009e18:	a0000140 	.word	0xa0000140

08009e1c <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b090      	sub	sp, #64	@ 0x40
 8009e20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	605a      	str	r2, [r3, #4]
 8009e2c:	609a      	str	r2, [r3, #8]
 8009e2e:	60da      	str	r2, [r3, #12]
 8009e30:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8009e32:	4bae      	ldr	r3, [pc, #696]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e36:	4aad      	ldr	r2, [pc, #692]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e38:	f043 0310 	orr.w	r3, r3, #16
 8009e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e3e:	4bab      	ldr	r3, [pc, #684]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e42:	f003 0310 	and.w	r3, r3, #16
 8009e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8009e4a:	4ba8      	ldr	r3, [pc, #672]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e4e:	4aa7      	ldr	r2, [pc, #668]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e56:	4ba5      	ldr	r3, [pc, #660]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009e62:	4ba2      	ldr	r3, [pc, #648]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e66:	4aa1      	ldr	r2, [pc, #644]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e6e:	4b9f      	ldr	r3, [pc, #636]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	623b      	str	r3, [r7, #32]
 8009e78:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8009e7a:	4b9c      	ldr	r3, [pc, #624]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7e:	4a9b      	ldr	r2, [pc, #620]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e80:	f043 0308 	orr.w	r3, r3, #8
 8009e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e86:	4b99      	ldr	r3, [pc, #612]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	61fb      	str	r3, [r7, #28]
 8009e90:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009e92:	4b96      	ldr	r3, [pc, #600]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e96:	4a95      	ldr	r2, [pc, #596]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009e98:	f043 0304 	orr.w	r3, r3, #4
 8009e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e9e:	4b93      	ldr	r3, [pc, #588]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	61bb      	str	r3, [r7, #24]
 8009ea8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009eaa:	4b90      	ldr	r3, [pc, #576]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eae:	4a8f      	ldr	r2, [pc, #572]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009eb6:	4b8d      	ldr	r3, [pc, #564]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8009ec2:	4b8a      	ldr	r3, [pc, #552]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec6:	4a89      	ldr	r2, [pc, #548]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ec8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ece:	4b87      	ldr	r3, [pc, #540]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ed6:	613b      	str	r3, [r7, #16]
 8009ed8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8009eda:	4b84      	ldr	r3, [pc, #528]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ede:	4a83      	ldr	r2, [pc, #524]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ee6:	4b81      	ldr	r3, [pc, #516]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8009ef2:	4b7e      	ldr	r3, [pc, #504]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef6:	4a7d      	ldr	r2, [pc, #500]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009efe:	4b7b      	ldr	r3, [pc, #492]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f06:	60bb      	str	r3, [r7, #8]
 8009f08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8009f0a:	4b78      	ldr	r3, [pc, #480]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0e:	4a77      	ldr	r2, [pc, #476]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009f10:	f043 0320 	orr.w	r3, r3, #32
 8009f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f16:	4b75      	ldr	r3, [pc, #468]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	607b      	str	r3, [r7, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8009f22:	4b72      	ldr	r3, [pc, #456]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f26:	4a71      	ldr	r2, [pc, #452]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f2e:	4b6f      	ldr	r3, [pc, #444]	@ (800a0ec <MX_GPIO_Init+0x2d0>)
 8009f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f36:	603b      	str	r3, [r7, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	2120      	movs	r1, #32
 8009f3e:	486c      	ldr	r0, [pc, #432]	@ (800a0f0 <MX_GPIO_Init+0x2d4>)
 8009f40:	f7fa fe02 	bl	8004b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8009f44:	2200      	movs	r2, #0
 8009f46:	210e      	movs	r1, #14
 8009f48:	486a      	ldr	r0, [pc, #424]	@ (800a0f4 <MX_GPIO_Init+0x2d8>)
 8009f4a:	f7fa fdfd 	bl	8004b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8009f4e:	2201      	movs	r2, #1
 8009f50:	2108      	movs	r1, #8
 8009f52:	4869      	ldr	r0, [pc, #420]	@ (800a0f8 <MX_GPIO_Init+0x2dc>)
 8009f54:	f7fa fdf8 	bl	8004b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009f5e:	4865      	ldr	r0, [pc, #404]	@ (800a0f4 <MX_GPIO_Init+0x2d8>)
 8009f60:	f7fa fdf2 	bl	8004b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8009f64:	2200      	movs	r2, #0
 8009f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009f6a:	4864      	ldr	r0, [pc, #400]	@ (800a0fc <MX_GPIO_Init+0x2e0>)
 8009f6c:	f7fa fdec 	bl	8004b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8009f70:	2200      	movs	r2, #0
 8009f72:	21c8      	movs	r1, #200	@ 0xc8
 8009f74:	4862      	ldr	r0, [pc, #392]	@ (800a100 <MX_GPIO_Init+0x2e4>)
 8009f76:	f7fa fde7 	bl	8004b48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8009f7a:	2308      	movs	r3, #8
 8009f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009f86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	485d      	ldr	r0, [pc, #372]	@ (800a104 <MX_GPIO_Init+0x2e8>)
 8009f8e:	f7fa fb23 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8009f92:	2304      	movs	r3, #4
 8009f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f96:	2302      	movs	r3, #2
 8009f98:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009fa2:	2309      	movs	r3, #9
 8009fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8009fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009faa:	4619      	mov	r1, r3
 8009fac:	4855      	ldr	r0, [pc, #340]	@ (800a104 <MX_GPIO_Init+0x2e8>)
 8009fae:	f7fa fb13 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8009fb2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009fc4:	230b      	movs	r3, #11
 8009fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009fc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009fcc:	4619      	mov	r1, r3
 8009fce:	484c      	ldr	r0, [pc, #304]	@ (800a100 <MX_GPIO_Init+0x2e4>)
 8009fd0:	f7fa fb02 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8009fd4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009fda:	2312      	movs	r3, #18
 8009fdc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009fe6:	2304      	movs	r3, #4
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4845      	ldr	r0, [pc, #276]	@ (800a108 <MX_GPIO_Init+0x2ec>)
 8009ff2:	f7fa faf1 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8009ff6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8009ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a000:	2300      	movs	r3, #0
 800a002:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a004:	2303      	movs	r3, #3
 800a006:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a008:	230a      	movs	r3, #10
 800a00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a00c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a010:	4619      	mov	r1, r3
 800a012:	483d      	ldr	r0, [pc, #244]	@ (800a108 <MX_GPIO_Init+0x2ec>)
 800a014:	f7fa fae0 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800a018:	2380      	movs	r3, #128	@ 0x80
 800a01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a01c:	2302      	movs	r3, #2
 800a01e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a020:	2300      	movs	r3, #0
 800a022:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a024:	2300      	movs	r3, #0
 800a026:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800a028:	2308      	movs	r3, #8
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800a02c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a030:	4619      	mov	r1, r3
 800a032:	482f      	ldr	r0, [pc, #188]	@ (800a0f0 <MX_GPIO_Init+0x2d4>)
 800a034:	f7fa fad0 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800a038:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800a03c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a03e:	2302      	movs	r3, #2
 800a040:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a042:	2300      	movs	r3, #0
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a046:	2303      	movs	r3, #3
 800a048:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a04a:	230c      	movs	r3, #12
 800a04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a04e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a052:	4619      	mov	r1, r3
 800a054:	482d      	ldr	r0, [pc, #180]	@ (800a10c <MX_GPIO_Init+0x2f0>)
 800a056:	f7fa fabf 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800a05a:	2360      	movs	r3, #96	@ 0x60
 800a05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a05e:	2302      	movs	r3, #2
 800a060:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a062:	2300      	movs	r3, #0
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a066:	2300      	movs	r3, #0
 800a068:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a06a:	230d      	movs	r3, #13
 800a06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a06e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a072:	4619      	mov	r1, r3
 800a074:	4823      	ldr	r0, [pc, #140]	@ (800a104 <MX_GPIO_Init+0x2e8>)
 800a076:	f7fa faaf 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800a07a:	2340      	movs	r3, #64	@ 0x40
 800a07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a07e:	2302      	movs	r3, #2
 800a080:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a082:	2300      	movs	r3, #0
 800a084:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a086:	2303      	movs	r3, #3
 800a088:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800a08a:	230a      	movs	r3, #10
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800a08e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a092:	4619      	mov	r1, r3
 800a094:	481c      	ldr	r0, [pc, #112]	@ (800a108 <MX_GPIO_Init+0x2ec>)
 800a096:	f7fa fa9f 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800a09a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a0a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4818      	ldr	r0, [pc, #96]	@ (800a110 <MX_GPIO_Init+0x2f4>)
 800a0b0:	f7fa fa92 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800a0b4:	2340      	movs	r3, #64	@ 0x40
 800a0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a0b8:	4b16      	ldr	r3, [pc, #88]	@ (800a114 <MX_GPIO_Init+0x2f8>)
 800a0ba:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800a0c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	480a      	ldr	r0, [pc, #40]	@ (800a0f0 <MX_GPIO_Init+0x2d4>)
 800a0c8:	f7fa fa86 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800a0cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0de:	230a      	movs	r3, #10
 800a0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	e016      	b.n	800a118 <MX_GPIO_Init+0x2fc>
 800a0ea:	bf00      	nop
 800a0ec:	40023800 	.word	0x40023800
 800a0f0:	40020c00 	.word	0x40020c00
 800a0f4:	40022000 	.word	0x40022000
 800a0f8:	40022800 	.word	0x40022800
 800a0fc:	40021c00 	.word	0x40021c00
 800a100:	40021800 	.word	0x40021800
 800a104:	40021000 	.word	0x40021000
 800a108:	40020400 	.word	0x40020400
 800a10c:	40020800 	.word	0x40020800
 800a110:	40022400 	.word	0x40022400
 800a114:	10120000 	.word	0x10120000
 800a118:	48bb      	ldr	r0, [pc, #748]	@ (800a408 <MX_GPIO_Init+0x5ec>)
 800a11a:	f7fa fa5d 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a11e:	2320      	movs	r3, #32
 800a120:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a122:	2301      	movs	r3, #1
 800a124:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a126:	2300      	movs	r3, #0
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a12a:	2300      	movs	r3, #0
 800a12c:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a12e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a132:	4619      	mov	r1, r3
 800a134:	48b5      	ldr	r0, [pc, #724]	@ (800a40c <MX_GPIO_Init+0x5f0>)
 800a136:	f7fa fa4f 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800a13a:	2308      	movs	r3, #8
 800a13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a13e:	2302      	movs	r3, #2
 800a140:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a142:	2300      	movs	r3, #0
 800a144:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a146:	2300      	movs	r3, #0
 800a148:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a14a:	230d      	movs	r3, #13
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800a14e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a152:	4619      	mov	r1, r3
 800a154:	48ad      	ldr	r0, [pc, #692]	@ (800a40c <MX_GPIO_Init+0x5f0>)
 800a156:	f7fa fa3f 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800a15a:	f241 030e 	movw	r3, #4110	@ 0x100e
 800a15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a160:	2301      	movs	r3, #1
 800a162:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a164:	2300      	movs	r3, #0
 800a166:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a168:	2300      	movs	r3, #0
 800a16a:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a16c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a170:	4619      	mov	r1, r3
 800a172:	48a7      	ldr	r0, [pc, #668]	@ (800a410 <MX_GPIO_Init+0x5f4>)
 800a174:	f7fa fa30 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800a178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a17c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a17e:	2300      	movs	r3, #0
 800a180:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a182:	2300      	movs	r3, #0
 800a184:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800a186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a18a:	4619      	mov	r1, r3
 800a18c:	48a1      	ldr	r0, [pc, #644]	@ (800a414 <MX_GPIO_Init+0x5f8>)
 800a18e:	f7fa fa23 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800a192:	2308      	movs	r3, #8
 800a194:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a196:	2301      	movs	r3, #1
 800a198:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800a1a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	489b      	ldr	r0, [pc, #620]	@ (800a418 <MX_GPIO_Init+0x5fc>)
 800a1aa:	f7fa fa15 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800a1ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a1c0:	230d      	movs	r3, #13
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800a1c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4894      	ldr	r0, [pc, #592]	@ (800a41c <MX_GPIO_Init+0x600>)
 800a1cc:	f7fa fa04 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a1dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	488a      	ldr	r0, [pc, #552]	@ (800a40c <MX_GPIO_Init+0x5f0>)
 800a1e4:	f7fa f9f8 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_CMD_Pin */
	GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a1f8:	230c      	movs	r3, #12
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800a1fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a200:	4619      	mov	r1, r3
 800a202:	4882      	ldr	r0, [pc, #520]	@ (800a40c <MX_GPIO_Init+0x5f0>)
 800a204:	f7fa f9e8 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800a208:	f248 0304 	movw	r3, #32772	@ 0x8004
 800a20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a20e:	2300      	movs	r3, #0
 800a210:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a212:	2300      	movs	r3, #0
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a216:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a21a:	4619      	mov	r1, r3
 800a21c:	4880      	ldr	r0, [pc, #512]	@ (800a420 <MX_GPIO_Init+0x604>)
 800a21e:	f7fa f9db 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800a222:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a226:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a228:	2301      	movs	r3, #1
 800a22a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a230:	2300      	movs	r3, #0
 800a232:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a238:	4619      	mov	r1, r3
 800a23a:	4879      	ldr	r0, [pc, #484]	@ (800a420 <MX_GPIO_Init+0x604>)
 800a23c:	f7fa f9cc 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800a240:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800a244:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a246:	2302      	movs	r3, #2
 800a248:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a24e:	2300      	movs	r3, #0
 800a250:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a252:	230d      	movs	r3, #13
 800a254:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a256:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a25a:	4619      	mov	r1, r3
 800a25c:	4870      	ldr	r0, [pc, #448]	@ (800a420 <MX_GPIO_Init+0x604>)
 800a25e:	f7fa f9bb 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800a262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a266:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a268:	4b6e      	ldr	r3, [pc, #440]	@ (800a424 <MX_GPIO_Init+0x608>)
 800a26a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a26c:	2300      	movs	r3, #0
 800a26e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800a270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a274:	4619      	mov	r1, r3
 800a276:	4866      	ldr	r0, [pc, #408]	@ (800a410 <MX_GPIO_Init+0x5f4>)
 800a278:	f7fa f9ae 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800a27c:	2310      	movs	r3, #16
 800a27e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a280:	2302      	movs	r3, #2
 800a282:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a284:	2300      	movs	r3, #0
 800a286:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a288:	2303      	movs	r3, #3
 800a28a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a28c:	230a      	movs	r3, #10
 800a28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800a290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a294:	4619      	mov	r1, r3
 800a296:	4862      	ldr	r0, [pc, #392]	@ (800a420 <MX_GPIO_Init+0x604>)
 800a298:	f7fa f99e 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800a29c:	23c8      	movs	r3, #200	@ 0xc8
 800a29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a2ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	485a      	ldr	r0, [pc, #360]	@ (800a41c <MX_GPIO_Init+0x600>)
 800a2b4:	f7fa f990 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800a2b8:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800a2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a2c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4856      	ldr	r0, [pc, #344]	@ (800a428 <MX_GPIO_Init+0x60c>)
 800a2ce:	f7fa f983 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800a2d2:	2305      	movs	r3, #5
 800a2d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a2e2:	230a      	movs	r3, #10
 800a2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4849      	ldr	r0, [pc, #292]	@ (800a414 <MX_GPIO_Init+0x5f8>)
 800a2ee:	f7fa f973 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a2f2:	2332      	movs	r3, #50	@ 0x32
 800a2f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2fe:	2303      	movs	r3, #3
 800a300:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a302:	230b      	movs	r3, #11
 800a304:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a30a:	4619      	mov	r1, r3
 800a30c:	4841      	ldr	r0, [pc, #260]	@ (800a414 <MX_GPIO_Init+0x5f8>)
 800a30e:	f7fa f963 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a312:	2304      	movs	r3, #4
 800a314:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a316:	2302      	movs	r3, #2
 800a318:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a31e:	2303      	movs	r3, #3
 800a320:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a322:	2309      	movs	r3, #9
 800a324:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a32a:	4619      	mov	r1, r3
 800a32c:	483f      	ldr	r0, [pc, #252]	@ (800a42c <MX_GPIO_Init+0x610>)
 800a32e:	f7fa f953 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800a332:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a336:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a338:	2302      	movs	r3, #2
 800a33a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a340:	2303      	movs	r3, #3
 800a342:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a344:	2309      	movs	r3, #9
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a34c:	4619      	mov	r1, r3
 800a34e:	482f      	ldr	r0, [pc, #188]	@ (800a40c <MX_GPIO_Init+0x5f0>)
 800a350:	f7fa f942 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800a354:	2304      	movs	r3, #4
 800a356:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a358:	2300      	movs	r3, #0
 800a35a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800a360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a364:	4619      	mov	r1, r3
 800a366:	482d      	ldr	r0, [pc, #180]	@ (800a41c <MX_GPIO_Init+0x600>)
 800a368:	f7fa f936 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a36c:	2386      	movs	r3, #134	@ 0x86
 800a36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a370:	2302      	movs	r3, #2
 800a372:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a374:	2300      	movs	r3, #0
 800a376:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a378:	2303      	movs	r3, #3
 800a37a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a37c:	230b      	movs	r3, #11
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a380:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a384:	4619      	mov	r1, r3
 800a386:	4820      	ldr	r0, [pc, #128]	@ (800a408 <MX_GPIO_Init+0x5ec>)
 800a388:	f7fa f926 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800a38c:	2301      	movs	r3, #1
 800a38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a390:	2303      	movs	r3, #3
 800a392:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a394:	2300      	movs	r3, #0
 800a396:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800a398:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a39c:	4619      	mov	r1, r3
 800a39e:	481a      	ldr	r0, [pc, #104]	@ (800a408 <MX_GPIO_Init+0x5ec>)
 800a3a0:	f7fa f91a 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800a3a4:	2350      	movs	r3, #80	@ 0x50
 800a3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a3b4:	230d      	movs	r3, #13
 800a3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4812      	ldr	r0, [pc, #72]	@ (800a408 <MX_GPIO_Init+0x5ec>)
 800a3c0:	f7fa f90a 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a3c4:	2328      	movs	r3, #40	@ 0x28
 800a3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a3d4:	230a      	movs	r3, #10
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3dc:	4619      	mov	r1, r3
 800a3de:	480a      	ldr	r0, [pc, #40]	@ (800a408 <MX_GPIO_Init+0x5ec>)
 800a3e0:	f7fa f8fa 	bl	80045d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800a3e4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800a3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a3f6:	2305      	movs	r3, #5
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3fe:	4619      	mov	r1, r3
 800a400:	480a      	ldr	r0, [pc, #40]	@ (800a42c <MX_GPIO_Init+0x610>)
 800a402:	f7fa f8e9 	bl	80045d8 <HAL_GPIO_Init>
 800a406:	e013      	b.n	800a430 <MX_GPIO_Init+0x614>
 800a408:	40020000 	.word	0x40020000
 800a40c:	40020c00 	.word	0x40020c00
 800a410:	40022000 	.word	0x40022000
 800a414:	40020800 	.word	0x40020800
 800a418:	40022800 	.word	0x40022800
 800a41c:	40021800 	.word	0x40021800
 800a420:	40021c00 	.word	0x40021c00
 800a424:	10120000 	.word	0x10120000
 800a428:	40021400 	.word	0x40021400
 800a42c:	40020400 	.word	0x40020400

}
 800a430:	bf00      	nop
 800a432:	3740      	adds	r7, #64	@ 0x40
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <initGpio>:

void initGpio(void){
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a43e:	1d3b      	adds	r3, r7, #4
 800a440:	2200      	movs	r2, #0
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	605a      	str	r2, [r3, #4]
 800a446:	609a      	str	r2, [r3, #8]
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800a44c:	2200      	movs	r2, #0
 800a44e:	2101      	movs	r1, #1
 800a450:	4809      	ldr	r0, [pc, #36]	@ (800a478 <initGpio+0x40>)
 800a452:	f7fa fb79 	bl	8004b48 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a456:	2301      	movs	r3, #1
 800a458:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a45a:	2301      	movs	r3, #1
 800a45c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a462:	2303      	movs	r3, #3
 800a464:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a466:	1d3b      	adds	r3, r7, #4
 800a468:	4619      	mov	r1, r3
 800a46a:	4803      	ldr	r0, [pc, #12]	@ (800a478 <initGpio+0x40>)
 800a46c:	f7fa f8b4 	bl	80045d8 <HAL_GPIO_Init>
}
 800a470:	bf00      	nop
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	40020000 	.word	0x40020000

0800a47c <Error_Handler>:

void Error_Handler(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
	while(1);
 800a480:	bf00      	nop
 800a482:	e7fd      	b.n	800a480 <Error_Handler+0x4>

0800a484 <wm8994Init>:
#include "stm32746g_discovery_audio.h"

extern AUDIO_DrvTypeDef  *audio_drv;

uint8_t wm8994Init(void){
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
	uint32_t deviceid = 0x00;
 800a48a:	2300      	movs	r3, #0
 800a48c:	607b      	str	r3, [r7, #4]

	deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800a48e:	4b11      	ldr	r3, [pc, #68]	@ (800a4d4 <wm8994Init+0x50>)
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2034      	movs	r0, #52	@ 0x34
 800a494:	4798      	blx	r3
 800a496:	6078      	str	r0, [r7, #4]
	if((deviceid) == WM8994_ID){
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f648 1294 	movw	r2, #35220	@ 0x8994
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d112      	bne.n	800a4c8 <wm8994Init+0x44>
		wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d4 <wm8994Init+0x50>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	2034      	movs	r0, #52	@ 0x34
 800a4a8:	4798      	blx	r3
	 	audio_drv = &wm8994_drv;
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d8 <wm8994Init+0x54>)
 800a4ac:	4a09      	ldr	r2, [pc, #36]	@ (800a4d4 <wm8994Init+0x50>)
 800a4ae:	601a      	str	r2, [r3, #0]
	 	//audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
	 	  audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
 800a4b0:	4b09      	ldr	r3, [pc, #36]	@ (800a4d8 <wm8994Init+0x54>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681c      	ldr	r4, [r3, #0]
 800a4b6:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800a4ba:	2264      	movs	r2, #100	@ 0x64
 800a4bc:	f240 2102 	movw	r1, #514	@ 0x202
 800a4c0:	2034      	movs	r0, #52	@ 0x34
 800a4c2:	47a0      	blx	r4
	 	return AUDIO_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e000      	b.n	800a4ca <wm8994Init+0x46>
	 }
	 else{
	 	return AUDIO_ERROR;
 800a4c8:	2301      	movs	r3, #1
	 }
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd90      	pop	{r4, r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000000 	.word	0x20000000
 800a4d8:	200000cc 	.word	0x200000cc

0800a4dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a520 <HAL_MspInit+0x44>)
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a520 <HAL_MspInit+0x44>)
 800a4e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800a4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a520 <HAL_MspInit+0x44>)
 800a4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4f6:	607b      	str	r3, [r7, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4fa:	4b09      	ldr	r3, [pc, #36]	@ (800a520 <HAL_MspInit+0x44>)
 800a4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4fe:	4a08      	ldr	r2, [pc, #32]	@ (800a520 <HAL_MspInit+0x44>)
 800a500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a504:	6453      	str	r3, [r2, #68]	@ 0x44
 800a506:	4b06      	ldr	r3, [pc, #24]	@ (800a520 <HAL_MspInit+0x44>)
 800a508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a50a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	40023800 	.word	0x40023800

0800a524 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a0d      	ldr	r2, [pc, #52]	@ (800a568 <HAL_DMA2D_MspInit+0x44>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d113      	bne.n	800a55e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a536:	4b0d      	ldr	r3, [pc, #52]	@ (800a56c <HAL_DMA2D_MspInit+0x48>)
 800a538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a53a:	4a0c      	ldr	r2, [pc, #48]	@ (800a56c <HAL_DMA2D_MspInit+0x48>)
 800a53c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a540:	6313      	str	r3, [r2, #48]	@ 0x30
 800a542:	4b0a      	ldr	r3, [pc, #40]	@ (800a56c <HAL_DMA2D_MspInit+0x48>)
 800a544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800a54e:	2200      	movs	r2, #0
 800a550:	2105      	movs	r1, #5
 800a552:	205a      	movs	r0, #90	@ 0x5a
 800a554:	f7f9 faa1 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800a558:	205a      	movs	r0, #90	@ 0x5a
 800a55a:	f7f9 faba 	bl	8003ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800a55e:	bf00      	nop
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	4002b000 	.word	0x4002b000
 800a56c:	40023800 	.word	0x40023800

0800a570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08a      	sub	sp, #40	@ 0x28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a578:	f107 0314 	add.w	r3, r7, #20
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	605a      	str	r2, [r3, #4]
 800a582:	609a      	str	r2, [r3, #8]
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a17      	ldr	r2, [pc, #92]	@ (800a5ec <HAL_I2C_MspInit+0x7c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d128      	bne.n	800a5e4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a592:	4b17      	ldr	r3, [pc, #92]	@ (800a5f0 <HAL_I2C_MspInit+0x80>)
 800a594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a596:	4a16      	ldr	r2, [pc, #88]	@ (800a5f0 <HAL_I2C_MspInit+0x80>)
 800a598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a59c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a59e:	4b14      	ldr	r3, [pc, #80]	@ (800a5f0 <HAL_I2C_MspInit+0x80>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a6:	613b      	str	r3, [r7, #16]
 800a5a8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800a5aa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a5ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a5b0:	2312      	movs	r3, #18
 800a5b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a5bc:	2304      	movs	r3, #4
 800a5be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a5c0:	f107 0314 	add.w	r3, r7, #20
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	480b      	ldr	r0, [pc, #44]	@ (800a5f4 <HAL_I2C_MspInit+0x84>)
 800a5c8:	f7fa f806 	bl	80045d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a5cc:	4b08      	ldr	r3, [pc, #32]	@ (800a5f0 <HAL_I2C_MspInit+0x80>)
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d0:	4a07      	ldr	r2, [pc, #28]	@ (800a5f0 <HAL_I2C_MspInit+0x80>)
 800a5d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5d6:	6413      	str	r3, [r2, #64]	@ 0x40
 800a5d8:	4b05      	ldr	r3, [pc, #20]	@ (800a5f0 <HAL_I2C_MspInit+0x80>)
 800a5da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800a5e4:	bf00      	nop
 800a5e6:	3728      	adds	r7, #40	@ 0x28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	40005c00 	.word	0x40005c00
 800a5f0:	40023800 	.word	0x40023800
 800a5f4:	40021c00 	.word	0x40021c00

0800a5f8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C3)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a08      	ldr	r2, [pc, #32]	@ (800a628 <HAL_I2C_MspDeInit+0x30>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d10a      	bne.n	800a620 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800a60a:	4b08      	ldr	r3, [pc, #32]	@ (800a62c <HAL_I2C_MspDeInit+0x34>)
 800a60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a60e:	4a07      	ldr	r2, [pc, #28]	@ (800a62c <HAL_I2C_MspDeInit+0x34>)
 800a610:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a614:	6413      	str	r3, [r2, #64]	@ 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800a616:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a61a:	4805      	ldr	r0, [pc, #20]	@ (800a630 <HAL_I2C_MspDeInit+0x38>)
 800a61c:	f7fa f988 	bl	8004930 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	40005c00 	.word	0x40005c00
 800a62c:	40023800 	.word	0x40023800
 800a630:	40021c00 	.word	0x40021c00

0800a634 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08e      	sub	sp, #56	@ 0x38
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a63c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	605a      	str	r2, [r3, #4]
 800a646:	609a      	str	r2, [r3, #8]
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a55      	ldr	r2, [pc, #340]	@ (800a7a8 <HAL_LTDC_MspInit+0x174>)
 800a652:	4293      	cmp	r3, r2
 800a654:	f040 80a3 	bne.w	800a79e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a658:	4b54      	ldr	r3, [pc, #336]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a65c:	4a53      	ldr	r2, [pc, #332]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a65e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a662:	6453      	str	r3, [r2, #68]	@ 0x44
 800a664:	4b51      	ldr	r3, [pc, #324]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a668:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a66c:	623b      	str	r3, [r7, #32]
 800a66e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a670:	4b4e      	ldr	r3, [pc, #312]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a674:	4a4d      	ldr	r2, [pc, #308]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a676:	f043 0310 	orr.w	r3, r3, #16
 800a67a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a67c:	4b4b      	ldr	r3, [pc, #300]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a67e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a680:	f003 0310 	and.w	r3, r3, #16
 800a684:	61fb      	str	r3, [r7, #28]
 800a686:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a688:	4b48      	ldr	r3, [pc, #288]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a68a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a68c:	4a47      	ldr	r2, [pc, #284]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a68e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a692:	6313      	str	r3, [r2, #48]	@ 0x30
 800a694:	4b45      	ldr	r3, [pc, #276]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a69c:	61bb      	str	r3, [r7, #24]
 800a69e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800a6a0:	4b42      	ldr	r3, [pc, #264]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a4:	4a41      	ldr	r2, [pc, #260]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a6aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6ac:	4b3f      	ldr	r3, [pc, #252]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a6b8:	4b3c      	ldr	r3, [pc, #240]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6bc:	4a3b      	ldr	r2, [pc, #236]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6c4:	4b39      	ldr	r3, [pc, #228]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6cc:	613b      	str	r3, [r7, #16]
 800a6ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a6d0:	4b36      	ldr	r3, [pc, #216]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d4:	4a35      	ldr	r2, [pc, #212]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6da:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6dc:	4b33      	ldr	r3, [pc, #204]	@ (800a7ac <HAL_LTDC_MspInit+0x178>)
 800a6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6e4:	60fb      	str	r3, [r7, #12]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800a6e8:	2310      	movs	r3, #16
 800a6ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a6f8:	230e      	movs	r3, #14
 800a6fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800a6fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a700:	4619      	mov	r1, r3
 800a702:	482b      	ldr	r0, [pc, #172]	@ (800a7b0 <HAL_LTDC_MspInit+0x17c>)
 800a704:	f7f9 ff68 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800a708:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800a70c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a70e:	2302      	movs	r3, #2
 800a710:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a712:	2300      	movs	r3, #0
 800a714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a716:	2300      	movs	r3, #0
 800a718:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a71a:	230e      	movs	r3, #14
 800a71c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800a71e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a722:	4619      	mov	r1, r3
 800a724:	4823      	ldr	r0, [pc, #140]	@ (800a7b4 <HAL_LTDC_MspInit+0x180>)
 800a726:	f7f9 ff57 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800a72a:	23f7      	movs	r3, #247	@ 0xf7
 800a72c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a72e:	2302      	movs	r3, #2
 800a730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a732:	2300      	movs	r3, #0
 800a734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a736:	2300      	movs	r3, #0
 800a738:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a73a:	230e      	movs	r3, #14
 800a73c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800a73e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a742:	4619      	mov	r1, r3
 800a744:	481c      	ldr	r0, [pc, #112]	@ (800a7b8 <HAL_LTDC_MspInit+0x184>)
 800a746:	f7f9 ff47 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800a74a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a74e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a750:	2302      	movs	r3, #2
 800a752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a754:	2300      	movs	r3, #0
 800a756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a758:	2300      	movs	r3, #0
 800a75a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800a75c:	2309      	movs	r3, #9
 800a75e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800a760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a764:	4619      	mov	r1, r3
 800a766:	4815      	ldr	r0, [pc, #84]	@ (800a7bc <HAL_LTDC_MspInit+0x188>)
 800a768:	f7f9 ff36 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800a76c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800a770:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a772:	2302      	movs	r3, #2
 800a774:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a776:	2300      	movs	r3, #0
 800a778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a77a:	2300      	movs	r3, #0
 800a77c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a77e:	230e      	movs	r3, #14
 800a780:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a786:	4619      	mov	r1, r3
 800a788:	480d      	ldr	r0, [pc, #52]	@ (800a7c0 <HAL_LTDC_MspInit+0x18c>)
 800a78a:	f7f9 ff25 	bl	80045d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800a78e:	2200      	movs	r2, #0
 800a790:	2105      	movs	r1, #5
 800a792:	2058      	movs	r0, #88	@ 0x58
 800a794:	f7f9 f981 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800a798:	2058      	movs	r0, #88	@ 0x58
 800a79a:	f7f9 f99a 	bl	8003ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800a79e:	bf00      	nop
 800a7a0:	3738      	adds	r7, #56	@ 0x38
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	40016800 	.word	0x40016800
 800a7ac:	40023800 	.word	0x40023800
 800a7b0:	40021000 	.word	0x40021000
 800a7b4:	40022400 	.word	0x40022400
 800a7b8:	40022800 	.word	0x40022800
 800a7bc:	40021800 	.word	0x40021800
 800a7c0:	40022000 	.word	0x40022000

0800a7c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b090      	sub	sp, #64	@ 0x40
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	605a      	str	r2, [r3, #4]
 800a7d6:	609a      	str	r2, [r3, #8]
 800a7d8:	60da      	str	r2, [r3, #12]
 800a7da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a58      	ldr	r2, [pc, #352]	@ (800a944 <HAL_TIM_Base_MspInit+0x180>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d129      	bne.n	800a83a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a7e6:	4b58      	ldr	r3, [pc, #352]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ea:	4a57      	ldr	r2, [pc, #348]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a7ec:	f043 0301 	orr.w	r3, r3, #1
 800a7f0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a7f2:	4b55      	ldr	r3, [pc, #340]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a7f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7fe:	4b52      	ldr	r3, [pc, #328]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a802:	4a51      	ldr	r2, [pc, #324]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a804:	f043 0301 	orr.w	r3, r3, #1
 800a808:	6313      	str	r3, [r2, #48]	@ 0x30
 800a80a:	4b4f      	ldr	r3, [pc, #316]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a80c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	627b      	str	r3, [r7, #36]	@ 0x24
 800a814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800a816:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a81c:	2302      	movs	r3, #2
 800a81e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a820:	2300      	movs	r3, #0
 800a822:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a824:	2300      	movs	r3, #0
 800a826:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a828:	2301      	movs	r3, #1
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800a82c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a830:	4619      	mov	r1, r3
 800a832:	4846      	ldr	r0, [pc, #280]	@ (800a94c <HAL_TIM_Base_MspInit+0x188>)
 800a834:	f7f9 fed0 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a838:	e07f      	b.n	800a93a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a842:	d129      	bne.n	800a898 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a844:	4b40      	ldr	r3, [pc, #256]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a848:	4a3f      	ldr	r2, [pc, #252]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a84a:	f043 0301 	orr.w	r3, r3, #1
 800a84e:	6413      	str	r3, [r2, #64]	@ 0x40
 800a850:	4b3d      	ldr	r3, [pc, #244]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	623b      	str	r3, [r7, #32]
 800a85a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a85c:	4b3a      	ldr	r3, [pc, #232]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a85e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a860:	4a39      	ldr	r2, [pc, #228]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	6313      	str	r3, [r2, #48]	@ 0x30
 800a868:	4b37      	ldr	r3, [pc, #220]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	61fb      	str	r3, [r7, #28]
 800a872:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800a874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a87a:	2302      	movs	r3, #2
 800a87c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a87e:	2300      	movs	r3, #0
 800a880:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a882:	2300      	movs	r3, #0
 800a884:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a886:	2301      	movs	r3, #1
 800a888:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800a88a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a88e:	4619      	mov	r1, r3
 800a890:	482e      	ldr	r0, [pc, #184]	@ (800a94c <HAL_TIM_Base_MspInit+0x188>)
 800a892:	f7f9 fea1 	bl	80045d8 <HAL_GPIO_Init>
}
 800a896:	e050      	b.n	800a93a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a2c      	ldr	r2, [pc, #176]	@ (800a950 <HAL_TIM_Base_MspInit+0x18c>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d128      	bne.n	800a8f4 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a8a2:	4b29      	ldr	r3, [pc, #164]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a6:	4a28      	ldr	r2, [pc, #160]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a8a8:	f043 0302 	orr.w	r3, r3, #2
 800a8ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800a8ae:	4b26      	ldr	r3, [pc, #152]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	61bb      	str	r3, [r7, #24]
 800a8b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8ba:	4b23      	ldr	r3, [pc, #140]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8be:	4a22      	ldr	r2, [pc, #136]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a8c0:	f043 0302 	orr.w	r3, r3, #2
 800a8c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8c6:	4b20      	ldr	r3, [pc, #128]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a8c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800a8d2:	2310      	movs	r3, #16
 800a8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800a8e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4819      	ldr	r0, [pc, #100]	@ (800a954 <HAL_TIM_Base_MspInit+0x190>)
 800a8ee:	f7f9 fe73 	bl	80045d8 <HAL_GPIO_Init>
}
 800a8f2:	e022      	b.n	800a93a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM5)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a17      	ldr	r2, [pc, #92]	@ (800a958 <HAL_TIM_Base_MspInit+0x194>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d10c      	bne.n	800a918 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a8fe:	4b12      	ldr	r3, [pc, #72]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a902:	4a11      	ldr	r2, [pc, #68]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a904:	f043 0308 	orr.w	r3, r3, #8
 800a908:	6413      	str	r3, [r2, #64]	@ 0x40
 800a90a:	4b0f      	ldr	r3, [pc, #60]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a90e:	f003 0308 	and.w	r3, r3, #8
 800a912:	613b      	str	r3, [r7, #16]
 800a914:	693b      	ldr	r3, [r7, #16]
}
 800a916:	e010      	b.n	800a93a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a0f      	ldr	r2, [pc, #60]	@ (800a95c <HAL_TIM_Base_MspInit+0x198>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d10b      	bne.n	800a93a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a922:	4b09      	ldr	r3, [pc, #36]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a926:	4a08      	ldr	r2, [pc, #32]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a928:	f043 0302 	orr.w	r3, r3, #2
 800a92c:	6453      	str	r3, [r2, #68]	@ 0x44
 800a92e:	4b06      	ldr	r3, [pc, #24]	@ (800a948 <HAL_TIM_Base_MspInit+0x184>)
 800a930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	68fb      	ldr	r3, [r7, #12]
}
 800a93a:	bf00      	nop
 800a93c:	3740      	adds	r7, #64	@ 0x40
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	40010000 	.word	0x40010000
 800a948:	40023800 	.word	0x40023800
 800a94c:	40020000 	.word	0x40020000
 800a950:	40000400 	.word	0x40000400
 800a954:	40020400 	.word	0x40020400
 800a958:	40000c00 	.word	0x40000c00
 800a95c:	40010400 	.word	0x40010400

0800a960 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM12)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a0a      	ldr	r2, [pc, #40]	@ (800a998 <HAL_TIM_PWM_MspInit+0x38>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d10b      	bne.n	800a98a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a972:	4b0a      	ldr	r3, [pc, #40]	@ (800a99c <HAL_TIM_PWM_MspInit+0x3c>)
 800a974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a976:	4a09      	ldr	r2, [pc, #36]	@ (800a99c <HAL_TIM_PWM_MspInit+0x3c>)
 800a978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a97e:	4b07      	ldr	r3, [pc, #28]	@ (800a99c <HAL_TIM_PWM_MspInit+0x3c>)
 800a980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800a98a:	bf00      	nop
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	40001800 	.word	0x40001800
 800a99c:	40023800 	.word	0x40023800

0800a9a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08a      	sub	sp, #40	@ 0x28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9a8:	f107 0314 	add.w	r3, r7, #20
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	605a      	str	r2, [r3, #4]
 800a9b2:	609a      	str	r2, [r3, #8]
 800a9b4:	60da      	str	r2, [r3, #12]
 800a9b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a22      	ldr	r2, [pc, #136]	@ (800aa48 <HAL_TIM_MspPostInit+0xa8>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d11c      	bne.n	800a9fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a9c2:	4b22      	ldr	r3, [pc, #136]	@ (800aa4c <HAL_TIM_MspPostInit+0xac>)
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c6:	4a21      	ldr	r2, [pc, #132]	@ (800aa4c <HAL_TIM_MspPostInit+0xac>)
 800a9c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9ce:	4b1f      	ldr	r3, [pc, #124]	@ (800aa4c <HAL_TIM_MspPostInit+0xac>)
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9d6:	613b      	str	r3, [r7, #16]
 800a9d8:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration    
    PI0     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9de:	2302      	movs	r3, #2
 800a9e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800a9ee:	f107 0314 	add.w	r3, r7, #20
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4816      	ldr	r0, [pc, #88]	@ (800aa50 <HAL_TIM_MspPostInit+0xb0>)
 800a9f6:	f7f9 fdef 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800a9fa:	e020      	b.n	800aa3e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM12)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a14      	ldr	r2, [pc, #80]	@ (800aa54 <HAL_TIM_MspPostInit+0xb4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d11b      	bne.n	800aa3e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800aa06:	4b11      	ldr	r3, [pc, #68]	@ (800aa4c <HAL_TIM_MspPostInit+0xac>)
 800aa08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa0a:	4a10      	ldr	r2, [pc, #64]	@ (800aa4c <HAL_TIM_MspPostInit+0xac>)
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa10:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa12:	4b0e      	ldr	r3, [pc, #56]	@ (800aa4c <HAL_TIM_MspPostInit+0xac>)
 800aa14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800aa1e:	2340      	movs	r3, #64	@ 0x40
 800aa20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa22:	2302      	movs	r3, #2
 800aa24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa26:	2300      	movs	r3, #0
 800aa28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800aa2e:	2309      	movs	r3, #9
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800aa32:	f107 0314 	add.w	r3, r7, #20
 800aa36:	4619      	mov	r1, r3
 800aa38:	4807      	ldr	r0, [pc, #28]	@ (800aa58 <HAL_TIM_MspPostInit+0xb8>)
 800aa3a:	f7f9 fdcd 	bl	80045d8 <HAL_GPIO_Init>
}
 800aa3e:	bf00      	nop
 800aa40:	3728      	adds	r7, #40	@ 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	40000c00 	.word	0x40000c00
 800aa4c:	40023800 	.word	0x40023800
 800aa50:	40022000 	.word	0x40022000
 800aa54:	40001800 	.word	0x40001800
 800aa58:	40021c00 	.word	0x40021c00

0800aa5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08c      	sub	sp, #48	@ 0x30
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa64:	f107 031c 	add.w	r3, r7, #28
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	605a      	str	r2, [r3, #4]
 800aa6e:	609a      	str	r2, [r3, #8]
 800aa70:	60da      	str	r2, [r3, #12]
 800aa72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a3c      	ldr	r2, [pc, #240]	@ (800ab6c <HAL_UART_MspInit+0x110>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d145      	bne.n	800ab0a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800aa7e:	4b3c      	ldr	r3, [pc, #240]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aa80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa82:	4a3b      	ldr	r2, [pc, #236]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aa84:	f043 0310 	orr.w	r3, r3, #16
 800aa88:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa8a:	4b39      	ldr	r3, [pc, #228]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa8e:	f003 0310 	and.w	r3, r3, #16
 800aa92:	61bb      	str	r3, [r7, #24]
 800aa94:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa96:	4b36      	ldr	r3, [pc, #216]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aa98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa9a:	4a35      	ldr	r2, [pc, #212]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aa9c:	f043 0302 	orr.w	r3, r3, #2
 800aaa0:	6313      	str	r3, [r2, #48]	@ 0x30
 800aaa2:	4b33      	ldr	r3, [pc, #204]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	617b      	str	r3, [r7, #20]
 800aaac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaae:	4b30      	ldr	r3, [pc, #192]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab2:	4a2f      	ldr	r2, [pc, #188]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aab4:	f043 0301 	orr.w	r3, r3, #1
 800aab8:	6313      	str	r3, [r2, #48]	@ 0x30
 800aaba:	4b2d      	ldr	r3, [pc, #180]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	613b      	str	r3, [r7, #16]
 800aac4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800aac6:	2380      	movs	r3, #128	@ 0x80
 800aac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaca:	2302      	movs	r3, #2
 800aacc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aad2:	2300      	movs	r3, #0
 800aad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aad6:	2307      	movs	r3, #7
 800aad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800aada:	f107 031c 	add.w	r3, r7, #28
 800aade:	4619      	mov	r1, r3
 800aae0:	4824      	ldr	r0, [pc, #144]	@ (800ab74 <HAL_UART_MspInit+0x118>)
 800aae2:	f7f9 fd79 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800aae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aaea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaec:	2302      	movs	r3, #2
 800aaee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aaf8:	2307      	movs	r3, #7
 800aafa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800aafc:	f107 031c 	add.w	r3, r7, #28
 800ab00:	4619      	mov	r1, r3
 800ab02:	481d      	ldr	r0, [pc, #116]	@ (800ab78 <HAL_UART_MspInit+0x11c>)
 800ab04:	f7f9 fd68 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800ab08:	e02c      	b.n	800ab64 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a1b      	ldr	r2, [pc, #108]	@ (800ab7c <HAL_UART_MspInit+0x120>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d127      	bne.n	800ab64 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800ab14:	4b16      	ldr	r3, [pc, #88]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800ab16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab18:	4a15      	ldr	r2, [pc, #84]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800ab1a:	f043 0320 	orr.w	r3, r3, #32
 800ab1e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab20:	4b13      	ldr	r3, [pc, #76]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800ab22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab2c:	4b10      	ldr	r3, [pc, #64]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab30:	4a0f      	ldr	r2, [pc, #60]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800ab32:	f043 0304 	orr.w	r3, r3, #4
 800ab36:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab38:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <HAL_UART_MspInit+0x114>)
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	60bb      	str	r3, [r7, #8]
 800ab42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800ab44:	23c0      	movs	r3, #192	@ 0xc0
 800ab46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab48:	2302      	movs	r3, #2
 800ab4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab50:	2303      	movs	r3, #3
 800ab52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ab54:	2308      	movs	r3, #8
 800ab56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab58:	f107 031c 	add.w	r3, r7, #28
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4808      	ldr	r0, [pc, #32]	@ (800ab80 <HAL_UART_MspInit+0x124>)
 800ab60:	f7f9 fd3a 	bl	80045d8 <HAL_GPIO_Init>
}
 800ab64:	bf00      	nop
 800ab66:	3730      	adds	r7, #48	@ 0x30
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	40011000 	.word	0x40011000
 800ab70:	40023800 	.word	0x40023800
 800ab74:	40020400 	.word	0x40020400
 800ab78:	40020000 	.word	0x40020000
 800ab7c:	40011400 	.word	0x40011400
 800ab80:	40020800 	.word	0x40020800

0800ab84 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800ab8a:	4b3b      	ldr	r3, [pc, #236]	@ (800ac78 <HAL_FMC_MspInit+0xf4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d16d      	bne.n	800ac6e <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800ab92:	4b39      	ldr	r3, [pc, #228]	@ (800ac78 <HAL_FMC_MspInit+0xf4>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ab98:	4b38      	ldr	r3, [pc, #224]	@ (800ac7c <HAL_FMC_MspInit+0xf8>)
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9c:	4a37      	ldr	r2, [pc, #220]	@ (800ac7c <HAL_FMC_MspInit+0xf8>)
 800ab9e:	f043 0301 	orr.w	r3, r3, #1
 800aba2:	6393      	str	r3, [r2, #56]	@ 0x38
 800aba4:	4b35      	ldr	r3, [pc, #212]	@ (800ac7c <HAL_FMC_MspInit+0xf8>)
 800aba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	603b      	str	r3, [r7, #0]
 800abae:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800abb0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800abb4:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abb6:	2302      	movs	r3, #2
 800abb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abbe:	2303      	movs	r3, #3
 800abc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800abc2:	230c      	movs	r3, #12
 800abc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800abc6:	1d3b      	adds	r3, r7, #4
 800abc8:	4619      	mov	r1, r3
 800abca:	482d      	ldr	r0, [pc, #180]	@ (800ac80 <HAL_FMC_MspInit+0xfc>)
 800abcc:	f7f9 fd04 	bl	80045d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800abd0:	f248 1333 	movw	r3, #33075	@ 0x8133
 800abd4:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abd6:	2302      	movs	r3, #2
 800abd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abde:	2303      	movs	r3, #3
 800abe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800abe2:	230c      	movs	r3, #12
 800abe4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800abe6:	1d3b      	adds	r3, r7, #4
 800abe8:	4619      	mov	r1, r3
 800abea:	4826      	ldr	r0, [pc, #152]	@ (800ac84 <HAL_FMC_MspInit+0x100>)
 800abec:	f7f9 fcf4 	bl	80045d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800abf0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800abf4:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf6:	2302      	movs	r3, #2
 800abf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abfe:	2303      	movs	r3, #3
 800ac00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ac02:	230c      	movs	r3, #12
 800ac04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ac06:	1d3b      	adds	r3, r7, #4
 800ac08:	4619      	mov	r1, r3
 800ac0a:	481f      	ldr	r0, [pc, #124]	@ (800ac88 <HAL_FMC_MspInit+0x104>)
 800ac0c:	f7f9 fce4 	bl	80045d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800ac10:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800ac14:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac16:	2302      	movs	r3, #2
 800ac18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ac22:	230c      	movs	r3, #12
 800ac24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac26:	1d3b      	adds	r3, r7, #4
 800ac28:	4619      	mov	r1, r3
 800ac2a:	4818      	ldr	r0, [pc, #96]	@ (800ac8c <HAL_FMC_MspInit+0x108>)
 800ac2c:	f7f9 fcd4 	bl	80045d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800ac30:	2328      	movs	r3, #40	@ 0x28
 800ac32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac34:	2302      	movs	r3, #2
 800ac36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ac40:	230c      	movs	r3, #12
 800ac42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ac44:	1d3b      	adds	r3, r7, #4
 800ac46:	4619      	mov	r1, r3
 800ac48:	4811      	ldr	r0, [pc, #68]	@ (800ac90 <HAL_FMC_MspInit+0x10c>)
 800ac4a:	f7f9 fcc5 	bl	80045d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800ac4e:	2308      	movs	r3, #8
 800ac50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac52:	2302      	movs	r3, #2
 800ac54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ac5e:	230c      	movs	r3, #12
 800ac60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800ac62:	1d3b      	adds	r3, r7, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	480b      	ldr	r0, [pc, #44]	@ (800ac94 <HAL_FMC_MspInit+0x110>)
 800ac68:	f7f9 fcb6 	bl	80045d8 <HAL_GPIO_Init>
 800ac6c:	e000      	b.n	800ac70 <HAL_FMC_MspInit+0xec>
    return;
 800ac6e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	200101f0 	.word	0x200101f0
 800ac7c:	40023800 	.word	0x40023800
 800ac80:	40021000 	.word	0x40021000
 800ac84:	40021800 	.word	0x40021800
 800ac88:	40020c00 	.word	0x40020c00
 800ac8c:	40021400 	.word	0x40021400
 800ac90:	40021c00 	.word	0x40021c00
 800ac94:	40020800 	.word	0x40020800

0800ac98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800aca0:	f7ff ff70 	bl	800ab84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800aca4:	bf00      	nop
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08a      	sub	sp, #40	@ 0x28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a2b      	ldr	r2, [pc, #172]	@ (800ad68 <HAL_SAI_MspInit+0xbc>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d124      	bne.n	800ad08 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800acbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ad6c <HAL_SAI_MspInit+0xc0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10b      	bne.n	800acde <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800acc6:	4b2a      	ldr	r3, [pc, #168]	@ (800ad70 <HAL_SAI_MspInit+0xc4>)
 800acc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acca:	4a29      	ldr	r2, [pc, #164]	@ (800ad70 <HAL_SAI_MspInit+0xc4>)
 800accc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800acd0:	6453      	str	r3, [r2, #68]	@ 0x44
 800acd2:	4b27      	ldr	r3, [pc, #156]	@ (800ad70 <HAL_SAI_MspInit+0xc4>)
 800acd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acda:	613b      	str	r3, [r7, #16]
 800acdc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800acde:	4b23      	ldr	r3, [pc, #140]	@ (800ad6c <HAL_SAI_MspInit+0xc0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	4a21      	ldr	r2, [pc, #132]	@ (800ad6c <HAL_SAI_MspInit+0xc0>)
 800ace6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800ace8:	23f0      	movs	r3, #240	@ 0xf0
 800acea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acec:	2302      	movs	r3, #2
 800acee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf0:	2300      	movs	r3, #0
 800acf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acf4:	2303      	movs	r3, #3
 800acf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800acf8:	230a      	movs	r3, #10
 800acfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800acfc:	f107 0314 	add.w	r3, r7, #20
 800ad00:	4619      	mov	r1, r3
 800ad02:	481c      	ldr	r0, [pc, #112]	@ (800ad74 <HAL_SAI_MspInit+0xc8>)
 800ad04:	f7f9 fc68 	bl	80045d8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a1a      	ldr	r2, [pc, #104]	@ (800ad78 <HAL_SAI_MspInit+0xcc>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d125      	bne.n	800ad5e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800ad12:	4b16      	ldr	r3, [pc, #88]	@ (800ad6c <HAL_SAI_MspInit+0xc0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10b      	bne.n	800ad32 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800ad1a:	4b15      	ldr	r3, [pc, #84]	@ (800ad70 <HAL_SAI_MspInit+0xc4>)
 800ad1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad1e:	4a14      	ldr	r2, [pc, #80]	@ (800ad70 <HAL_SAI_MspInit+0xc4>)
 800ad20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad24:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad26:	4b12      	ldr	r3, [pc, #72]	@ (800ad70 <HAL_SAI_MspInit+0xc4>)
 800ad28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800ad32:	4b0e      	ldr	r3, [pc, #56]	@ (800ad6c <HAL_SAI_MspInit+0xc0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3301      	adds	r3, #1
 800ad38:	4a0c      	ldr	r2, [pc, #48]	@ (800ad6c <HAL_SAI_MspInit+0xc0>)
 800ad3a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800ad3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad42:	2302      	movs	r3, #2
 800ad44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800ad4e:	230a      	movs	r3, #10
 800ad50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800ad52:	f107 0314 	add.w	r3, r7, #20
 800ad56:	4619      	mov	r1, r3
 800ad58:	4808      	ldr	r0, [pc, #32]	@ (800ad7c <HAL_SAI_MspInit+0xd0>)
 800ad5a:	f7f9 fc3d 	bl	80045d8 <HAL_GPIO_Init>

    }
}
 800ad5e:	bf00      	nop
 800ad60:	3728      	adds	r7, #40	@ 0x28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	40015c04 	.word	0x40015c04
 800ad6c:	200101f4 	.word	0x200101f4
 800ad70:	40023800 	.word	0x40023800
 800ad74:	40022000 	.word	0x40022000
 800ad78:	40015c24 	.word	0x40015c24
 800ad7c:	40021800 	.word	0x40021800

0800ad80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad84:	bf00      	nop
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad92:	bf00      	nop
 800ad94:	e7fd      	b.n	800ad92 <HardFault_Handler+0x4>

0800ad96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad96:	b480      	push	{r7}
 800ad98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ad9a:	bf00      	nop
 800ad9c:	e7fd      	b.n	800ad9a <MemManage_Handler+0x4>

0800ad9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ada2:	bf00      	nop
 800ada4:	e7fd      	b.n	800ada2 <BusFault_Handler+0x4>

0800ada6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ada6:	b480      	push	{r7}
 800ada8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800adaa:	bf00      	nop
 800adac:	e7fd      	b.n	800adaa <UsageFault_Handler+0x4>

0800adae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800adae:	b480      	push	{r7}
 800adb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800adb2:	bf00      	nop
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800adc0:	bf00      	nop
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800adca:	b480      	push	{r7}
 800adcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800adce:	bf00      	nop
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800addc:	f7f8 fd42 	bl	8003864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ade0:	bf00      	nop
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800ade8:	4802      	ldr	r0, [pc, #8]	@ (800adf4 <DMA2D_IRQHandler+0x10>)
 800adea:	f7f9 f9a8 	bl	800413e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800adee:	bf00      	nop
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	2000fd20 	.word	0x2000fd20

0800adf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800adfc:	4b15      	ldr	r3, [pc, #84]	@ (800ae54 <SystemInit+0x5c>)
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae02:	4a14      	ldr	r2, [pc, #80]	@ (800ae54 <SystemInit+0x5c>)
 800ae04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ae0c:	4b12      	ldr	r3, [pc, #72]	@ (800ae58 <SystemInit+0x60>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a11      	ldr	r2, [pc, #68]	@ (800ae58 <SystemInit+0x60>)
 800ae12:	f043 0301 	orr.w	r3, r3, #1
 800ae16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ae18:	4b0f      	ldr	r3, [pc, #60]	@ (800ae58 <SystemInit+0x60>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ae1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae58 <SystemInit+0x60>)
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	490d      	ldr	r1, [pc, #52]	@ (800ae58 <SystemInit+0x60>)
 800ae24:	4b0d      	ldr	r3, [pc, #52]	@ (800ae5c <SystemInit+0x64>)
 800ae26:	4013      	ands	r3, r2
 800ae28:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae58 <SystemInit+0x60>)
 800ae2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ae60 <SystemInit+0x68>)
 800ae2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ae30:	4b09      	ldr	r3, [pc, #36]	@ (800ae58 <SystemInit+0x60>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a08      	ldr	r2, [pc, #32]	@ (800ae58 <SystemInit+0x60>)
 800ae36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ae3c:	4b06      	ldr	r3, [pc, #24]	@ (800ae58 <SystemInit+0x60>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ae42:	4b04      	ldr	r3, [pc, #16]	@ (800ae54 <SystemInit+0x5c>)
 800ae44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ae48:	609a      	str	r2, [r3, #8]
#endif
}
 800ae4a:	bf00      	nop
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	e000ed00 	.word	0xe000ed00
 800ae58:	40023800 	.word	0x40023800
 800ae5c:	fef6ffff 	.word	0xfef6ffff
 800ae60:	24003010 	.word	0x24003010

0800ae64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ae64:	480d      	ldr	r0, [pc, #52]	@ (800ae9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ae66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ae68:	f7ff ffc6 	bl	800adf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ae6c:	480c      	ldr	r0, [pc, #48]	@ (800aea0 <LoopForever+0x6>)
  ldr r1, =_edata
 800ae6e:	490d      	ldr	r1, [pc, #52]	@ (800aea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ae70:	4a0d      	ldr	r2, [pc, #52]	@ (800aea8 <LoopForever+0xe>)
  movs r3, #0
 800ae72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ae74:	e002      	b.n	800ae7c <LoopCopyDataInit>

0800ae76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ae76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ae78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ae7a:	3304      	adds	r3, #4

0800ae7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ae7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ae7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae80:	d3f9      	bcc.n	800ae76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae82:	4a0a      	ldr	r2, [pc, #40]	@ (800aeac <LoopForever+0x12>)
  ldr r4, =_ebss
 800ae84:	4c0a      	ldr	r4, [pc, #40]	@ (800aeb0 <LoopForever+0x16>)
  movs r3, #0
 800ae86:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ae88:	e001      	b.n	800ae8e <LoopFillZerobss>

0800ae8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ae8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ae8c:	3204      	adds	r2, #4

0800ae8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ae8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae90:	d3fb      	bcc.n	800ae8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ae92:	f000 f819 	bl	800aec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ae96:	f7fe fa67 	bl	8009368 <main>

0800ae9a <LoopForever>:

LoopForever:
  b LoopForever
 800ae9a:	e7fe      	b.n	800ae9a <LoopForever>
  ldr   r0, =_estack
 800ae9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800aea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aea4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800aea8:	080110b0 	.word	0x080110b0
  ldr r2, =_sbss
 800aeac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800aeb0:	200101f8 	.word	0x200101f8

0800aeb4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800aeb4:	e7fe      	b.n	800aeb4 <ADC_IRQHandler>

0800aeb6 <memset>:
 800aeb6:	4402      	add	r2, r0
 800aeb8:	4603      	mov	r3, r0
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d100      	bne.n	800aec0 <memset+0xa>
 800aebe:	4770      	bx	lr
 800aec0:	f803 1b01 	strb.w	r1, [r3], #1
 800aec4:	e7f9      	b.n	800aeba <memset+0x4>
	...

0800aec8 <__libc_init_array>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	4d0d      	ldr	r5, [pc, #52]	@ (800af00 <__libc_init_array+0x38>)
 800aecc:	4c0d      	ldr	r4, [pc, #52]	@ (800af04 <__libc_init_array+0x3c>)
 800aece:	1b64      	subs	r4, r4, r5
 800aed0:	10a4      	asrs	r4, r4, #2
 800aed2:	2600      	movs	r6, #0
 800aed4:	42a6      	cmp	r6, r4
 800aed6:	d109      	bne.n	800aeec <__libc_init_array+0x24>
 800aed8:	4d0b      	ldr	r5, [pc, #44]	@ (800af08 <__libc_init_array+0x40>)
 800aeda:	4c0c      	ldr	r4, [pc, #48]	@ (800af0c <__libc_init_array+0x44>)
 800aedc:	f001 f848 	bl	800bf70 <_init>
 800aee0:	1b64      	subs	r4, r4, r5
 800aee2:	10a4      	asrs	r4, r4, #2
 800aee4:	2600      	movs	r6, #0
 800aee6:	42a6      	cmp	r6, r4
 800aee8:	d105      	bne.n	800aef6 <__libc_init_array+0x2e>
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef0:	4798      	blx	r3
 800aef2:	3601      	adds	r6, #1
 800aef4:	e7ee      	b.n	800aed4 <__libc_init_array+0xc>
 800aef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aefa:	4798      	blx	r3
 800aefc:	3601      	adds	r6, #1
 800aefe:	e7f2      	b.n	800aee6 <__libc_init_array+0x1e>
 800af00:	080110a8 	.word	0x080110a8
 800af04:	080110a8 	.word	0x080110a8
 800af08:	080110a8 	.word	0x080110a8
 800af0c:	080110ac 	.word	0x080110ac

0800af10 <sin>:
 800af10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af12:	ec53 2b10 	vmov	r2, r3, d0
 800af16:	4826      	ldr	r0, [pc, #152]	@ (800afb0 <sin+0xa0>)
 800af18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af1c:	4281      	cmp	r1, r0
 800af1e:	d807      	bhi.n	800af30 <sin+0x20>
 800af20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800afa8 <sin+0x98>
 800af24:	2000      	movs	r0, #0
 800af26:	b005      	add	sp, #20
 800af28:	f85d eb04 	ldr.w	lr, [sp], #4
 800af2c:	f000 b90c 	b.w	800b148 <__kernel_sin>
 800af30:	4820      	ldr	r0, [pc, #128]	@ (800afb4 <sin+0xa4>)
 800af32:	4281      	cmp	r1, r0
 800af34:	d908      	bls.n	800af48 <sin+0x38>
 800af36:	4610      	mov	r0, r2
 800af38:	4619      	mov	r1, r3
 800af3a:	f7f5 f969 	bl	8000210 <__aeabi_dsub>
 800af3e:	ec41 0b10 	vmov	d0, r0, r1
 800af42:	b005      	add	sp, #20
 800af44:	f85d fb04 	ldr.w	pc, [sp], #4
 800af48:	4668      	mov	r0, sp
 800af4a:	f000 f9b9 	bl	800b2c0 <__ieee754_rem_pio2>
 800af4e:	f000 0003 	and.w	r0, r0, #3
 800af52:	2801      	cmp	r0, #1
 800af54:	d00c      	beq.n	800af70 <sin+0x60>
 800af56:	2802      	cmp	r0, #2
 800af58:	d011      	beq.n	800af7e <sin+0x6e>
 800af5a:	b9e8      	cbnz	r0, 800af98 <sin+0x88>
 800af5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af60:	ed9d 0b00 	vldr	d0, [sp]
 800af64:	2001      	movs	r0, #1
 800af66:	f000 f8ef 	bl	800b148 <__kernel_sin>
 800af6a:	ec51 0b10 	vmov	r0, r1, d0
 800af6e:	e7e6      	b.n	800af3e <sin+0x2e>
 800af70:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af74:	ed9d 0b00 	vldr	d0, [sp]
 800af78:	f000 f81e 	bl	800afb8 <__kernel_cos>
 800af7c:	e7f5      	b.n	800af6a <sin+0x5a>
 800af7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af82:	ed9d 0b00 	vldr	d0, [sp]
 800af86:	2001      	movs	r0, #1
 800af88:	f000 f8de 	bl	800b148 <__kernel_sin>
 800af8c:	ec53 2b10 	vmov	r2, r3, d0
 800af90:	4610      	mov	r0, r2
 800af92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800af96:	e7d2      	b.n	800af3e <sin+0x2e>
 800af98:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af9c:	ed9d 0b00 	vldr	d0, [sp]
 800afa0:	f000 f80a 	bl	800afb8 <__kernel_cos>
 800afa4:	e7f2      	b.n	800af8c <sin+0x7c>
 800afa6:	bf00      	nop
	...
 800afb0:	3fe921fb 	.word	0x3fe921fb
 800afb4:	7fefffff 	.word	0x7fefffff

0800afb8 <__kernel_cos>:
 800afb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	ec57 6b10 	vmov	r6, r7, d0
 800afc0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800afc4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800afc8:	ed8d 1b00 	vstr	d1, [sp]
 800afcc:	d206      	bcs.n	800afdc <__kernel_cos+0x24>
 800afce:	4630      	mov	r0, r6
 800afd0:	4639      	mov	r1, r7
 800afd2:	f7f5 fd6f 	bl	8000ab4 <__aeabi_d2iz>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f000 8088 	beq.w	800b0ec <__kernel_cos+0x134>
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f7f5 facc 	bl	8000580 <__aeabi_dmul>
 800afe8:	4b51      	ldr	r3, [pc, #324]	@ (800b130 <__kernel_cos+0x178>)
 800afea:	2200      	movs	r2, #0
 800afec:	4604      	mov	r4, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	f7f5 fac6 	bl	8000580 <__aeabi_dmul>
 800aff4:	a340      	add	r3, pc, #256	@ (adr r3, 800b0f8 <__kernel_cos+0x140>)
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	4682      	mov	sl, r0
 800affc:	468b      	mov	fp, r1
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 fabd 	bl	8000580 <__aeabi_dmul>
 800b006:	a33e      	add	r3, pc, #248	@ (adr r3, 800b100 <__kernel_cos+0x148>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 f902 	bl	8000214 <__adddf3>
 800b010:	4622      	mov	r2, r4
 800b012:	462b      	mov	r3, r5
 800b014:	f7f5 fab4 	bl	8000580 <__aeabi_dmul>
 800b018:	a33b      	add	r3, pc, #236	@ (adr r3, 800b108 <__kernel_cos+0x150>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f7f5 f8f7 	bl	8000210 <__aeabi_dsub>
 800b022:	4622      	mov	r2, r4
 800b024:	462b      	mov	r3, r5
 800b026:	f7f5 faab 	bl	8000580 <__aeabi_dmul>
 800b02a:	a339      	add	r3, pc, #228	@ (adr r3, 800b110 <__kernel_cos+0x158>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	f7f5 f8f0 	bl	8000214 <__adddf3>
 800b034:	4622      	mov	r2, r4
 800b036:	462b      	mov	r3, r5
 800b038:	f7f5 faa2 	bl	8000580 <__aeabi_dmul>
 800b03c:	a336      	add	r3, pc, #216	@ (adr r3, 800b118 <__kernel_cos+0x160>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 f8e5 	bl	8000210 <__aeabi_dsub>
 800b046:	4622      	mov	r2, r4
 800b048:	462b      	mov	r3, r5
 800b04a:	f7f5 fa99 	bl	8000580 <__aeabi_dmul>
 800b04e:	a334      	add	r3, pc, #208	@ (adr r3, 800b120 <__kernel_cos+0x168>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	f7f5 f8de 	bl	8000214 <__adddf3>
 800b058:	4622      	mov	r2, r4
 800b05a:	462b      	mov	r3, r5
 800b05c:	f7f5 fa90 	bl	8000580 <__aeabi_dmul>
 800b060:	4622      	mov	r2, r4
 800b062:	462b      	mov	r3, r5
 800b064:	f7f5 fa8c 	bl	8000580 <__aeabi_dmul>
 800b068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b06c:	4604      	mov	r4, r0
 800b06e:	460d      	mov	r5, r1
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fa84 	bl	8000580 <__aeabi_dmul>
 800b078:	460b      	mov	r3, r1
 800b07a:	4602      	mov	r2, r0
 800b07c:	4629      	mov	r1, r5
 800b07e:	4620      	mov	r0, r4
 800b080:	f7f5 f8c6 	bl	8000210 <__aeabi_dsub>
 800b084:	4b2b      	ldr	r3, [pc, #172]	@ (800b134 <__kernel_cos+0x17c>)
 800b086:	4598      	cmp	r8, r3
 800b088:	4606      	mov	r6, r0
 800b08a:	460f      	mov	r7, r1
 800b08c:	d810      	bhi.n	800b0b0 <__kernel_cos+0xf8>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	4650      	mov	r0, sl
 800b094:	4659      	mov	r1, fp
 800b096:	f7f5 f8bb 	bl	8000210 <__aeabi_dsub>
 800b09a:	460b      	mov	r3, r1
 800b09c:	4926      	ldr	r1, [pc, #152]	@ (800b138 <__kernel_cos+0x180>)
 800b09e:	4602      	mov	r2, r0
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	f7f5 f8b5 	bl	8000210 <__aeabi_dsub>
 800b0a6:	ec41 0b10 	vmov	d0, r0, r1
 800b0aa:	b003      	add	sp, #12
 800b0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b0:	4b22      	ldr	r3, [pc, #136]	@ (800b13c <__kernel_cos+0x184>)
 800b0b2:	4921      	ldr	r1, [pc, #132]	@ (800b138 <__kernel_cos+0x180>)
 800b0b4:	4598      	cmp	r8, r3
 800b0b6:	bf8c      	ite	hi
 800b0b8:	4d21      	ldrhi	r5, [pc, #132]	@ (800b140 <__kernel_cos+0x188>)
 800b0ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b0be:	2400      	movs	r4, #0
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	462b      	mov	r3, r5
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	f7f5 f8a3 	bl	8000210 <__aeabi_dsub>
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	4689      	mov	r9, r1
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	4650      	mov	r0, sl
 800b0d4:	4659      	mov	r1, fp
 800b0d6:	f7f5 f89b 	bl	8000210 <__aeabi_dsub>
 800b0da:	4632      	mov	r2, r6
 800b0dc:	463b      	mov	r3, r7
 800b0de:	f7f5 f897 	bl	8000210 <__aeabi_dsub>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4640      	mov	r0, r8
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	e7da      	b.n	800b0a2 <__kernel_cos+0xea>
 800b0ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b128 <__kernel_cos+0x170>
 800b0f0:	e7db      	b.n	800b0aa <__kernel_cos+0xf2>
 800b0f2:	bf00      	nop
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	be8838d4 	.word	0xbe8838d4
 800b0fc:	bda8fae9 	.word	0xbda8fae9
 800b100:	bdb4b1c4 	.word	0xbdb4b1c4
 800b104:	3e21ee9e 	.word	0x3e21ee9e
 800b108:	809c52ad 	.word	0x809c52ad
 800b10c:	3e927e4f 	.word	0x3e927e4f
 800b110:	19cb1590 	.word	0x19cb1590
 800b114:	3efa01a0 	.word	0x3efa01a0
 800b118:	16c15177 	.word	0x16c15177
 800b11c:	3f56c16c 	.word	0x3f56c16c
 800b120:	5555554c 	.word	0x5555554c
 800b124:	3fa55555 	.word	0x3fa55555
 800b128:	00000000 	.word	0x00000000
 800b12c:	3ff00000 	.word	0x3ff00000
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	3fd33332 	.word	0x3fd33332
 800b138:	3ff00000 	.word	0x3ff00000
 800b13c:	3fe90000 	.word	0x3fe90000
 800b140:	3fd20000 	.word	0x3fd20000
 800b144:	00000000 	.word	0x00000000

0800b148 <__kernel_sin>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	ec55 4b10 	vmov	r4, r5, d0
 800b150:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b154:	b085      	sub	sp, #20
 800b156:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b15a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b15e:	4680      	mov	r8, r0
 800b160:	d205      	bcs.n	800b16e <__kernel_sin+0x26>
 800b162:	4620      	mov	r0, r4
 800b164:	4629      	mov	r1, r5
 800b166:	f7f5 fca5 	bl	8000ab4 <__aeabi_d2iz>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d052      	beq.n	800b214 <__kernel_sin+0xcc>
 800b16e:	4622      	mov	r2, r4
 800b170:	462b      	mov	r3, r5
 800b172:	4620      	mov	r0, r4
 800b174:	4629      	mov	r1, r5
 800b176:	f7f5 fa03 	bl	8000580 <__aeabi_dmul>
 800b17a:	4682      	mov	sl, r0
 800b17c:	468b      	mov	fp, r1
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4620      	mov	r0, r4
 800b184:	4629      	mov	r1, r5
 800b186:	f7f5 f9fb 	bl	8000580 <__aeabi_dmul>
 800b18a:	a342      	add	r3, pc, #264	@ (adr r3, 800b294 <__kernel_sin+0x14c>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	e9cd 0100 	strd	r0, r1, [sp]
 800b194:	4650      	mov	r0, sl
 800b196:	4659      	mov	r1, fp
 800b198:	f7f5 f9f2 	bl	8000580 <__aeabi_dmul>
 800b19c:	a33f      	add	r3, pc, #252	@ (adr r3, 800b29c <__kernel_sin+0x154>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	f7f5 f835 	bl	8000210 <__aeabi_dsub>
 800b1a6:	4652      	mov	r2, sl
 800b1a8:	465b      	mov	r3, fp
 800b1aa:	f7f5 f9e9 	bl	8000580 <__aeabi_dmul>
 800b1ae:	a33d      	add	r3, pc, #244	@ (adr r3, 800b2a4 <__kernel_sin+0x15c>)
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	f7f5 f82e 	bl	8000214 <__adddf3>
 800b1b8:	4652      	mov	r2, sl
 800b1ba:	465b      	mov	r3, fp
 800b1bc:	f7f5 f9e0 	bl	8000580 <__aeabi_dmul>
 800b1c0:	a33a      	add	r3, pc, #232	@ (adr r3, 800b2ac <__kernel_sin+0x164>)
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	f7f5 f823 	bl	8000210 <__aeabi_dsub>
 800b1ca:	4652      	mov	r2, sl
 800b1cc:	465b      	mov	r3, fp
 800b1ce:	f7f5 f9d7 	bl	8000580 <__aeabi_dmul>
 800b1d2:	a338      	add	r3, pc, #224	@ (adr r3, 800b2b4 <__kernel_sin+0x16c>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f7f5 f81c 	bl	8000214 <__adddf3>
 800b1dc:	4606      	mov	r6, r0
 800b1de:	460f      	mov	r7, r1
 800b1e0:	f1b8 0f00 	cmp.w	r8, #0
 800b1e4:	d11b      	bne.n	800b21e <__kernel_sin+0xd6>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4650      	mov	r0, sl
 800b1ec:	4659      	mov	r1, fp
 800b1ee:	f7f5 f9c7 	bl	8000580 <__aeabi_dmul>
 800b1f2:	a325      	add	r3, pc, #148	@ (adr r3, 800b288 <__kernel_sin+0x140>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	f7f5 f80a 	bl	8000210 <__aeabi_dsub>
 800b1fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b200:	f7f5 f9be 	bl	8000580 <__aeabi_dmul>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	4620      	mov	r0, r4
 800b20a:	4629      	mov	r1, r5
 800b20c:	f7f5 f802 	bl	8000214 <__adddf3>
 800b210:	4604      	mov	r4, r0
 800b212:	460d      	mov	r5, r1
 800b214:	ec45 4b10 	vmov	d0, r4, r5
 800b218:	b005      	add	sp, #20
 800b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b222:	4b1b      	ldr	r3, [pc, #108]	@ (800b290 <__kernel_sin+0x148>)
 800b224:	2200      	movs	r2, #0
 800b226:	f7f5 f9ab 	bl	8000580 <__aeabi_dmul>
 800b22a:	4632      	mov	r2, r6
 800b22c:	4680      	mov	r8, r0
 800b22e:	4689      	mov	r9, r1
 800b230:	463b      	mov	r3, r7
 800b232:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b236:	f7f5 f9a3 	bl	8000580 <__aeabi_dmul>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	4640      	mov	r0, r8
 800b240:	4649      	mov	r1, r9
 800b242:	f7f4 ffe5 	bl	8000210 <__aeabi_dsub>
 800b246:	4652      	mov	r2, sl
 800b248:	465b      	mov	r3, fp
 800b24a:	f7f5 f999 	bl	8000580 <__aeabi_dmul>
 800b24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b252:	f7f4 ffdd 	bl	8000210 <__aeabi_dsub>
 800b256:	a30c      	add	r3, pc, #48	@ (adr r3, 800b288 <__kernel_sin+0x140>)
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	4606      	mov	r6, r0
 800b25e:	460f      	mov	r7, r1
 800b260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b264:	f7f5 f98c 	bl	8000580 <__aeabi_dmul>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4630      	mov	r0, r6
 800b26e:	4639      	mov	r1, r7
 800b270:	f7f4 ffd0 	bl	8000214 <__adddf3>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4620      	mov	r0, r4
 800b27a:	4629      	mov	r1, r5
 800b27c:	f7f4 ffc8 	bl	8000210 <__aeabi_dsub>
 800b280:	e7c6      	b.n	800b210 <__kernel_sin+0xc8>
 800b282:	bf00      	nop
 800b284:	f3af 8000 	nop.w
 800b288:	55555549 	.word	0x55555549
 800b28c:	3fc55555 	.word	0x3fc55555
 800b290:	3fe00000 	.word	0x3fe00000
 800b294:	5acfd57c 	.word	0x5acfd57c
 800b298:	3de5d93a 	.word	0x3de5d93a
 800b29c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b2a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b2a4:	57b1fe7d 	.word	0x57b1fe7d
 800b2a8:	3ec71de3 	.word	0x3ec71de3
 800b2ac:	19c161d5 	.word	0x19c161d5
 800b2b0:	3f2a01a0 	.word	0x3f2a01a0
 800b2b4:	1110f8a6 	.word	0x1110f8a6
 800b2b8:	3f811111 	.word	0x3f811111
 800b2bc:	00000000 	.word	0x00000000

0800b2c0 <__ieee754_rem_pio2>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	ec57 6b10 	vmov	r6, r7, d0
 800b2c8:	4bc5      	ldr	r3, [pc, #788]	@ (800b5e0 <__ieee754_rem_pio2+0x320>)
 800b2ca:	b08d      	sub	sp, #52	@ 0x34
 800b2cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b2d0:	4598      	cmp	r8, r3
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	9704      	str	r7, [sp, #16]
 800b2d6:	d807      	bhi.n	800b2e8 <__ieee754_rem_pio2+0x28>
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	ed80 0b00 	vstr	d0, [r0]
 800b2e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b2e4:	2500      	movs	r5, #0
 800b2e6:	e028      	b.n	800b33a <__ieee754_rem_pio2+0x7a>
 800b2e8:	4bbe      	ldr	r3, [pc, #760]	@ (800b5e4 <__ieee754_rem_pio2+0x324>)
 800b2ea:	4598      	cmp	r8, r3
 800b2ec:	d878      	bhi.n	800b3e0 <__ieee754_rem_pio2+0x120>
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	4dbd      	ldr	r5, [pc, #756]	@ (800b5e8 <__ieee754_rem_pio2+0x328>)
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b5a8 <__ieee754_rem_pio2+0x2e8>)
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	dd38      	ble.n	800b372 <__ieee754_rem_pio2+0xb2>
 800b300:	f7f4 ff86 	bl	8000210 <__aeabi_dsub>
 800b304:	45a8      	cmp	r8, r5
 800b306:	4606      	mov	r6, r0
 800b308:	460f      	mov	r7, r1
 800b30a:	d01a      	beq.n	800b342 <__ieee754_rem_pio2+0x82>
 800b30c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b5b0 <__ieee754_rem_pio2+0x2f0>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f7f4 ff7d 	bl	8000210 <__aeabi_dsub>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4680      	mov	r8, r0
 800b31c:	4689      	mov	r9, r1
 800b31e:	4630      	mov	r0, r6
 800b320:	4639      	mov	r1, r7
 800b322:	f7f4 ff75 	bl	8000210 <__aeabi_dsub>
 800b326:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b5b0 <__ieee754_rem_pio2+0x2f0>)
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	f7f4 ff70 	bl	8000210 <__aeabi_dsub>
 800b330:	e9c4 8900 	strd	r8, r9, [r4]
 800b334:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b338:	2501      	movs	r5, #1
 800b33a:	4628      	mov	r0, r5
 800b33c:	b00d      	add	sp, #52	@ 0x34
 800b33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b342:	a39d      	add	r3, pc, #628	@ (adr r3, 800b5b8 <__ieee754_rem_pio2+0x2f8>)
 800b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b348:	f7f4 ff62 	bl	8000210 <__aeabi_dsub>
 800b34c:	a39c      	add	r3, pc, #624	@ (adr r3, 800b5c0 <__ieee754_rem_pio2+0x300>)
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	4606      	mov	r6, r0
 800b354:	460f      	mov	r7, r1
 800b356:	f7f4 ff5b 	bl	8000210 <__aeabi_dsub>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	4680      	mov	r8, r0
 800b360:	4689      	mov	r9, r1
 800b362:	4630      	mov	r0, r6
 800b364:	4639      	mov	r1, r7
 800b366:	f7f4 ff53 	bl	8000210 <__aeabi_dsub>
 800b36a:	a395      	add	r3, pc, #596	@ (adr r3, 800b5c0 <__ieee754_rem_pio2+0x300>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	e7dc      	b.n	800b32c <__ieee754_rem_pio2+0x6c>
 800b372:	f7f4 ff4f 	bl	8000214 <__adddf3>
 800b376:	45a8      	cmp	r8, r5
 800b378:	4606      	mov	r6, r0
 800b37a:	460f      	mov	r7, r1
 800b37c:	d018      	beq.n	800b3b0 <__ieee754_rem_pio2+0xf0>
 800b37e:	a38c      	add	r3, pc, #560	@ (adr r3, 800b5b0 <__ieee754_rem_pio2+0x2f0>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f7f4 ff46 	bl	8000214 <__adddf3>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4680      	mov	r8, r0
 800b38e:	4689      	mov	r9, r1
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f4 ff3c 	bl	8000210 <__aeabi_dsub>
 800b398:	a385      	add	r3, pc, #532	@ (adr r3, 800b5b0 <__ieee754_rem_pio2+0x2f0>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f7f4 ff39 	bl	8000214 <__adddf3>
 800b3a2:	f04f 35ff 	mov.w	r5, #4294967295
 800b3a6:	e9c4 8900 	strd	r8, r9, [r4]
 800b3aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b3ae:	e7c4      	b.n	800b33a <__ieee754_rem_pio2+0x7a>
 800b3b0:	a381      	add	r3, pc, #516	@ (adr r3, 800b5b8 <__ieee754_rem_pio2+0x2f8>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f4 ff2d 	bl	8000214 <__adddf3>
 800b3ba:	a381      	add	r3, pc, #516	@ (adr r3, 800b5c0 <__ieee754_rem_pio2+0x300>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	460f      	mov	r7, r1
 800b3c4:	f7f4 ff26 	bl	8000214 <__adddf3>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	4689      	mov	r9, r1
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	f7f4 ff1c 	bl	8000210 <__aeabi_dsub>
 800b3d8:	a379      	add	r3, pc, #484	@ (adr r3, 800b5c0 <__ieee754_rem_pio2+0x300>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	e7de      	b.n	800b39e <__ieee754_rem_pio2+0xde>
 800b3e0:	4b82      	ldr	r3, [pc, #520]	@ (800b5ec <__ieee754_rem_pio2+0x32c>)
 800b3e2:	4598      	cmp	r8, r3
 800b3e4:	f200 80d1 	bhi.w	800b58a <__ieee754_rem_pio2+0x2ca>
 800b3e8:	f000 f966 	bl	800b6b8 <fabs>
 800b3ec:	ec57 6b10 	vmov	r6, r7, d0
 800b3f0:	a375      	add	r3, pc, #468	@ (adr r3, 800b5c8 <__ieee754_rem_pio2+0x308>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	f7f5 f8c1 	bl	8000580 <__aeabi_dmul>
 800b3fe:	4b7c      	ldr	r3, [pc, #496]	@ (800b5f0 <__ieee754_rem_pio2+0x330>)
 800b400:	2200      	movs	r2, #0
 800b402:	f7f4 ff07 	bl	8000214 <__adddf3>
 800b406:	f7f5 fb55 	bl	8000ab4 <__aeabi_d2iz>
 800b40a:	4605      	mov	r5, r0
 800b40c:	f7f5 f84e 	bl	80004ac <__aeabi_i2d>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b418:	a363      	add	r3, pc, #396	@ (adr r3, 800b5a8 <__ieee754_rem_pio2+0x2e8>)
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	f7f5 f8af 	bl	8000580 <__aeabi_dmul>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	4630      	mov	r0, r6
 800b428:	4639      	mov	r1, r7
 800b42a:	f7f4 fef1 	bl	8000210 <__aeabi_dsub>
 800b42e:	a360      	add	r3, pc, #384	@ (adr r3, 800b5b0 <__ieee754_rem_pio2+0x2f0>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	4682      	mov	sl, r0
 800b436:	468b      	mov	fp, r1
 800b438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43c:	f7f5 f8a0 	bl	8000580 <__aeabi_dmul>
 800b440:	2d1f      	cmp	r5, #31
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	dc0c      	bgt.n	800b462 <__ieee754_rem_pio2+0x1a2>
 800b448:	4b6a      	ldr	r3, [pc, #424]	@ (800b5f4 <__ieee754_rem_pio2+0x334>)
 800b44a:	1e6a      	subs	r2, r5, #1
 800b44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b450:	4543      	cmp	r3, r8
 800b452:	d006      	beq.n	800b462 <__ieee754_rem_pio2+0x1a2>
 800b454:	4632      	mov	r2, r6
 800b456:	463b      	mov	r3, r7
 800b458:	4650      	mov	r0, sl
 800b45a:	4659      	mov	r1, fp
 800b45c:	f7f4 fed8 	bl	8000210 <__aeabi_dsub>
 800b460:	e00e      	b.n	800b480 <__ieee754_rem_pio2+0x1c0>
 800b462:	463b      	mov	r3, r7
 800b464:	4632      	mov	r2, r6
 800b466:	4650      	mov	r0, sl
 800b468:	4659      	mov	r1, fp
 800b46a:	f7f4 fed1 	bl	8000210 <__aeabi_dsub>
 800b46e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b472:	9305      	str	r3, [sp, #20]
 800b474:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b478:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	dc02      	bgt.n	800b486 <__ieee754_rem_pio2+0x1c6>
 800b480:	e9c4 0100 	strd	r0, r1, [r4]
 800b484:	e039      	b.n	800b4fa <__ieee754_rem_pio2+0x23a>
 800b486:	a34c      	add	r3, pc, #304	@ (adr r3, 800b5b8 <__ieee754_rem_pio2+0x2f8>)
 800b488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b490:	f7f5 f876 	bl	8000580 <__aeabi_dmul>
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4650      	mov	r0, sl
 800b49e:	4659      	mov	r1, fp
 800b4a0:	f7f4 feb6 	bl	8000210 <__aeabi_dsub>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4680      	mov	r8, r0
 800b4aa:	4689      	mov	r9, r1
 800b4ac:	4650      	mov	r0, sl
 800b4ae:	4659      	mov	r1, fp
 800b4b0:	f7f4 feae 	bl	8000210 <__aeabi_dsub>
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	f7f4 feaa 	bl	8000210 <__aeabi_dsub>
 800b4bc:	a340      	add	r3, pc, #256	@ (adr r3, 800b5c0 <__ieee754_rem_pio2+0x300>)
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ca:	f7f5 f859 	bl	8000580 <__aeabi_dmul>
 800b4ce:	4632      	mov	r2, r6
 800b4d0:	463b      	mov	r3, r7
 800b4d2:	f7f4 fe9d 	bl	8000210 <__aeabi_dsub>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4606      	mov	r6, r0
 800b4dc:	460f      	mov	r7, r1
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	f7f4 fe95 	bl	8000210 <__aeabi_dsub>
 800b4e6:	9a05      	ldr	r2, [sp, #20]
 800b4e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	2b31      	cmp	r3, #49	@ 0x31
 800b4f0:	dc20      	bgt.n	800b534 <__ieee754_rem_pio2+0x274>
 800b4f2:	e9c4 0100 	strd	r0, r1, [r4]
 800b4f6:	46c2      	mov	sl, r8
 800b4f8:	46cb      	mov	fp, r9
 800b4fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b4fe:	4650      	mov	r0, sl
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	4659      	mov	r1, fp
 800b506:	f7f4 fe83 	bl	8000210 <__aeabi_dsub>
 800b50a:	463b      	mov	r3, r7
 800b50c:	4632      	mov	r2, r6
 800b50e:	f7f4 fe7f 	bl	8000210 <__aeabi_dsub>
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b51a:	f6bf af0e 	bge.w	800b33a <__ieee754_rem_pio2+0x7a>
 800b51e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b522:	6063      	str	r3, [r4, #4]
 800b524:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b528:	f8c4 8000 	str.w	r8, [r4]
 800b52c:	60a0      	str	r0, [r4, #8]
 800b52e:	60e3      	str	r3, [r4, #12]
 800b530:	426d      	negs	r5, r5
 800b532:	e702      	b.n	800b33a <__ieee754_rem_pio2+0x7a>
 800b534:	a326      	add	r3, pc, #152	@ (adr r3, 800b5d0 <__ieee754_rem_pio2+0x310>)
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b53e:	f7f5 f81f 	bl	8000580 <__aeabi_dmul>
 800b542:	4606      	mov	r6, r0
 800b544:	460f      	mov	r7, r1
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4640      	mov	r0, r8
 800b54c:	4649      	mov	r1, r9
 800b54e:	f7f4 fe5f 	bl	8000210 <__aeabi_dsub>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4682      	mov	sl, r0
 800b558:	468b      	mov	fp, r1
 800b55a:	4640      	mov	r0, r8
 800b55c:	4649      	mov	r1, r9
 800b55e:	f7f4 fe57 	bl	8000210 <__aeabi_dsub>
 800b562:	4632      	mov	r2, r6
 800b564:	463b      	mov	r3, r7
 800b566:	f7f4 fe53 	bl	8000210 <__aeabi_dsub>
 800b56a:	a31b      	add	r3, pc, #108	@ (adr r3, 800b5d8 <__ieee754_rem_pio2+0x318>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	4606      	mov	r6, r0
 800b572:	460f      	mov	r7, r1
 800b574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b578:	f7f5 f802 	bl	8000580 <__aeabi_dmul>
 800b57c:	4632      	mov	r2, r6
 800b57e:	463b      	mov	r3, r7
 800b580:	f7f4 fe46 	bl	8000210 <__aeabi_dsub>
 800b584:	4606      	mov	r6, r0
 800b586:	460f      	mov	r7, r1
 800b588:	e764      	b.n	800b454 <__ieee754_rem_pio2+0x194>
 800b58a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f8 <__ieee754_rem_pio2+0x338>)
 800b58c:	4598      	cmp	r8, r3
 800b58e:	d935      	bls.n	800b5fc <__ieee754_rem_pio2+0x33c>
 800b590:	4632      	mov	r2, r6
 800b592:	463b      	mov	r3, r7
 800b594:	4630      	mov	r0, r6
 800b596:	4639      	mov	r1, r7
 800b598:	f7f4 fe3a 	bl	8000210 <__aeabi_dsub>
 800b59c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b5a0:	e9c4 0100 	strd	r0, r1, [r4]
 800b5a4:	e69e      	b.n	800b2e4 <__ieee754_rem_pio2+0x24>
 800b5a6:	bf00      	nop
 800b5a8:	54400000 	.word	0x54400000
 800b5ac:	3ff921fb 	.word	0x3ff921fb
 800b5b0:	1a626331 	.word	0x1a626331
 800b5b4:	3dd0b461 	.word	0x3dd0b461
 800b5b8:	1a600000 	.word	0x1a600000
 800b5bc:	3dd0b461 	.word	0x3dd0b461
 800b5c0:	2e037073 	.word	0x2e037073
 800b5c4:	3ba3198a 	.word	0x3ba3198a
 800b5c8:	6dc9c883 	.word	0x6dc9c883
 800b5cc:	3fe45f30 	.word	0x3fe45f30
 800b5d0:	2e000000 	.word	0x2e000000
 800b5d4:	3ba3198a 	.word	0x3ba3198a
 800b5d8:	252049c1 	.word	0x252049c1
 800b5dc:	397b839a 	.word	0x397b839a
 800b5e0:	3fe921fb 	.word	0x3fe921fb
 800b5e4:	4002d97b 	.word	0x4002d97b
 800b5e8:	3ff921fb 	.word	0x3ff921fb
 800b5ec:	413921fb 	.word	0x413921fb
 800b5f0:	3fe00000 	.word	0x3fe00000
 800b5f4:	08010ec4 	.word	0x08010ec4
 800b5f8:	7fefffff 	.word	0x7fefffff
 800b5fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b600:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b604:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b608:	4630      	mov	r0, r6
 800b60a:	460f      	mov	r7, r1
 800b60c:	f7f5 fa52 	bl	8000ab4 <__aeabi_d2iz>
 800b610:	f7f4 ff4c 	bl	80004ac <__aeabi_i2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b620:	f7f4 fdf6 	bl	8000210 <__aeabi_dsub>
 800b624:	4b22      	ldr	r3, [pc, #136]	@ (800b6b0 <__ieee754_rem_pio2+0x3f0>)
 800b626:	2200      	movs	r2, #0
 800b628:	f7f4 ffaa 	bl	8000580 <__aeabi_dmul>
 800b62c:	460f      	mov	r7, r1
 800b62e:	4606      	mov	r6, r0
 800b630:	f7f5 fa40 	bl	8000ab4 <__aeabi_d2iz>
 800b634:	f7f4 ff3a 	bl	80004ac <__aeabi_i2d>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b644:	f7f4 fde4 	bl	8000210 <__aeabi_dsub>
 800b648:	4b19      	ldr	r3, [pc, #100]	@ (800b6b0 <__ieee754_rem_pio2+0x3f0>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	f7f4 ff98 	bl	8000580 <__aeabi_dmul>
 800b650:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b654:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b658:	f04f 0803 	mov.w	r8, #3
 800b65c:	2600      	movs	r6, #0
 800b65e:	2700      	movs	r7, #0
 800b660:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b664:	4632      	mov	r2, r6
 800b666:	463b      	mov	r3, r7
 800b668:	46c2      	mov	sl, r8
 800b66a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b66e:	f7f5 f9ef 	bl	8000a50 <__aeabi_dcmpeq>
 800b672:	2800      	cmp	r0, #0
 800b674:	d1f4      	bne.n	800b660 <__ieee754_rem_pio2+0x3a0>
 800b676:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b4 <__ieee754_rem_pio2+0x3f4>)
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	2302      	movs	r3, #2
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	462a      	mov	r2, r5
 800b680:	4653      	mov	r3, sl
 800b682:	4621      	mov	r1, r4
 800b684:	a806      	add	r0, sp, #24
 800b686:	f000 f81f 	bl	800b6c8 <__kernel_rem_pio2>
 800b68a:	9b04      	ldr	r3, [sp, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	4605      	mov	r5, r0
 800b690:	f6bf ae53 	bge.w	800b33a <__ieee754_rem_pio2+0x7a>
 800b694:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b698:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b69c:	e9c4 2300 	strd	r2, r3, [r4]
 800b6a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b6a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b6ac:	e740      	b.n	800b530 <__ieee754_rem_pio2+0x270>
 800b6ae:	bf00      	nop
 800b6b0:	41700000 	.word	0x41700000
 800b6b4:	08010f44 	.word	0x08010f44

0800b6b8 <fabs>:
 800b6b8:	ec51 0b10 	vmov	r0, r1, d0
 800b6bc:	4602      	mov	r2, r0
 800b6be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b6c2:	ec43 2b10 	vmov	d0, r2, r3
 800b6c6:	4770      	bx	lr

0800b6c8 <__kernel_rem_pio2>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	ed2d 8b02 	vpush	{d8}
 800b6d0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b6d4:	f112 0f14 	cmn.w	r2, #20
 800b6d8:	9306      	str	r3, [sp, #24]
 800b6da:	9104      	str	r1, [sp, #16]
 800b6dc:	4bbe      	ldr	r3, [pc, #760]	@ (800b9d8 <__kernel_rem_pio2+0x310>)
 800b6de:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b6e0:	9008      	str	r0, [sp, #32]
 800b6e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	9b06      	ldr	r3, [sp, #24]
 800b6ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6ee:	bfa8      	it	ge
 800b6f0:	1ed4      	subge	r4, r2, #3
 800b6f2:	9305      	str	r3, [sp, #20]
 800b6f4:	bfb2      	itee	lt
 800b6f6:	2400      	movlt	r4, #0
 800b6f8:	2318      	movge	r3, #24
 800b6fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800b6fe:	f06f 0317 	mvn.w	r3, #23
 800b702:	fb04 3303 	mla	r3, r4, r3, r3
 800b706:	eb03 0b02 	add.w	fp, r3, r2
 800b70a:	9b00      	ldr	r3, [sp, #0]
 800b70c:	9a05      	ldr	r2, [sp, #20]
 800b70e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b9c8 <__kernel_rem_pio2+0x300>
 800b712:	eb03 0802 	add.w	r8, r3, r2
 800b716:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b718:	1aa7      	subs	r7, r4, r2
 800b71a:	ae20      	add	r6, sp, #128	@ 0x80
 800b71c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b720:	2500      	movs	r5, #0
 800b722:	4545      	cmp	r5, r8
 800b724:	dd13      	ble.n	800b74e <__kernel_rem_pio2+0x86>
 800b726:	9b06      	ldr	r3, [sp, #24]
 800b728:	aa20      	add	r2, sp, #128	@ 0x80
 800b72a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b72e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b732:	f04f 0800 	mov.w	r8, #0
 800b736:	9b00      	ldr	r3, [sp, #0]
 800b738:	4598      	cmp	r8, r3
 800b73a:	dc31      	bgt.n	800b7a0 <__kernel_rem_pio2+0xd8>
 800b73c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b9c8 <__kernel_rem_pio2+0x300>
 800b740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b744:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b748:	462f      	mov	r7, r5
 800b74a:	2600      	movs	r6, #0
 800b74c:	e01b      	b.n	800b786 <__kernel_rem_pio2+0xbe>
 800b74e:	42ef      	cmn	r7, r5
 800b750:	d407      	bmi.n	800b762 <__kernel_rem_pio2+0x9a>
 800b752:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b756:	f7f4 fea9 	bl	80004ac <__aeabi_i2d>
 800b75a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b75e:	3501      	adds	r5, #1
 800b760:	e7df      	b.n	800b722 <__kernel_rem_pio2+0x5a>
 800b762:	ec51 0b18 	vmov	r0, r1, d8
 800b766:	e7f8      	b.n	800b75a <__kernel_rem_pio2+0x92>
 800b768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b76c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b770:	f7f4 ff06 	bl	8000580 <__aeabi_dmul>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b77c:	f7f4 fd4a 	bl	8000214 <__adddf3>
 800b780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b784:	3601      	adds	r6, #1
 800b786:	9b05      	ldr	r3, [sp, #20]
 800b788:	429e      	cmp	r6, r3
 800b78a:	f1a7 0708 	sub.w	r7, r7, #8
 800b78e:	ddeb      	ble.n	800b768 <__kernel_rem_pio2+0xa0>
 800b790:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b794:	f108 0801 	add.w	r8, r8, #1
 800b798:	ecaa 7b02 	vstmia	sl!, {d7}
 800b79c:	3508      	adds	r5, #8
 800b79e:	e7ca      	b.n	800b736 <__kernel_rem_pio2+0x6e>
 800b7a0:	9b00      	ldr	r3, [sp, #0]
 800b7a2:	f8dd 8000 	ldr.w	r8, [sp]
 800b7a6:	aa0c      	add	r2, sp, #48	@ 0x30
 800b7a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b7b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b7b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b7ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7bc:	ab98      	add	r3, sp, #608	@ 0x260
 800b7be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b7c2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b7c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b7ca:	ac0c      	add	r4, sp, #48	@ 0x30
 800b7cc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b7ce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b7d2:	46a1      	mov	r9, r4
 800b7d4:	46c2      	mov	sl, r8
 800b7d6:	f1ba 0f00 	cmp.w	sl, #0
 800b7da:	f1a5 0508 	sub.w	r5, r5, #8
 800b7de:	dc77      	bgt.n	800b8d0 <__kernel_rem_pio2+0x208>
 800b7e0:	4658      	mov	r0, fp
 800b7e2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b7e6:	f000 fac7 	bl	800bd78 <scalbn>
 800b7ea:	ec57 6b10 	vmov	r6, r7, d0
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 fec2 	bl	8000580 <__aeabi_dmul>
 800b7fc:	ec41 0b10 	vmov	d0, r0, r1
 800b800:	f000 fb3a 	bl	800be78 <floor>
 800b804:	4b75      	ldr	r3, [pc, #468]	@ (800b9dc <__kernel_rem_pio2+0x314>)
 800b806:	ec51 0b10 	vmov	r0, r1, d0
 800b80a:	2200      	movs	r2, #0
 800b80c:	f7f4 feb8 	bl	8000580 <__aeabi_dmul>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f4 fcfa 	bl	8000210 <__aeabi_dsub>
 800b81c:	460f      	mov	r7, r1
 800b81e:	4606      	mov	r6, r0
 800b820:	f7f5 f948 	bl	8000ab4 <__aeabi_d2iz>
 800b824:	9002      	str	r0, [sp, #8]
 800b826:	f7f4 fe41 	bl	80004ac <__aeabi_i2d>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f4 fced 	bl	8000210 <__aeabi_dsub>
 800b836:	f1bb 0f00 	cmp.w	fp, #0
 800b83a:	4606      	mov	r6, r0
 800b83c:	460f      	mov	r7, r1
 800b83e:	dd6c      	ble.n	800b91a <__kernel_rem_pio2+0x252>
 800b840:	f108 31ff 	add.w	r1, r8, #4294967295
 800b844:	ab0c      	add	r3, sp, #48	@ 0x30
 800b846:	9d02      	ldr	r5, [sp, #8]
 800b848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b84c:	f1cb 0018 	rsb	r0, fp, #24
 800b850:	fa43 f200 	asr.w	r2, r3, r0
 800b854:	4415      	add	r5, r2
 800b856:	4082      	lsls	r2, r0
 800b858:	1a9b      	subs	r3, r3, r2
 800b85a:	aa0c      	add	r2, sp, #48	@ 0x30
 800b85c:	9502      	str	r5, [sp, #8]
 800b85e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b862:	f1cb 0217 	rsb	r2, fp, #23
 800b866:	fa43 f902 	asr.w	r9, r3, r2
 800b86a:	f1b9 0f00 	cmp.w	r9, #0
 800b86e:	dd64      	ble.n	800b93a <__kernel_rem_pio2+0x272>
 800b870:	9b02      	ldr	r3, [sp, #8]
 800b872:	2200      	movs	r2, #0
 800b874:	3301      	adds	r3, #1
 800b876:	9302      	str	r3, [sp, #8]
 800b878:	4615      	mov	r5, r2
 800b87a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b87e:	4590      	cmp	r8, r2
 800b880:	f300 80b8 	bgt.w	800b9f4 <__kernel_rem_pio2+0x32c>
 800b884:	f1bb 0f00 	cmp.w	fp, #0
 800b888:	dd07      	ble.n	800b89a <__kernel_rem_pio2+0x1d2>
 800b88a:	f1bb 0f01 	cmp.w	fp, #1
 800b88e:	f000 80bf 	beq.w	800ba10 <__kernel_rem_pio2+0x348>
 800b892:	f1bb 0f02 	cmp.w	fp, #2
 800b896:	f000 80c6 	beq.w	800ba26 <__kernel_rem_pio2+0x35e>
 800b89a:	f1b9 0f02 	cmp.w	r9, #2
 800b89e:	d14c      	bne.n	800b93a <__kernel_rem_pio2+0x272>
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	463b      	mov	r3, r7
 800b8a4:	494e      	ldr	r1, [pc, #312]	@ (800b9e0 <__kernel_rem_pio2+0x318>)
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	f7f4 fcb2 	bl	8000210 <__aeabi_dsub>
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	460f      	mov	r7, r1
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d042      	beq.n	800b93a <__kernel_rem_pio2+0x272>
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b9d0 <__kernel_rem_pio2+0x308>
 800b8ba:	f000 fa5d 	bl	800bd78 <scalbn>
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	ec53 2b10 	vmov	r2, r3, d0
 800b8c6:	f7f4 fca3 	bl	8000210 <__aeabi_dsub>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	e034      	b.n	800b93a <__kernel_rem_pio2+0x272>
 800b8d0:	4b44      	ldr	r3, [pc, #272]	@ (800b9e4 <__kernel_rem_pio2+0x31c>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d8:	f7f4 fe52 	bl	8000580 <__aeabi_dmul>
 800b8dc:	f7f5 f8ea 	bl	8000ab4 <__aeabi_d2iz>
 800b8e0:	f7f4 fde4 	bl	80004ac <__aeabi_i2d>
 800b8e4:	4b40      	ldr	r3, [pc, #256]	@ (800b9e8 <__kernel_rem_pio2+0x320>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	460f      	mov	r7, r1
 800b8ec:	f7f4 fe48 	bl	8000580 <__aeabi_dmul>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f8:	f7f4 fc8a 	bl	8000210 <__aeabi_dsub>
 800b8fc:	f7f5 f8da 	bl	8000ab4 <__aeabi_d2iz>
 800b900:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b904:	f849 0b04 	str.w	r0, [r9], #4
 800b908:	4639      	mov	r1, r7
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7f4 fc82 	bl	8000214 <__adddf3>
 800b910:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b918:	e75d      	b.n	800b7d6 <__kernel_rem_pio2+0x10e>
 800b91a:	d107      	bne.n	800b92c <__kernel_rem_pio2+0x264>
 800b91c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b920:	aa0c      	add	r2, sp, #48	@ 0x30
 800b922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b926:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b92a:	e79e      	b.n	800b86a <__kernel_rem_pio2+0x1a2>
 800b92c:	4b2f      	ldr	r3, [pc, #188]	@ (800b9ec <__kernel_rem_pio2+0x324>)
 800b92e:	2200      	movs	r2, #0
 800b930:	f7f5 f8ac 	bl	8000a8c <__aeabi_dcmpge>
 800b934:	2800      	cmp	r0, #0
 800b936:	d143      	bne.n	800b9c0 <__kernel_rem_pio2+0x2f8>
 800b938:	4681      	mov	r9, r0
 800b93a:	2200      	movs	r2, #0
 800b93c:	2300      	movs	r3, #0
 800b93e:	4630      	mov	r0, r6
 800b940:	4639      	mov	r1, r7
 800b942:	f7f5 f885 	bl	8000a50 <__aeabi_dcmpeq>
 800b946:	2800      	cmp	r0, #0
 800b948:	f000 80bf 	beq.w	800baca <__kernel_rem_pio2+0x402>
 800b94c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b950:	2200      	movs	r2, #0
 800b952:	9900      	ldr	r1, [sp, #0]
 800b954:	428b      	cmp	r3, r1
 800b956:	da6e      	bge.n	800ba36 <__kernel_rem_pio2+0x36e>
 800b958:	2a00      	cmp	r2, #0
 800b95a:	f000 8089 	beq.w	800ba70 <__kernel_rem_pio2+0x3a8>
 800b95e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b962:	ab0c      	add	r3, sp, #48	@ 0x30
 800b964:	f1ab 0b18 	sub.w	fp, fp, #24
 800b968:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0f6      	beq.n	800b95e <__kernel_rem_pio2+0x296>
 800b970:	4658      	mov	r0, fp
 800b972:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b9d0 <__kernel_rem_pio2+0x308>
 800b976:	f000 f9ff 	bl	800bd78 <scalbn>
 800b97a:	f108 0301 	add.w	r3, r8, #1
 800b97e:	00da      	lsls	r2, r3, #3
 800b980:	9205      	str	r2, [sp, #20]
 800b982:	ec55 4b10 	vmov	r4, r5, d0
 800b986:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b988:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b9e4 <__kernel_rem_pio2+0x31c>
 800b98c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b990:	4646      	mov	r6, r8
 800b992:	f04f 0a00 	mov.w	sl, #0
 800b996:	2e00      	cmp	r6, #0
 800b998:	f280 80cf 	bge.w	800bb3a <__kernel_rem_pio2+0x472>
 800b99c:	4644      	mov	r4, r8
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	f2c0 80fd 	blt.w	800bb9e <__kernel_rem_pio2+0x4d6>
 800b9a4:	4b12      	ldr	r3, [pc, #72]	@ (800b9f0 <__kernel_rem_pio2+0x328>)
 800b9a6:	461f      	mov	r7, r3
 800b9a8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b9aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9ae:	9306      	str	r3, [sp, #24]
 800b9b0:	f04f 0a00 	mov.w	sl, #0
 800b9b4:	f04f 0b00 	mov.w	fp, #0
 800b9b8:	2600      	movs	r6, #0
 800b9ba:	eba8 0504 	sub.w	r5, r8, r4
 800b9be:	e0e2      	b.n	800bb86 <__kernel_rem_pio2+0x4be>
 800b9c0:	f04f 0902 	mov.w	r9, #2
 800b9c4:	e754      	b.n	800b870 <__kernel_rem_pio2+0x1a8>
 800b9c6:	bf00      	nop
	...
 800b9d4:	3ff00000 	.word	0x3ff00000
 800b9d8:	08011090 	.word	0x08011090
 800b9dc:	40200000 	.word	0x40200000
 800b9e0:	3ff00000 	.word	0x3ff00000
 800b9e4:	3e700000 	.word	0x3e700000
 800b9e8:	41700000 	.word	0x41700000
 800b9ec:	3fe00000 	.word	0x3fe00000
 800b9f0:	08011050 	.word	0x08011050
 800b9f4:	f854 3b04 	ldr.w	r3, [r4], #4
 800b9f8:	b945      	cbnz	r5, 800ba0c <__kernel_rem_pio2+0x344>
 800b9fa:	b123      	cbz	r3, 800ba06 <__kernel_rem_pio2+0x33e>
 800b9fc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ba00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba04:	2301      	movs	r3, #1
 800ba06:	3201      	adds	r2, #1
 800ba08:	461d      	mov	r5, r3
 800ba0a:	e738      	b.n	800b87e <__kernel_rem_pio2+0x1b6>
 800ba0c:	1acb      	subs	r3, r1, r3
 800ba0e:	e7f7      	b.n	800ba00 <__kernel_rem_pio2+0x338>
 800ba10:	f108 32ff 	add.w	r2, r8, #4294967295
 800ba14:	ab0c      	add	r3, sp, #48	@ 0x30
 800ba16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ba1e:	a90c      	add	r1, sp, #48	@ 0x30
 800ba20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba24:	e739      	b.n	800b89a <__kernel_rem_pio2+0x1d2>
 800ba26:	f108 32ff 	add.w	r2, r8, #4294967295
 800ba2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ba2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba34:	e7f3      	b.n	800ba1e <__kernel_rem_pio2+0x356>
 800ba36:	a90c      	add	r1, sp, #48	@ 0x30
 800ba38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	430a      	orrs	r2, r1
 800ba40:	e787      	b.n	800b952 <__kernel_rem_pio2+0x28a>
 800ba42:	3401      	adds	r4, #1
 800ba44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba48:	2a00      	cmp	r2, #0
 800ba4a:	d0fa      	beq.n	800ba42 <__kernel_rem_pio2+0x37a>
 800ba4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ba52:	eb0d 0503 	add.w	r5, sp, r3
 800ba56:	9b06      	ldr	r3, [sp, #24]
 800ba58:	aa20      	add	r2, sp, #128	@ 0x80
 800ba5a:	4443      	add	r3, r8
 800ba5c:	f108 0701 	add.w	r7, r8, #1
 800ba60:	3d98      	subs	r5, #152	@ 0x98
 800ba62:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ba66:	4444      	add	r4, r8
 800ba68:	42bc      	cmp	r4, r7
 800ba6a:	da04      	bge.n	800ba76 <__kernel_rem_pio2+0x3ae>
 800ba6c:	46a0      	mov	r8, r4
 800ba6e:	e6a2      	b.n	800b7b6 <__kernel_rem_pio2+0xee>
 800ba70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba72:	2401      	movs	r4, #1
 800ba74:	e7e6      	b.n	800ba44 <__kernel_rem_pio2+0x37c>
 800ba76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ba7c:	f7f4 fd16 	bl	80004ac <__aeabi_i2d>
 800ba80:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800bd48 <__kernel_rem_pio2+0x680>
 800ba84:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba90:	46b2      	mov	sl, r6
 800ba92:	f04f 0800 	mov.w	r8, #0
 800ba96:	9b05      	ldr	r3, [sp, #20]
 800ba98:	4598      	cmp	r8, r3
 800ba9a:	dd05      	ble.n	800baa8 <__kernel_rem_pio2+0x3e0>
 800ba9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800baa0:	3701      	adds	r7, #1
 800baa2:	eca5 7b02 	vstmia	r5!, {d7}
 800baa6:	e7df      	b.n	800ba68 <__kernel_rem_pio2+0x3a0>
 800baa8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800baac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bab0:	f7f4 fd66 	bl	8000580 <__aeabi_dmul>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800babc:	f7f4 fbaa 	bl	8000214 <__adddf3>
 800bac0:	f108 0801 	add.w	r8, r8, #1
 800bac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bac8:	e7e5      	b.n	800ba96 <__kernel_rem_pio2+0x3ce>
 800baca:	f1cb 0000 	rsb	r0, fp, #0
 800bace:	ec47 6b10 	vmov	d0, r6, r7
 800bad2:	f000 f951 	bl	800bd78 <scalbn>
 800bad6:	ec55 4b10 	vmov	r4, r5, d0
 800bada:	4b9d      	ldr	r3, [pc, #628]	@ (800bd50 <__kernel_rem_pio2+0x688>)
 800badc:	2200      	movs	r2, #0
 800bade:	4620      	mov	r0, r4
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7f4 ffd3 	bl	8000a8c <__aeabi_dcmpge>
 800bae6:	b300      	cbz	r0, 800bb2a <__kernel_rem_pio2+0x462>
 800bae8:	4b9a      	ldr	r3, [pc, #616]	@ (800bd54 <__kernel_rem_pio2+0x68c>)
 800baea:	2200      	movs	r2, #0
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	f7f4 fd46 	bl	8000580 <__aeabi_dmul>
 800baf4:	f7f4 ffde 	bl	8000ab4 <__aeabi_d2iz>
 800baf8:	4606      	mov	r6, r0
 800bafa:	f7f4 fcd7 	bl	80004ac <__aeabi_i2d>
 800bafe:	4b94      	ldr	r3, [pc, #592]	@ (800bd50 <__kernel_rem_pio2+0x688>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7f4 fd3d 	bl	8000580 <__aeabi_dmul>
 800bb06:	460b      	mov	r3, r1
 800bb08:	4602      	mov	r2, r0
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f7f4 fb7f 	bl	8000210 <__aeabi_dsub>
 800bb12:	f7f4 ffcf 	bl	8000ab4 <__aeabi_d2iz>
 800bb16:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb18:	f10b 0b18 	add.w	fp, fp, #24
 800bb1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bb20:	f108 0801 	add.w	r8, r8, #1
 800bb24:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800bb28:	e722      	b.n	800b970 <__kernel_rem_pio2+0x2a8>
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	f7f4 ffc1 	bl	8000ab4 <__aeabi_d2iz>
 800bb32:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bb38:	e71a      	b.n	800b970 <__kernel_rem_pio2+0x2a8>
 800bb3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb40:	f7f4 fcb4 	bl	80004ac <__aeabi_i2d>
 800bb44:	4622      	mov	r2, r4
 800bb46:	462b      	mov	r3, r5
 800bb48:	f7f4 fd1a 	bl	8000580 <__aeabi_dmul>
 800bb4c:	4652      	mov	r2, sl
 800bb4e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800bb52:	465b      	mov	r3, fp
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fd12 	bl	8000580 <__aeabi_dmul>
 800bb5c:	3e01      	subs	r6, #1
 800bb5e:	4604      	mov	r4, r0
 800bb60:	460d      	mov	r5, r1
 800bb62:	e718      	b.n	800b996 <__kernel_rem_pio2+0x2ce>
 800bb64:	9906      	ldr	r1, [sp, #24]
 800bb66:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800bb6a:	9106      	str	r1, [sp, #24]
 800bb6c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800bb70:	f7f4 fd06 	bl	8000580 <__aeabi_dmul>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4650      	mov	r0, sl
 800bb7a:	4659      	mov	r1, fp
 800bb7c:	f7f4 fb4a 	bl	8000214 <__adddf3>
 800bb80:	3601      	adds	r6, #1
 800bb82:	4682      	mov	sl, r0
 800bb84:	468b      	mov	fp, r1
 800bb86:	9b00      	ldr	r3, [sp, #0]
 800bb88:	429e      	cmp	r6, r3
 800bb8a:	dc01      	bgt.n	800bb90 <__kernel_rem_pio2+0x4c8>
 800bb8c:	42b5      	cmp	r5, r6
 800bb8e:	dae9      	bge.n	800bb64 <__kernel_rem_pio2+0x49c>
 800bb90:	ab48      	add	r3, sp, #288	@ 0x120
 800bb92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bb96:	e9c5 ab00 	strd	sl, fp, [r5]
 800bb9a:	3c01      	subs	r4, #1
 800bb9c:	e6ff      	b.n	800b99e <__kernel_rem_pio2+0x2d6>
 800bb9e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	dc0b      	bgt.n	800bbbc <__kernel_rem_pio2+0x4f4>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	dc39      	bgt.n	800bc1c <__kernel_rem_pio2+0x554>
 800bba8:	d05d      	beq.n	800bc66 <__kernel_rem_pio2+0x59e>
 800bbaa:	9b02      	ldr	r3, [sp, #8]
 800bbac:	f003 0007 	and.w	r0, r3, #7
 800bbb0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800bbb4:	ecbd 8b02 	vpop	{d8}
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	d1f3      	bne.n	800bbaa <__kernel_rem_pio2+0x4e2>
 800bbc2:	9b05      	ldr	r3, [sp, #20]
 800bbc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bbc8:	eb0d 0403 	add.w	r4, sp, r3
 800bbcc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800bbd0:	4625      	mov	r5, r4
 800bbd2:	46c2      	mov	sl, r8
 800bbd4:	f1ba 0f00 	cmp.w	sl, #0
 800bbd8:	f1a5 0508 	sub.w	r5, r5, #8
 800bbdc:	dc6b      	bgt.n	800bcb6 <__kernel_rem_pio2+0x5ee>
 800bbde:	4645      	mov	r5, r8
 800bbe0:	2d01      	cmp	r5, #1
 800bbe2:	f1a4 0408 	sub.w	r4, r4, #8
 800bbe6:	f300 8087 	bgt.w	800bcf8 <__kernel_rem_pio2+0x630>
 800bbea:	9c05      	ldr	r4, [sp, #20]
 800bbec:	ab48      	add	r3, sp, #288	@ 0x120
 800bbee:	441c      	add	r4, r3
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	f1b8 0f01 	cmp.w	r8, #1
 800bbf8:	f300 809c 	bgt.w	800bd34 <__kernel_rem_pio2+0x66c>
 800bbfc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800bc00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800bc04:	f1b9 0f00 	cmp.w	r9, #0
 800bc08:	f040 80a6 	bne.w	800bd58 <__kernel_rem_pio2+0x690>
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	e9c3 7800 	strd	r7, r8, [r3]
 800bc12:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bc16:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bc1a:	e7c6      	b.n	800bbaa <__kernel_rem_pio2+0x4e2>
 800bc1c:	9d05      	ldr	r5, [sp, #20]
 800bc1e:	ab48      	add	r3, sp, #288	@ 0x120
 800bc20:	441d      	add	r5, r3
 800bc22:	4644      	mov	r4, r8
 800bc24:	2000      	movs	r0, #0
 800bc26:	2100      	movs	r1, #0
 800bc28:	2c00      	cmp	r4, #0
 800bc2a:	da35      	bge.n	800bc98 <__kernel_rem_pio2+0x5d0>
 800bc2c:	f1b9 0f00 	cmp.w	r9, #0
 800bc30:	d038      	beq.n	800bca4 <__kernel_rem_pio2+0x5dc>
 800bc32:	4602      	mov	r2, r0
 800bc34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc38:	9c04      	ldr	r4, [sp, #16]
 800bc3a:	e9c4 2300 	strd	r2, r3, [r4]
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800bc46:	f7f4 fae3 	bl	8000210 <__aeabi_dsub>
 800bc4a:	ad4a      	add	r5, sp, #296	@ 0x128
 800bc4c:	2401      	movs	r4, #1
 800bc4e:	45a0      	cmp	r8, r4
 800bc50:	da2b      	bge.n	800bcaa <__kernel_rem_pio2+0x5e2>
 800bc52:	f1b9 0f00 	cmp.w	r9, #0
 800bc56:	d002      	beq.n	800bc5e <__kernel_rem_pio2+0x596>
 800bc58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	9b04      	ldr	r3, [sp, #16]
 800bc60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bc64:	e7a1      	b.n	800bbaa <__kernel_rem_pio2+0x4e2>
 800bc66:	9c05      	ldr	r4, [sp, #20]
 800bc68:	ab48      	add	r3, sp, #288	@ 0x120
 800bc6a:	441c      	add	r4, r3
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	f1b8 0f00 	cmp.w	r8, #0
 800bc74:	da09      	bge.n	800bc8a <__kernel_rem_pio2+0x5c2>
 800bc76:	f1b9 0f00 	cmp.w	r9, #0
 800bc7a:	d002      	beq.n	800bc82 <__kernel_rem_pio2+0x5ba>
 800bc7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc80:	4619      	mov	r1, r3
 800bc82:	9b04      	ldr	r3, [sp, #16]
 800bc84:	e9c3 0100 	strd	r0, r1, [r3]
 800bc88:	e78f      	b.n	800bbaa <__kernel_rem_pio2+0x4e2>
 800bc8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc8e:	f7f4 fac1 	bl	8000214 <__adddf3>
 800bc92:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc96:	e7eb      	b.n	800bc70 <__kernel_rem_pio2+0x5a8>
 800bc98:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bc9c:	f7f4 faba 	bl	8000214 <__adddf3>
 800bca0:	3c01      	subs	r4, #1
 800bca2:	e7c1      	b.n	800bc28 <__kernel_rem_pio2+0x560>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	e7c6      	b.n	800bc38 <__kernel_rem_pio2+0x570>
 800bcaa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bcae:	f7f4 fab1 	bl	8000214 <__adddf3>
 800bcb2:	3401      	adds	r4, #1
 800bcb4:	e7cb      	b.n	800bc4e <__kernel_rem_pio2+0x586>
 800bcb6:	ed95 7b00 	vldr	d7, [r5]
 800bcba:	ed8d 7b00 	vstr	d7, [sp]
 800bcbe:	ed95 7b02 	vldr	d7, [r5, #8]
 800bcc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcc6:	ec53 2b17 	vmov	r2, r3, d7
 800bcca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcce:	f7f4 faa1 	bl	8000214 <__adddf3>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	460f      	mov	r7, r1
 800bcda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcde:	f7f4 fa97 	bl	8000210 <__aeabi_dsub>
 800bce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bce6:	f7f4 fa95 	bl	8000214 <__adddf3>
 800bcea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bcf2:	e9c5 6700 	strd	r6, r7, [r5]
 800bcf6:	e76d      	b.n	800bbd4 <__kernel_rem_pio2+0x50c>
 800bcf8:	ed94 7b00 	vldr	d7, [r4]
 800bcfc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800bd00:	ec51 0b17 	vmov	r0, r1, d7
 800bd04:	4652      	mov	r2, sl
 800bd06:	465b      	mov	r3, fp
 800bd08:	ed8d 7b00 	vstr	d7, [sp]
 800bd0c:	f7f4 fa82 	bl	8000214 <__adddf3>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4606      	mov	r6, r0
 800bd16:	460f      	mov	r7, r1
 800bd18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd1c:	f7f4 fa78 	bl	8000210 <__aeabi_dsub>
 800bd20:	4652      	mov	r2, sl
 800bd22:	465b      	mov	r3, fp
 800bd24:	f7f4 fa76 	bl	8000214 <__adddf3>
 800bd28:	3d01      	subs	r5, #1
 800bd2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd2e:	e9c4 6700 	strd	r6, r7, [r4]
 800bd32:	e755      	b.n	800bbe0 <__kernel_rem_pio2+0x518>
 800bd34:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd38:	f7f4 fa6c 	bl	8000214 <__adddf3>
 800bd3c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd40:	e758      	b.n	800bbf4 <__kernel_rem_pio2+0x52c>
 800bd42:	bf00      	nop
 800bd44:	f3af 8000 	nop.w
	...
 800bd50:	41700000 	.word	0x41700000
 800bd54:	3e700000 	.word	0x3e700000
 800bd58:	9b04      	ldr	r3, [sp, #16]
 800bd5a:	9a04      	ldr	r2, [sp, #16]
 800bd5c:	601f      	str	r7, [r3, #0]
 800bd5e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800bd62:	605c      	str	r4, [r3, #4]
 800bd64:	609d      	str	r5, [r3, #8]
 800bd66:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd6a:	60d3      	str	r3, [r2, #12]
 800bd6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd70:	6110      	str	r0, [r2, #16]
 800bd72:	6153      	str	r3, [r2, #20]
 800bd74:	e719      	b.n	800bbaa <__kernel_rem_pio2+0x4e2>
 800bd76:	bf00      	nop

0800bd78 <scalbn>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	ec55 4b10 	vmov	r4, r5, d0
 800bd7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bd82:	4606      	mov	r6, r0
 800bd84:	462b      	mov	r3, r5
 800bd86:	b991      	cbnz	r1, 800bdae <scalbn+0x36>
 800bd88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bd8c:	4323      	orrs	r3, r4
 800bd8e:	d03d      	beq.n	800be0c <scalbn+0x94>
 800bd90:	4b35      	ldr	r3, [pc, #212]	@ (800be68 <scalbn+0xf0>)
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	2200      	movs	r2, #0
 800bd98:	f7f4 fbf2 	bl	8000580 <__aeabi_dmul>
 800bd9c:	4b33      	ldr	r3, [pc, #204]	@ (800be6c <scalbn+0xf4>)
 800bd9e:	429e      	cmp	r6, r3
 800bda0:	4604      	mov	r4, r0
 800bda2:	460d      	mov	r5, r1
 800bda4:	da0f      	bge.n	800bdc6 <scalbn+0x4e>
 800bda6:	a328      	add	r3, pc, #160	@ (adr r3, 800be48 <scalbn+0xd0>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	e01e      	b.n	800bdec <scalbn+0x74>
 800bdae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bdb2:	4291      	cmp	r1, r2
 800bdb4:	d10b      	bne.n	800bdce <scalbn+0x56>
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	4620      	mov	r0, r4
 800bdba:	4629      	mov	r1, r5
 800bdbc:	f7f4 fa2a 	bl	8000214 <__adddf3>
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	e022      	b.n	800be0c <scalbn+0x94>
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bdcc:	3936      	subs	r1, #54	@ 0x36
 800bdce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bdd2:	4296      	cmp	r6, r2
 800bdd4:	dd0d      	ble.n	800bdf2 <scalbn+0x7a>
 800bdd6:	2d00      	cmp	r5, #0
 800bdd8:	a11d      	add	r1, pc, #116	@ (adr r1, 800be50 <scalbn+0xd8>)
 800bdda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdde:	da02      	bge.n	800bde6 <scalbn+0x6e>
 800bde0:	a11d      	add	r1, pc, #116	@ (adr r1, 800be58 <scalbn+0xe0>)
 800bde2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde6:	a31a      	add	r3, pc, #104	@ (adr r3, 800be50 <scalbn+0xd8>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f7f4 fbc8 	bl	8000580 <__aeabi_dmul>
 800bdf0:	e7e6      	b.n	800bdc0 <scalbn+0x48>
 800bdf2:	1872      	adds	r2, r6, r1
 800bdf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bdf8:	428a      	cmp	r2, r1
 800bdfa:	dcec      	bgt.n	800bdd6 <scalbn+0x5e>
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	dd08      	ble.n	800be12 <scalbn+0x9a>
 800be00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800be04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800be08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be0c:	ec45 4b10 	vmov	d0, r4, r5
 800be10:	bd70      	pop	{r4, r5, r6, pc}
 800be12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800be16:	da08      	bge.n	800be2a <scalbn+0xb2>
 800be18:	2d00      	cmp	r5, #0
 800be1a:	a10b      	add	r1, pc, #44	@ (adr r1, 800be48 <scalbn+0xd0>)
 800be1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be20:	dac1      	bge.n	800bda6 <scalbn+0x2e>
 800be22:	a10f      	add	r1, pc, #60	@ (adr r1, 800be60 <scalbn+0xe8>)
 800be24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be28:	e7bd      	b.n	800bda6 <scalbn+0x2e>
 800be2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800be2e:	3236      	adds	r2, #54	@ 0x36
 800be30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800be34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be38:	4620      	mov	r0, r4
 800be3a:	4b0d      	ldr	r3, [pc, #52]	@ (800be70 <scalbn+0xf8>)
 800be3c:	4629      	mov	r1, r5
 800be3e:	2200      	movs	r2, #0
 800be40:	e7d4      	b.n	800bdec <scalbn+0x74>
 800be42:	bf00      	nop
 800be44:	f3af 8000 	nop.w
 800be48:	c2f8f359 	.word	0xc2f8f359
 800be4c:	01a56e1f 	.word	0x01a56e1f
 800be50:	8800759c 	.word	0x8800759c
 800be54:	7e37e43c 	.word	0x7e37e43c
 800be58:	8800759c 	.word	0x8800759c
 800be5c:	fe37e43c 	.word	0xfe37e43c
 800be60:	c2f8f359 	.word	0xc2f8f359
 800be64:	81a56e1f 	.word	0x81a56e1f
 800be68:	43500000 	.word	0x43500000
 800be6c:	ffff3cb0 	.word	0xffff3cb0
 800be70:	3c900000 	.word	0x3c900000
 800be74:	00000000 	.word	0x00000000

0800be78 <floor>:
 800be78:	ec51 0b10 	vmov	r0, r1, d0
 800be7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be84:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800be88:	2e13      	cmp	r6, #19
 800be8a:	460c      	mov	r4, r1
 800be8c:	4605      	mov	r5, r0
 800be8e:	4680      	mov	r8, r0
 800be90:	dc34      	bgt.n	800befc <floor+0x84>
 800be92:	2e00      	cmp	r6, #0
 800be94:	da17      	bge.n	800bec6 <floor+0x4e>
 800be96:	a332      	add	r3, pc, #200	@ (adr r3, 800bf60 <floor+0xe8>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 f9ba 	bl	8000214 <__adddf3>
 800bea0:	2200      	movs	r2, #0
 800bea2:	2300      	movs	r3, #0
 800bea4:	f7f4 fdfc 	bl	8000aa0 <__aeabi_dcmpgt>
 800bea8:	b150      	cbz	r0, 800bec0 <floor+0x48>
 800beaa:	2c00      	cmp	r4, #0
 800beac:	da55      	bge.n	800bf5a <floor+0xe2>
 800beae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800beb2:	432c      	orrs	r4, r5
 800beb4:	2500      	movs	r5, #0
 800beb6:	42ac      	cmp	r4, r5
 800beb8:	4c2b      	ldr	r4, [pc, #172]	@ (800bf68 <floor+0xf0>)
 800beba:	bf08      	it	eq
 800bebc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bec0:	4621      	mov	r1, r4
 800bec2:	4628      	mov	r0, r5
 800bec4:	e023      	b.n	800bf0e <floor+0x96>
 800bec6:	4f29      	ldr	r7, [pc, #164]	@ (800bf6c <floor+0xf4>)
 800bec8:	4137      	asrs	r7, r6
 800beca:	ea01 0307 	and.w	r3, r1, r7
 800bece:	4303      	orrs	r3, r0
 800bed0:	d01d      	beq.n	800bf0e <floor+0x96>
 800bed2:	a323      	add	r3, pc, #140	@ (adr r3, 800bf60 <floor+0xe8>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f7f4 f99c 	bl	8000214 <__adddf3>
 800bedc:	2200      	movs	r2, #0
 800bede:	2300      	movs	r3, #0
 800bee0:	f7f4 fdde 	bl	8000aa0 <__aeabi_dcmpgt>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d0eb      	beq.n	800bec0 <floor+0x48>
 800bee8:	2c00      	cmp	r4, #0
 800beea:	bfbe      	ittt	lt
 800beec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bef0:	4133      	asrlt	r3, r6
 800bef2:	18e4      	addlt	r4, r4, r3
 800bef4:	ea24 0407 	bic.w	r4, r4, r7
 800bef8:	2500      	movs	r5, #0
 800befa:	e7e1      	b.n	800bec0 <floor+0x48>
 800befc:	2e33      	cmp	r6, #51	@ 0x33
 800befe:	dd0a      	ble.n	800bf16 <floor+0x9e>
 800bf00:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bf04:	d103      	bne.n	800bf0e <floor+0x96>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	f7f4 f983 	bl	8000214 <__adddf3>
 800bf0e:	ec41 0b10 	vmov	d0, r0, r1
 800bf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf16:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bf1a:	f04f 37ff 	mov.w	r7, #4294967295
 800bf1e:	40df      	lsrs	r7, r3
 800bf20:	4207      	tst	r7, r0
 800bf22:	d0f4      	beq.n	800bf0e <floor+0x96>
 800bf24:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf60 <floor+0xe8>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	f7f4 f973 	bl	8000214 <__adddf3>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2300      	movs	r3, #0
 800bf32:	f7f4 fdb5 	bl	8000aa0 <__aeabi_dcmpgt>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d0c2      	beq.n	800bec0 <floor+0x48>
 800bf3a:	2c00      	cmp	r4, #0
 800bf3c:	da0a      	bge.n	800bf54 <floor+0xdc>
 800bf3e:	2e14      	cmp	r6, #20
 800bf40:	d101      	bne.n	800bf46 <floor+0xce>
 800bf42:	3401      	adds	r4, #1
 800bf44:	e006      	b.n	800bf54 <floor+0xdc>
 800bf46:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	40b3      	lsls	r3, r6
 800bf4e:	441d      	add	r5, r3
 800bf50:	4545      	cmp	r5, r8
 800bf52:	d3f6      	bcc.n	800bf42 <floor+0xca>
 800bf54:	ea25 0507 	bic.w	r5, r5, r7
 800bf58:	e7b2      	b.n	800bec0 <floor+0x48>
 800bf5a:	2500      	movs	r5, #0
 800bf5c:	462c      	mov	r4, r5
 800bf5e:	e7af      	b.n	800bec0 <floor+0x48>
 800bf60:	8800759c 	.word	0x8800759c
 800bf64:	7e37e43c 	.word	0x7e37e43c
 800bf68:	bff00000 	.word	0xbff00000
 800bf6c:	000fffff 	.word	0x000fffff

0800bf70 <_init>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr

0800bf7c <_fini>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	bf00      	nop
 800bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf82:	bc08      	pop	{r3}
 800bf84:	469e      	mov	lr, r3
 800bf86:	4770      	bx	lr
